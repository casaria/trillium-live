/*! grafana - v4.5.0-beta1 - 2017-09-05
 * Copyright (c) 2017 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["lodash","jquery"],function(a,b){"use strict";function c(a){a.params=a.params||[],a.defaultParams=a.defaultParams||[],a.category&&a.category.push(a),g[a.name]=a,g[a.shortName||a.name]=a}function d(a,b){this.def=a,this.params=[],b&&b.withDefaultParams&&(this.params=a.defaultParams.slice(0)),this.updateText()}function e(a,b){return f(b,a.version)||!a.version}function f(a,b){var c=Number(a),d=Number(b);return c>=d}var g=[],h={Combine:[],Transform:[],Calculate:[],Filter:[],Special:[]},i=[{name:"other",type:"value_or_series",optional:!0},{name:"other",type:"value_or_series",optional:!0},{name:"other",type:"value_or_series",optional:!0},{name:"other",type:"value_or_series",optional:!0},{name:"other",type:"value_or_series",optional:!0}];return c({name:"scaleToSeconds",category:h.Transform,params:[{name:"seconds",type:"int"}],defaultParams:[1]}),c({name:"perSecond",category:h.Transform,params:[{name:"max value",type:"int",optional:!0}],defaultParams:[]}),c({name:"holtWintersForecast",category:h.Calculate}),c({name:"holtWintersConfidenceBands",category:h.Calculate,params:[{name:"delta",type:"int"}],defaultParams:[3]}),c({name:"holtWintersAberration",category:h.Calculate,params:[{name:"delta",type:"int"}],defaultParams:[3]}),c({name:"nPercentile",category:h.Calculate,params:[{name:"Nth percentile",type:"int"}],defaultParams:[95]}),c({name:"diffSeries",params:i,defaultParams:["#A"],category:h.Calculate}),c({name:"stddevSeries",params:i,defaultParams:[""],category:h.Calculate}),c({name:"divideSeries",params:i,defaultParams:["#A"],category:h.Calculate}),c({name:"multiplySeries",params:i,defaultParams:["#A"],category:h.Calculate}),c({name:"asPercent",params:i,defaultParams:["#A"],category:h.Calculate}),c({name:"group",params:i,defaultParams:["#A","#B"],category:h.Combine}),c({name:"sumSeries",shortName:"sum",category:h.Combine,params:i,defaultParams:[""]}),c({name:"averageSeries",shortName:"avg",category:h.Combine,params:i,defaultParams:[""]}),c({name:"rangeOfSeries",category:h.Combine}),c({name:"percentileOfSeries",category:h.Combine,params:[{name:"n",type:"int"},{name:"interpolate",type:"select",options:["true","false"]}],defaultParams:[95,"false"]}),c({name:"sumSeriesWithWildcards",category:h.Combine,params:[{name:"node",type:"int"},{name:"node",type:"int",optional:!0},{name:"node",type:"int",optional:!0},{name:"node",type:"int",optional:!0}],defaultParams:[3]}),c({name:"maxSeries",shortName:"max",category:h.Combine}),c({name:"minSeries",shortName:"min",category:h.Combine}),c({name:"averageSeriesWithWildcards",category:h.Combine,params:[{name:"node",type:"int"},{name:"node",type:"int",optional:!0}],defaultParams:[3]}),c({name:"alias",category:h.Special,params:[{name:"alias",type:"string"}],defaultParams:["alias"]}),c({name:"aliasSub",category:h.Special,params:[{name:"search",type:"string"},{name:"replace",type:"string"}],defaultParams:["","\\1"]}),c({name:"stacked",category:h.Special,params:[{name:"stack",type:"string"}],defaultParams:["stacked"]}),c({name:"consolidateBy",category:h.Special,params:[{name:"function",type:"string",options:["sum","average","min","max"]}],defaultParams:["max"]}),c({name:"cumulative",category:h.Special,params:[],defaultParams:[]}),c({name:"groupByNode",category:h.Special,params:[{name:"node",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,12]},{name:"function",type:"string",options:["sum","avg","maxSeries"]}],defaultParams:[3,"sum"]}),c({name:"aliasByNode",category:h.Special,params:[{name:"node",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,12]},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0}],defaultParams:[3]}),c({name:"substr",category:h.Special,params:[{name:"start",type:"int",options:[-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,12]},{name:"stop",type:"int",options:[-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,12]}],defaultParams:[0,0]}),c({name:"sortByName",category:h.Special,params:[{name:"natural",type:"select",options:["true","false"],optional:!0}],defaultParams:["false"]}),c({name:"sortByMaxima",category:h.Special}),c({name:"sortByMinima",category:h.Special}),c({name:"sortByTotal",category:h.Special}),c({name:"aliasByMetric",category:h.Special}),c({name:"randomWalk",fake:!0,category:h.Special,params:[{name:"name",type:"string"}],defaultParams:["randomWalk"]}),c({name:"countSeries",category:h.Special}),c({name:"constantLine",category:h.Special,params:[{name:"value",type:"int"}],defaultParams:[10]}),c({name:"cactiStyle",category:h.Special}),c({name:"keepLastValue",category:h.Special,params:[{name:"n",type:"int"}],defaultParams:[100]}),c({name:"changed",category:h.Special,params:[],defaultParams:[]}),c({name:"scale",category:h.Transform,params:[{name:"factor",type:"int"}],defaultParams:[1]}),c({name:"offset",category:h.Transform,params:[{name:"amount",type:"int"}],defaultParams:[10]}),c({name:"transformNull",category:h.Transform,params:[{name:"amount",type:"int"}],defaultParams:[0]}),c({name:"integral",category:h.Transform}),c({name:"derivative",category:h.Transform}),c({name:"nonNegativeDerivative",category:h.Transform,params:[{name:"max value or 0",type:"int",optional:!0}],defaultParams:[""]}),c({name:"timeShift",category:h.Transform,params:[{name:"amount",type:"select",options:["1h","6h","12h","1d","2d","7d","14d","30d"]}],defaultParams:["1d"]}),c({name:"timeStack",category:h.Transform,params:[{name:"timeShiftUnit",type:"select",options:["1h","6h","12h","1d","2d","7d","14d","30d"]},{name:"timeShiftStart",type:"int"},{name:"timeShiftEnd",type:"int"}],defaultParams:["1d",0,7]}),c({name:"summarize",category:h.Transform,params:[{name:"interval",type:"string"},{name:"func",type:"select",options:["sum","avg","min","max","last"]},{name:"alignToFrom",type:"boolean",optional:!0,options:["false","true"]}],defaultParams:["1h","sum","false"]}),c({name:"smartSummarize",category:h.Transform,params:[{name:"interval",type:"string"},{name:"func",type:"select",options:["sum","avg","min","max","last"]}],defaultParams:["1h","sum"]}),c({name:"absolute",category:h.Transform}),c({name:"hitcount",category:h.Transform,params:[{name:"interval",type:"string"}],defaultParams:["10s"]}),c({name:"log",category:h.Transform,params:[{name:"base",type:"int"}],defaultParams:["10"]}),c({name:"averageAbove",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[25]}),c({name:"averageBelow",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[25]}),c({name:"currentAbove",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[25]}),c({name:"currentBelow",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[25]}),c({name:"maximumAbove",category:h.Filter,params:[{name:"value",type:"int"}],defaultParams:[0]}),c({name:"maximumBelow",category:h.Filter,params:[{name:"value",type:"int"}],defaultParams:[0]}),c({name:"minimumAbove",category:h.Filter,params:[{name:"value",type:"int"}],defaultParams:[0]}),c({name:"minimumBelow",category:h.Filter,params:[{name:"value",type:"int"}],defaultParams:[0]}),c({name:"limit",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[5]}),c({name:"mostDeviant",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[10]}),c({name:"exclude",category:h.Filter,params:[{name:"exclude",type:"string"}],defaultParams:["exclude"]}),c({name:"highestCurrent",category:h.Filter,params:[{name:"count",type:"int"}],defaultParams:[5]}),c({name:"highestMax",category:h.Filter,params:[{name:"count",type:"int"}],defaultParams:[5]}),c({name:"lowestCurrent",category:h.Filter,params:[{name:"count",type:"int"}],defaultParams:[5]}),c({name:"movingAverage",category:h.Filter,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:[10]}),c({name:"movingMedian",category:h.Filter,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:["5"]}),c({name:"stdev",category:h.Filter,params:[{name:"n",type:"int"},{name:"tolerance",type:"int"}],defaultParams:[5,.1]}),c({name:"highestAverage",category:h.Filter,params:[{name:"count",type:"int"}],defaultParams:[5]}),c({name:"lowestAverage",category:h.Filter,params:[{name:"count",type:"int"}],defaultParams:[5]}),c({name:"removeAbovePercentile",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[5]}),c({name:"removeAboveValue",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[5]}),c({name:"removeBelowPercentile",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[5]}),c({name:"removeBelowValue",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[5]}),c({name:"useSeriesAbove",category:h.Filter,params:[{name:"value",type:"int"},{name:"search",type:"string"},{name:"replace",type:"string"}],defaultParams:[0,"search","replace"]}),c({name:"aggregateLine",category:h.Combine,params:[{name:"func",type:"select",options:["sum","avg","min","max","last"]}],defaultParams:["avg"],version:"1.0"}),c({name:"averageOutsidePercentile",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[95],version:"1.0"}),c({name:"delay",category:h.Transform,params:[{name:"steps",type:"int"}],defaultParams:[1],version:"1.0"}),c({name:"exponentialMovingAverage",category:h.Calculate,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:[10],version:"1.0"}),c({name:"fallbackSeries",category:h.Special,params:[{name:"fallback",type:"string"}],defaultParams:["constantLine(0)"],version:"1.0"}),c({name:"grep",category:h.Filter,params:[{name:"grep",type:"string"}],defaultParams:["grep"],version:"1.0"}),c({name:"groupByNodes",category:h.Special,params:[{name:"function",type:"string",options:["sum","avg","maxSeries"]},{name:"node",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,12]},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"node",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0}],defaultParams:["sum",3],version:"1.0"}),c({name:"integralByInterval",category:h.Transform,params:[{name:"intervalUnit",type:"select",options:["1h","6h","12h","1d","2d","7d","14d","30d"]}],defaultParams:["1d"],version:"1.0"}),c({name:"interpolate",category:h.Transform,params:[{name:"limit",type:"int",optional:!0}],defaultParams:[],version:"1.0"}),c({name:"invert",category:h.Transform,version:"1.0"}),c({name:"isNonNull",category:h.Combine,version:"1.0"}),c({name:"linearRegression",category:h.Calculate,params:[{name:"startSourceAt",type:"select",options:["-1h","-6h","-12h","-1d","-2d","-7d","-14d","-30d"],optional:!0},{name:"endSourceAt",type:"select",options:["-1h","-6h","-12h","-1d","-2d","-7d","-14d","-30d"],optional:!0}],defaultParams:[],version:"1.0"}),c({name:"mapSeries",shortName:"map",params:[{name:"node",type:"int"}],defaultParams:[3],category:h.Combine,version:"1.0"}),c({name:"movingMin",category:h.Calculate,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:[10],version:"1.0"}),c({name:"movingMax",category:h.Calculate,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:[10],version:"1.0"}),c({name:"movingSum",category:h.Calculate,params:[{name:"windowSize",type:"int_or_interval",options:["5","7","10","5min","10min","30min","1hour"]}],defaultParams:[10],version:"1.0"}),c({name:"multiplySeriesWithWildcards",category:h.Calculate,params:[{name:"position",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,12]},{name:"position",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"position",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0},{name:"position",type:"int",options:[0,-1,-2,-3,-4,-5,-6,-7],optional:!0}],defaultParams:[2],version:"1.0"}),c({name:"offsetToZero",category:h.Transform,version:"1.0"}),c({name:"pow",category:h.Transform,params:[{name:"factor",type:"int"}],defaultParams:[10],version:"1.0"}),c({name:"powSeries",category:h.Transform,params:i,defaultParams:[""],version:"1.0"}),c({name:"reduceSeries",shortName:"reduce",params:[{name:"function",type:"string",options:["asPercent","diffSeries","divideSeries"]},{name:"reduceNode",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,11,12,13]},{name:"reduceMatchers",type:"string"},{name:"reduceMatchers",type:"string"}],defaultParams:["asPercent",2,"used_bytes","total_bytes"],category:h.Combine,version:"1.0"}),c({name:"removeBetweenPercentile",category:h.Filter,params:[{name:"n",type:"int"}],defaultParams:[95],version:"1.0"}),c({name:"removeEmptySeries",category:h.Filter,version:"1.0"}),c({name:"squareRoot",category:h.Transform,version:"1.0"}),c({name:"timeSlice",category:h.Transform,params:[{name:"startSliceAt",type:"select",options:["-1h","-6h","-12h","-1d","-2d","-7d","-14d","-30d"]},{name:"endSliceAt",type:"select",options:["-1h","-6h","-12h","-1d","-2d","-7d","-14d","-30d"],optional:!0}],defaultParams:["-1h"],version:"1.0"}),c({name:"weightedAverage",category:h.Filter,params:[{name:"other",type:"value_or_series",optional:!0},{name:"node",type:"int",options:[0,1,2,3,4,5,6,7,8,9,10,12]}],defaultParams:["#A",4],version:"1.0"}),a.each(h,function(b,c){h[c]=a.sortBy(b,"name")}),d.prototype.render=function(c){var d=this.def.name+"(",e=a.map(this.params,function(a,c){var d=this.def.params[c].type;return"int"===d||"value_or_series"===d||"boolean"===d?a:"int_or_interval"===d&&b.isNumeric(a)?a:"'"+a+"'"}.bind(this));return c&&e.unshift(c),d+e.join(", ")+")"},d.prototype._hasMultipleParamsInString=function(a,b){return a.indexOf(",")!==-1&&(this.def.params[b+1]&&this.def.params[b+1].optional)},d.prototype.updateParam=function(b,c){return this._hasMultipleParamsInString(b,c)?void a.each(b.split(","),function(a,b){this.updateParam(a.trim(),b)}.bind(this)):(""===b&&this.def.params[c].optional?this.params.splice(c,1):this.params[c]=b,void this.updateText())},d.prototype.updateText=function(){if(0===this.params.length)return void(this.text=this.def.name+"()");var a=this.def.name+"(";a+=this.params.join(", "),a+=")",this.text=a},{createFuncInstance:function(b,c){if(a.isString(b)){if(!g[b])throw{message:"Method not found "+name};b=g[b]}return new d(b,c)},getFuncDef:function(a){return g[a]},getCategories:function(b){var c={};return a.each(h,function(d,f){var g=a.filter(d,function(a){return e(a,b)});g.length&&(c[f]=g)}),c}}});
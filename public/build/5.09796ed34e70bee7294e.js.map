{"version":3,"sources":["webpack:///./public/vendor/flot/jquery.flot.selection.js","webpack:///./public/vendor/flot/jquery.flot.stack.js","webpack:///./public/vendor/flot/jquery.flot.stackpercent.js","webpack:///./public/vendor/flot/jquery.flot.fillbelow.js","webpack:///./public/vendor/flot/jquery.flot.crosshair.js","webpack:///./public/vendor/flot/jquery.flot.dashes.js","webpack:///./public/vendor/flot/jquery.flot.gauge.js","webpack:///./public/app/plugins/datasource/prometheus/mode-prometheus.js","webpack:///./public/app/plugins/datasource/prometheus/snippets/prometheus.js","webpack:///./public/vendor/flot/jquery.flot.pie.js","webpack:///./public/app/features/annotations/editor_ctrl.ts","webpack:///./public/app/features/annotations/events_processing.ts","webpack:///./public/app/features/annotations/annotations_srv.ts","webpack:///./public/app/features/annotations/event_editor.ts","webpack:///./public/app/features/annotations/event.ts","webpack:///./public/app/features/annotations/event_manager.ts","webpack:///./public/app/features/annotations/annotation_tooltip.ts","webpack:///./public/app/features/annotations/all.ts","webpack:///./public/app/features/templating/variable.ts","webpack:///./public/app/features/templating/editor_ctrl.ts","webpack:///./public/app/features/templating/template_srv.ts","webpack:///./public/app/core/utils/dag.ts","webpack:///./public/app/features/templating/variable_srv.ts","webpack:///./public/app/features/templating/interval_variable.ts","webpack:///./public/app/features/templating/query_variable.ts","webpack:///./public/app/features/templating/datasource_variable.ts","webpack:///./public/app/features/templating/custom_variable.ts","webpack:///./public/app/features/templating/constant_variable.ts","webpack:///./public/app/features/templating/adhoc_variable.ts","webpack:///./public/app/features/templating/TextBoxVariable.ts","webpack:///./public/app/features/plugins/plugin_edit_ctrl.ts","webpack:///./public/app/features/templating/all.ts","webpack:///./public/app/features/plugins/plugin_page_ctrl.ts","webpack:///./public/app/features/plugins/import_list/import_list.ts","webpack:///./public/app/features/plugins/state/navModel.ts","webpack:///./public/app/features/plugins/ds_edit_ctrl.ts","webpack:///./public/app/features/plugins/ds_dashboards_ctrl.ts","webpack:///./public/app/features/panel/panel_ctrl.ts","webpack:///./public/app/features/panel/metrics_tab.ts","webpack:///./public/app/features/panel/metrics_panel_ctrl.ts","webpack:///./public/app/features/panel/query_ctrl.ts","webpack:///./public/app/features/alerting/state/ThresholdMapper.ts","webpack:///./public/app/features/alerting/AlertTabCtrl.ts","webpack:///./public/app/plugins/sdk.ts","webpack:///./public/app/core/utils/file_export.ts","webpack:///./public/app/core/utils/flatten.ts","webpack:///./public/app/core/utils/version.ts","webpack:///./public/app/plugins/datasource/graphite/gfunc.ts","webpack:///./public/app/plugins/datasource/graphite/datasource.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/graphite/lexer.ts","webpack:///./public/app/plugins/datasource/graphite/parser.ts","webpack:///./public/app/plugins/datasource/graphite/graphite_query.ts","webpack:///./public/app/plugins/datasource/graphite/query_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/config_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/module.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/module.ts","webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/logging/result_transformer.ts","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/core/logs_model.ts","webpack:///./public/app/plugins/datasource/logging/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/logging/module.ts","webpack:///./public/app/plugins/datasource/mixed/datasource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack:///./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack:///./public/app/plugins/datasource/prometheus/add_label_to_query.ts","webpack:///./public/app/plugins/datasource/prometheus/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/constants.ts","webpack:///./public/app/plugins/datasource/prometheus/completer.ts","webpack:///./public/app/plugins/datasource/prometheus/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/config_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/module.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/module.ts","webpack:///./public/app/plugins/datasource/stackdriver/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_aggregation_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/filter_segments.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_filter_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/config_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/module.ts","webpack:///./public/app/plugins/panel/text/module.ts","webpack:///./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack:///./public/app/plugins/panel/graph/graph_tooltip.ts","webpack:///./public/app/plugins/panel/graph/threshold_manager.ts","webpack:///./public/app/plugins/panel/graph/align_yaxes.ts","webpack:///./public/app/plugins/panel/graph/histogram.ts","webpack:///./public/app/plugins/panel/graph/graph.ts","webpack:///./public/app/plugins/panel/graph/legend.ts","webpack:///./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack:///./public/app/plugins/panel/graph/thresholds_form.ts","webpack:///./public/app/plugins/panel/graph/template.ts","webpack:///./public/app/plugins/panel/graph/data_processor.ts","webpack:///./public/app/plugins/panel/graph/module.ts","webpack:///./public/app/plugins/panel/graph/axes_editor.ts","webpack:///./public/app/plugins/panel/dashlist/module.ts","webpack:///./public/app/plugins/panel/pluginlist/module.ts","webpack:///./public/app/plugins/panel/alertlist/module.ts","webpack:///./public/app/plugins/panel/heatmap/color_scale.ts","webpack:///./public/app/plugins/panel/heatmap/color_legend.ts","webpack:///./public/app/plugins/panel/heatmap/display_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_data_converter.ts","webpack:///./public/app/plugins/panel/heatmap/axes_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_tooltip.ts","webpack:///./public/app/plugins/panel/heatmap/rendering.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_ctrl.ts","webpack:///./public/app/plugins/panel/heatmap/module.ts","webpack:///./public/app/plugins/panel/table/transformers.ts","webpack:///./public/app/plugins/panel/table/editor.ts","webpack:///./public/app/plugins/panel/table/column_options.ts","webpack:///./public/app/plugins/panel/table/renderer.ts","webpack:///./public/app/plugins/panel/table/module.ts","webpack:///./public/app/features/dashboard/panellinks/link_srv.ts","webpack:///./public/app/plugins/panel/singlestat/module.ts","webpack:///./public/app/plugins/panel/gettingstarted/module.ts","webpack:///./public/app/features/plugins/built_in_plugins.ts","webpack:///./public/app/features/plugins/plugin_loader.ts","webpack:///./public/app/features/plugins/datasource_srv.ts","webpack:///./public/app/features/plugins/plugin_component.ts","webpack:///./public/app/plugins/panel/unknown/module.ts","webpack:///./public/app/features/dashboard/dashboard_ctrl.ts","webpack:///./public/app/features/plugins/all.ts","webpack:///./public/app/features/dashboard/history/history.ts","webpack:///./public/app/features/dashboard/alerting_srv.ts","webpack:///./public/app/features/dashboard/history/history_srv.ts","webpack:///./public/app/features/dashboard/dashboard_loader_srv.ts","webpack:///./public/app/features/dashboard/dashnav/dashnav.ts","webpack:///./public/app/features/dashboard/submenu/submenu.ts","webpack:///./public/app/features/dashboard/save_as_modal.ts","webpack:///./public/app/features/dashboard/save_modal.ts","webpack:///./public/app/features/dashboard/save_provisioned_modal.ts","webpack:///./public/app/features/dashboard/shareModalCtrl.ts","webpack:///./public/app/features/dashboard/share_snapshot_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_srv.ts","webpack:///./public/app/features/dashboard/view_state_srv.ts","webpack:///./public/app/features/dashboard/validation_srv.ts","webpack:///./public/app/features/dashboard/time_srv.ts","webpack:///./public/app/features/dashboard/change_tracker.ts","webpack:///./public/app/features/dashboard/unsaved_changes_srv.ts","webpack:///./public/app/features/dashboard/unsaved_changes_modal.ts","webpack:///./public/app/features/dashboard/timepicker/input_date.ts","webpack:///./public/app/features/dashboard/timepicker/timepicker.ts","webpack:///./public/app/features/dashboard/upload.ts","webpack:///./public/app/features/dashboard/export/exporter.ts","webpack:///./public/app/features/dashboard/export/export_modal.ts","webpack:///./public/app/features/dashboard/export_data/export_data_modal.ts","webpack:///./public/app/features/dashboard/ad_hoc_filters.ts","webpack:///./public/app/features/dashboard/repeat_option/repeat_option.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardRow.tsx","webpack:///./public/app/core/components/ScrollBar/ScrollBar.tsx","webpack:///./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardGrid.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelLoader.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts","webpack:///./public/app/features/dashboard/folder_picker/folder_picker.ts","webpack:///./public/app/features/dashboard/dashgrid/RowOptions.ts","webpack:///./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts","webpack:///./public/app/features/dashboard/settings/settings.ts","webpack:///./public/app/features/dashboard/dashlinks/editor.ts","webpack:///./public/app/features/dashboard/panellinks/module.ts","webpack:///./public/app/features/dashboard/dashlinks/module.ts","webpack:///./public/app/features/dashboard/permissions/DashboardPermissions.tsx","webpack:///./public/app/features/dashboard/folder_page_loader.ts","webpack:///./public/app/features/dashboard/dashboard_import_ctrl.ts","webpack:///./public/app/features/dashboard/folder_dashboards_ctrl.ts","webpack:///./public/app/features/playlist/playlists_ctrl.ts","webpack:///./public/app/features/dashboard/create_folder_ctrl.ts","webpack:///./public/app/features/dashboard/all.ts","webpack:///./public/app/features/playlist/playlist_search.ts","webpack:///./public/app/features/playlist/playlist_srv.ts","webpack:///./public/app/features/playlist/playlist_edit_ctrl.ts","webpack:///./public/app/features/playlist/playlist_routes.ts","webpack:///./public/app/features/panel/panel_header.ts","webpack:///./public/app/features/playlist/all.ts","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/solo_panel_ctrl.ts","webpack:///./public/app/features/panel/panel_editor_tab.ts","webpack:///./public/app/features/panel/query_editor_row.ts","webpack:///./public/app/features/panel/query_troubleshooter.ts","webpack:///./public/app/features/panel/all.ts","webpack:///./public/app/features/org/org_users_ctrl.ts","webpack:///./public/app/features/org/profile_ctrl.ts","webpack:///./public/app/features/org/select_org_ctrl.ts","webpack:///./public/app/features/org/change_password_ctrl.ts","webpack:///./public/app/features/org/new_org_ctrl.ts","webpack:///./public/app/features/org/user_invite_ctrl.ts","webpack:///./public/app/features/org/create_team_ctrl.ts","webpack:///./public/app/features/org/org_details_ctrl.ts","webpack:///./public/app/features/org/prefs_control.ts","webpack:///./public/app/features/org/all.ts","webpack:///./public/app/features/admin/AdminListUsersCtrl.ts","webpack:///./public/app/features/admin/AdminEditUserCtrl.ts","webpack:///./public/app/features/admin/AdminEditOrgCtrl.ts","webpack:///./public/app/features/admin/AdminListOrgsCtrl.ts","webpack:///./public/app/features/alerting/NotificationsEditCtrl.ts","webpack:///./public/app/features/admin/StyleGuideCtrl.ts","webpack:///./public/app/features/admin/index.ts","webpack:///./public/app/features/alerting/NotificationsListCtrl.ts","webpack:///./public/app/features/manage-dashboards/DashboardListCtrl.ts","webpack:///./public/app/features/manage-dashboards/SnapshotListCtrl.ts","webpack:///./public/app/features/manage-dashboards/index.ts","webpack:///./public/app/features/all.ts"],"names":["$","plot","plugins","push","init","selection","first","x","y","second","show","active","savedhandlers","mouseUpHandler","onMouseMove","e","updateSelection","getPlaceholder","trigger","getSelection","onMouseDown","which","document","body","focus","undefined","onselectstart","ondrag","setSelectionPos","selectionIsSane","triggerSelectedEvent","setTimeout","isSelecting","onMouseUp","one","r","c1","c2","axes","getAxes","each","name","axis","used","anyUsed","p1","c2p","direction","p2","from","Math","min","to","max","event","ctrlKey","metaKey","xaxis","yaxis","x1","y1","x2","y2","clamp","value","pos","o","getOptions","offset","plotOffset","getPlotOffset","pageX","left","width","pageY","top","height","mode","triggerRedrawOverlay","clearSelection","preventEvent","extractRange","ranges","coord","key","k","n","getXAxes","getYAxes","tmp","minSize","abs","setSelection","range","p2c","hooks","bindEvents","eventHolder","mousemove","mousedown","drawOverlay","ctx","save","translate","c","color","parse","strokeStyle","scale","toString","lineWidth","lineJoin","shape","fillStyle","w","h","fillRect","strokeRect","restore","shutdown","unbind","options","version","jQuery","processDatapoints","s","datapoints","stack","other","allseries","res","i","length","findMatchingSeries","getData","px","py","intery","qx","qy","bottom","l","m","ps","pointsize","points","otherps","otherpoints","newpoints","withlines","lines","horizontal","bars","withbottom","format","withsteps","steps","keyOffset","accumulateOffset","j","fromgap","series","stackBases","processed","stackSums","getStackSums","_data","data_len","sums","stackpercent","key_idx","value_idx","num","data","processRawData","percents","sum","newPoints","segmentIntersection","top_left_x","top_left_y","top_right_x","top_right_y","bottom_left_x","bottom_left_y","bottom_right_x","bottom_right_y","top_delta_x","top_delta_y","bottom_delta_x","bottom_delta_y","t","drawSeries","otherseries","openPolygon","beginPath","moveTo","findNextStart","start_i","end_i","console","assert","intersect","start","equal","intersectionPoint","topTraversal","right_i","error","bottomTraversal","lineTo","closePath","fill","fillBelowTo","id","findBelowSeries","validateInput","a","normalize","crosshair","locked","onMouseOut","setCrosshair","clearCrosshair","lockCrosshair","unlockCrosshair","mouseout","adj","indexOf","drawX","floor","drawY","stroke","dashes","draw","axisx","axisy","plotDashes","xoffset","yoffset","dashOnLength","dashOffLength","prevx","prevy","dashRemainder","dashOn","dashLength","dashOffset","ax1","ay1","ax2","ay2","lineSegmentOffset","deltaX","deltaY","remainder","distance","segmentLength","sqrt","pow","ysign","lw","sw","shadowSize","angle","PI","sin","cos","Gauge","context","placeholder","gaugeOptions","gauges","getLogger","debug","calculateAutoValues","gaugeOptionsi","cellWidth","gauge","label","margin","font","size","threshold","calculateAngle","layout","startAngle","endAngle","drawArcWithShadow","cx","cy","rd1","rd2","lc","fc","blur","drawArc","clip","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","drawThresholdValue","cellLayout","drawText","thresholdLabelMargin","thresholdLabelFontSize","radius","toRad","formatter","text","textOptions","span","exists","attr","css","family","background","opacity","append","parseInt","prototype","calculateLayout","canvasWidth","canvasHeight","columns","rows","ceil","hMargin","vMargin","cellHeight","square","cell","cellMargin","labelMargin","labelFontSize","valueMargin","valueFontSize","thresholdWidth","maxRadiusH","dAngle","heightRatioV","outerRadiusV","maxRadiusV","outerRadius","gaugeOuterHeight","calculateCellLayout","col","row","blank","offsetY","vAlign","drawBackground","frame","grid","borderColor","borderWidth","backgroundColor","drawCellBackground","border","drawGauge","shadow","values","getColor","a2","drawThreshold","a1","drawLable","item","drawValue","drawThresholdValues","debugOptions","Logger","arc","defaults","log","alert","processOptions","legend","sort","b","extend","ace","define","require","exports","module","oop","TextHighlightRules","PrometheusHighlightRules","keywordMapper","this","createKeywordMapper","support.function","keyword","constant.language","$rules","token","regex","next","start-label-matcher","start-label-list-matcher","normalizeRules","inherits","lang","keyWordsCompletions","map","word","caption","meta","score","Number","MAX_VALUE","functionsCompletions","def","docText","docHTML","escapeHTML","replace","convertMarkDownTags","str","len","space_index","line_start","next_line_end","line","slice","join","wrapText","convertToHTML","PrometheusCompletions","getCompletions","state","session","prefix","callback","getTokenAt","column","type","concat","call","CstyleBehaviour","Behaviour","TokenIterator","PrometheusBehaviour","inherit","add","action","editor","getSelectionRange","selected","doc","getTextRange","getWrapBehavioursEnabled","opening","closing","rowDiff","end","getWrapped","isSaneInsertion","cursor","getCursorPosition","getLine","substring","$findOpeningBracket","isAutoInsertedClosing","isMultiLine","TextMode","Mode","HighlightRules","$behaviour","$completer","completer","$id","snippets","content","scope","tabTrigger","REDRAW_ATTEMPTS","REDRAW_SHRINK","pie","innerRadius","tilt","alpha","round","percent","combine","highlight","canvas","target","maxRadius","centerLeft","centerTop","highlights","getCanvas","parent","setData","total","combined","numCombined","newdata","isArray","isNaN","parseFloat","isFinite","newCtx","legendWidth","children","filter","position","match","slices","attempts","clear","drawShadow","drawPie","prepend","setSeries","insertLegend","clearRect","remove","shadowLeft","shadowTop","globalAlpha","currentAngle","drawSlice","drawDonutHole","drawLabel","index","lf","labelFormatter","plf","halfAngle","html","labelTop","labelLeft","insertBefore","drawLabels","layer","globalCompositeOperation","isPointInPoly","poly","pt","triggerClickHoverEvent","onClick","eventname","mouseX","mouseY","isPointInPath","datapoint","dataIndex","seriesIndex","findNearbySlice","autoHighlight","auto","unhighlight","indexOfHighlight","splice","hoverable","clickable","click","octx","drawHighlight","gettingstarted_module_namespaceObject","__webpack_require__","d","module_GettingStartedPanelCtrl","angular","lodash","jquery_js_exposed","AnnotationsEditorCtrl","$scope","datasourceSrv","annotationDefaults","datasource","iconColor","enable","showIn","hide","showOptions","ctrl","datasources","getAnnotationSources","annotations","dashboard","list","reset","onColorChange","bind","$inject","datasourceChanged","_this","get","currentAnnotation","then","ds","currentDatasource","edit","annotation","currentIsNew","jquery_js_exposed_default","angular_default","copy","update","setupNew","move","dir","removeAnnotation","lodash_default","newColor","partition","regionEvents","_a","singleEvents","events","regionId","groupBy","compact","regions","head","regionObj","timeEnd","time","isRegion","isStartOfRegion","valueOf","isPanelAlert","eventType","controller","editor_ctrl_AnnotationsEditorCtrl","$rootScope","$q","backendSrv","timeSrv","onAppEvent","clearCache","getAnnotations","getGlobalAnnotations","getAlertStates","results","flattenDeep","makeRegions","eventsById","dedup","eventGroup","every","find","dedupAnnotations","panelId","source","panel","alertState","catch","err","message","appEvent","raw","alertStatesPromise","when","globalAnnotationsPromise","timeRange","this_1","translateQueryResult","snapshotData","annotationQuery","rangeRaw","snapshot","_i","state_1","_loop_1","all","promises","saveAnnotationEvent","post","updateAnnotationEvent","put","results_1","AnnotationsSrv","service","annotations_srv_AnnotationsSrv","moment","EventEditorCtrl","annotationsSrv","panelCtrl","dashboardId","tryEpochToMoment","formatDate","form","$valid","cloneDeep","saveModel","refresh","close","delete","deleteAnnotationEvent","timestamp","directive","tinycolor","AnnotationEvent","EventManager","editorClosed","editorOpen","render","editorOpened","updateTime","moment_default","editEvent","elem","addFlotEvents","flotOptions","colors","editModel","newState","types","markerSize","fillColor","markings","defaultColor","colorString","tinycolor_default","isValid","setAlpha","toRgbString","addAlphaToRGB","region","event_manager_getRegions","eventSectionHeight","levels","keys","manager","$sanitize","dashboardSrv","contextSrv","$compile","escape","element","title","getCurrent","tooltip","titleStateClass","alertId","stateModel","alertDef","getStateDisplayModel","stateClass","iconClass","getAlertAnnotationInfo","isString","header","login","avatarUrl","sanitizeString","appendTo","contents","annotationTooltipDirective","kbn","variableTypes","containsVariable","args","arguments","variableName","regexEscape","RegExp","exec","VariableEditorCtrl","variableSrv","templateSrv","_","optionsLimit","refreshOptions","variables","$watch","val","addVariable","current","emit","sameName","app_events","query","validate","infoText","getTagKeys","updateOptions","variable","clone","getSaveModel","createVariableFromModel","runQuery","updateTemplateData","getMetricSources","mixed","datasourceTypes","uniqBy","old","oldIndex","removeVariable","showMoreOptions","editor_ctrl_VariableEditorCtrl","template_srv","TemplateSrv","grafanaVariables","isNone","variableInitialized","getAdhocFilters","datasourceName","filters","luceneFormat","luceneEscape","Array","formatValue","escapedValues","distributeVariable","setGrafanaVariable","getVariableName","expression","lastIndex","variableExists","highlightVariablesAsHtml","var1","var2","fmt2","var3","builtIns","getAllValue","allValue","scopedVars","systemValue","fmt","fmt3","isAllValue","replaceWithText","option","fillVariableValuesForUrl","params","skipUrlSync","getValueForUrl","Edge","_linkTo","node","inputEdges","outputEdges","edges","link","inputNode","outputNode","Error","unlink","inode","onode","Node","getEdgeFrom","getOptimizedInputEdges","toBeRemoved","forEach","edgeToRemove","getEdgeTo","Graph","nodes","createNode","createNodes","names","input","output","outputNodes","inputArr","n_1","getNode","inputNodes","outputArr","n_2","createEdge","VariableSrv","$location","$injector","$on","onDashboardRefresh","updateUrlParamsWithCurrentVariables","templating","initLock","defer","queryParams","search","processVariable","evt","payload","fromVariableValueUpdated","Promise","resolve","previousOptions","toJson","$emit","dependencies","otherVariable","dependsOn","promise","urlValue","setValueFromUrl","finally","model","ctor","instantiate","updateSubmenuVisibility","variableUpdated","emitChangeEvents","v","$broadcast","selectOptionsForCurrentValue","validateVariableSelectionState","setValue","currentOption","setOptionFromUrl","op","defaultText","defaultValue","setOptionAsCurrent","setAdhocFilter","createGraph","g","v1","v2","variable_srv_VariableSrv","IntervalVariable","auto_min","auto_count","Object","model_utils","updateAutoValue","unshift","calculateInterval","interval","trim","QueryVariable","multi","includeAll","tags","useTags","tagsQuery","tagValuesQuery","updateOptionsFromMetricFindQuery","updateTags","metricFindQuery","getValuesForTag","tagKey","metricNamesToVariableValues","addAllOption","metricNames","matches","stringToJsRegex","isNumber","sortVariableValues","sortOrder","sortType","reverseSort","sortBy","opt","toLower","reverse","query_variable_QueryVariable","description","supportsMulti","datasource_variable_DatasourceVariable","DatasourceVariable","sources","skipVariables","CustomVariable","split","custom_variable_CustomVariable","ConstantVariable","constant_variable_ConstantVariable","AdhocVariable","unescapeDelimiter","operator","escapeDelimiter","setFilters","adhoc_variable_AdhocVariable","TextBoxVariable_TextBoxVariable","TextBoxVariable","factory","remarkable","$sce","$routeParams","navModelSrv","pluginId","setNavModel","defaultTab","navModel","main","img","info","logos","large","subTitle","author","url","breadcrumbs","icon","includes","tab","result","pluginIcon","getPluginIcon","plug","initReadme","md","remarkable_default","linkify","readmeHtml","trustAsHtml","PluginEditCtrl","preUpdateHook","updateCmd","enabled","pinned","jsonData","secureJsonData","importDashboards","setPreUpdateHook","setPostUpdateHook","postUpdateHook","updateAvailable","modalScope","$new","plugin","disable","plugin_edit_ctrl_PluginEditCtrl","plugin_page_ctrl_AppPageCtrl","AppPageCtrl","initPage","pluginInfoCache","loadPluginInfo","app","appModel","page","slug","getNotFoundNav","pluginNav","getNav","DashImportListCtrl","dashboards","on","importAll","importNext","reject","import","dash","overwrite","installCmd","path","inputs","importedUri","imported","restrict","templateUrl","import_list_DashImportListCtrl","buildNavModel","currentPage","access","DataSourceEditCtrl","configureStore","getState","navIndex","getDatasourceById","initNewDatasourceModel","isNew","ds_edit_ctrl_defaults","gettingstarted","gettingStarted","isDefault","typeChanged","loadDatasourceTypes","datasourceCreated","testDatasource","userChangedType","updateNav","datasourceMeta","pluginInfo","updateFrontendSettings","settings","core_config","defaultDatasource","done","status","withNoBackendCache","testing","statusText","saveChanges","editForm","readOnly","confirmDelete","yesText","onConfirm","ds_edit_ctrl_DataSourceEditCtrl","suggestUrl","noDirectAccess","pre","attrs","showAccessOption","showAccessHelp","toggleAccessHelp","getSuggestUrls","DataSourceDashboardsCtrl","getPluginInfo","ds_dashboards_ctrl_DataSourceDashboardsCtrl","system","constants","store","panel_ctrl_PanelCtrl","PanelCtrl","$timeout","editorTabIndex","timing","panels","pluginName","panelDidMount","removeAllListeners","publishAppEvent","renderingCompleted","core","evtName","$root","changeView","fullscreen","viewPanel","editPanel","exitFullscreen","initEditMode","editorTabs","addEditorTab","editModeInitiated","urlTab","toLowerCase","changeTab","newIndex","route","updateParams","directiveFn","editorTab","getMenu","shortcut","canEdit","menu","role","apply","getAdditionalMenuItems","extendedMenu","getExtendedMenu","submenu","divider","otherPanelInFullscreenMode","calculatePanelHeight","docHeight","window","editHeight","fullscreenHeight","containerHeight","editMode","gridPos","soloMode","renderStart","Date","getTime","duplicate","duplicatePanel","removePanel","editPanelJson","editScope","object","updateHandler","replacePanel","enableCopy","src","copyPanel","set","JSON","stringify","newPanel","oldPanel","findIndex","deletedPanel","panel_model","sortPanelsByGridPos","sharePanel","getInfoMode","links","getInfoContent","markdown","sanitize","openInspector","panelInfoHtml","inspector","rangeutil","MetricsTabCtrl","panelDsValue","datasourceInstance","addQueryDropdown","fake","nextRefId","getNextQueryLetter","updateDatasourceOptions","hasQueryHelp","queryOptions","includeBuiltin","builtIn","setDatasource","addMixedQuery","addQuery","toggleHelp","optionsOpen","queryTroubleshooterOpen","helpOpen","helpHtml","toggleOptions","toggleQueryTroubleshooter","metricsTabDirective","metrics_tab_MetricsTabCtrl","_super","MetricsPanelCtrl","targets","onMetricsPanelRefresh","onInitMetricsPanelEditMode","onPanelTearDown","dataSubscription","unsubscribe","updateTimeRange","data_1","dataStream","loading","setTimeQueryStart","issueQueries","handleQueryResult","cancelled","queryStart","setTimeQueryEnd","queryEnd","maxDataPoints","resolution","intervalOverride","intervalMs","applyPanelTimeOverrides","timeInfo","timeFrom","timeFromInterpolated","timeFromInfo","invalid","timeFromDate","datemath","display","timeShift","timeShiftInterpolated","hideTimeOverride","assign","__interval","__interval_ms","metricsQuery","timezone","getTimezone","cacheTimeout","subscribe","handleDataStream","stream","complete","items","exploreEnabled","isEditor","explore","tslib_es6","sent","refId","removeQuery","moveQuery","conditions","evaluator","condition","thresholds","value1","value2","colorMode","ThresholdMapper","AlertTabCtrl","uiSegmentSrv","subTabIndex","evalFunctions","evalOperators","conditionTypes","noDataModes","executionErrorModes","appSubUrl","$onInit","newPlusButton","graphThresholdChanged","thresholdChangedEventHandler","off","editingThresholds","notifications","alertHistory","initModel","validateModel","getAlertHistory","ah","getNotificationIcon","getNotifications","newSegment","changeTabIndex","newTabIndex","notificationAdded","addNotificationSegment","removeNotification","alertNotifications","buildDefaultCondition","noDataState","alertingNoDataOrNullValues","executionErrorState","alertingErrorOrTimeout","frequency","handler","defaultName","conditionModels","reduce","memo","buildConditionModel","alertToGraphThresholds","addedNotification","_b","_c","notification","bgColor","handleIndex","evaluatorParamsChanged","firstTarget","foundTarget","alerting","targetContainsTemplate","query_part","alertQueryDef","createReducerPart","reducer","cm","handleQueryPartEvent","conditionModel","handleReducerPartEvent","reducerPart","reducerTypes","addCondition","removeCondition","text2","evaluatorTypeChanged","clearHistory","prism","prism_default","slate_es","slate_plain_serializer_es","react","react_dom","time_series2","table_model","FileSaver","QUOTE","EXPORT_FILENAME","csvEscaped","DOMParser","htmlDecoded","domParser","parseFromString","textContent","regexp","formatSpecialHeader","useExcelHeader","END_COLUMN","END_ROW","formatRow","addEndRowDelimiter","util","toLocaleString","convertSeriesListToCsv","seriesList","dateTimeFormat","excel","DEFAULT_DATETIME_FORMAT","alias","POINT_TIME_INDEX","POINT_VALUE_INDEX","exportSeriesListToCsv","convertSeriesListToCsvColumns","timestamps","seriesPoints","seriesTimestamps","p","extendedSeries","pointIndex","mergeSeriesByTime","table","opts","delimiter","maxDepth","step","prev","isarray","safe","isobject","newKey","currentDepth","utils_ticks","versionPattern","version_SemVersion","SemVersion","major","minor","patch","isGtOrEq","compared","isVersionGtOrEq","gfunc_index","addFuncDef","funcDef","defaultParams","shortName","optionalSeriesRefArgs","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","FuncInstance","withDefaultParams","updateText","metricExp","parameters","paramType","last","pop","_hasMultipleParamsInString","strValue","updateParam","partVal","idx","gfunc","getFuncDef","gfunc_FuncInstance","param","rawDefs","funcName","group","test","required","shift","rawParam","default","func","suggestions","funcDefs","instanceSettings","basicAuth","supportsTags","withCredentials","render_method","funcDefsPromise","getQueryOptionsInfo","translateTime","until","buildGraphiteParams","graphOptions","method","headers","Content-Type","addTracingHeaders","httpOptions","requestId","doGraphiteRequest","convertDataPointsToMs","parseTags","tagString","graphiteQuery","target_1","tags_1","what","date","roundUp","subtract","unix","optionalOptions","interpolatedQuery","expressions","exprRegex","limit","getTagValuesAutoComplete","getTagsAutoComplete","metric","expandable","tag","getTagValues","tagPrefix","expr","valuePrefix","createFuncInstance","waitForFuncDefsLoaded","getFuncDefs","supportsFunctionIndex","parseFuncDefs","Authorization","inspect","datasourceRequest","_seriesRefLetters","targetValue","hasTargets","fixIntervalFormat","nestedSeriesRegexReplacer","cleanOptions","encodeURIComponent","graphiteOptions","rst2html_min","js_drop","drop","categories","createFunctionDropDownMenu","$input","typeahead","allFunctions","minLength","updater","$apply","addFunction","toggleClass","$button","removeClass","cleanUpDrop","destroy","shortDesc","contentElement","createElement","innerHTML","rst2html_min_default","drop_default","classes","openOn","tetherOptions","attachment","targetAttachment","popoverSrv","$funcLink","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","select","lookup","paramDef","switchToLink","inputElem","clearTimeout","newValue","relink","targetChanged","hasClass","addClass","inputBlur","inputKeyPress","inputKeyDown","style","toggleFuncControls","targetDiv","closest","$funcControls","addElementsAndCompile","defParams","lastParam","paramValue","$paramLink","paramTemplate","partial","keyup","keypress","$element","process","added","$target","removeFunction","queryModel","functions","$index","classNames","template","open","graphiteAddFunc","graphiteFuncEditor","unicodeLetterTable","lexer_i","identifierStartTable","Lexer","lexer","tokenize","charAt","char","peek","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","skip","isUnicodeLetter","code","isHexDigit","ch1","ch2","ch3","ch4","chr","charCodeAt","readUnicodeEscapeSequence","identifierPartTable","getIdentifierStart","getIdentifierPart","ch","isDecimalDigit","isMalformed","isIdentifierStart","base","isOctalDigit","bad","isPunctuator","quote","isUnclosed","functionCall","metricExpression","curlySegment","consumeToken","errorMark","curly","curlyBraceSegment","parts","tokens","segments","metricSegment","segment","functionParameters","numericLiteral","seriesRefExpression","boolExpression","stringLiteral","currentToken","token1","token2","matchToken","graphite_query","GraphiteQuery","parseTarget","removeTagValue","textEditor","astNode","Parser","getAst","parseTargetRecursive","checkForSeriesByTag","checkOtherSegmentsIndex","seriesByTagUsed","hidden","splitSeriesByTagParams","seriesByTagFunc","getSegmentPathUpTo","arr","innerFunc_1","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","newFunc","moveAliasFuncLast","aliasFunc","startsWith","without","updateModelTarget","wrapFunction","metricPath","updateRenderedTarget","targetsByRefId","keyBy","nestedSeriesRefRegex","targetWithNestedQueries","refCount","count","countTargetRefs","updated","g1","targetFull","tagPattern","flatten","getSeriesByTagFuncIndex","getSeriesByTagFunc","seriesByTagFuncIndex","addTag","newTagParam","renderTagString","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","tagExpr","GRAPHITE_TAG_OPERATORS","TAG_PREFIX","GraphiteQueryCtrl","paused","buildSegments","toggleEditorMode","checkOtherSegments","fixTagSegments","newSelectMetric","fromIndex","setSegmentFocus","segmentIndex","getAltSegments","altSegments","eachRight","removeTaggedEntry","addAltTagSegments","getTagsAsSegments","tagSegments","segmentValueChanged","removeTagPrefix","pause","addSeriesByTagFunc","spliceSegments","emptySegments","targetTextChanged","oldTarget","smartlyHandleNewAliasByNode","tagParam","getAllTags","getTags","altTags","mapToDropdownOptions","tagExpressions","getTagOperators","getAllTagValues","altValues","addNewTag","newTag","addTagSegments","showDelimiter","unpause","query_ctrl_QueryCtrl","GraphiteConfigCtrl","graphiteVersions","autoDetectGraphiteVersion","loadDatasource","getVersion","AnnotationsQueryCtrl","onChange","namespace","metricName","statistics","dimensions","period","returnData","highResolution","regionSegment","getSegmentForValue","namespaceSegment","newOperator","newKeyValue","statSegments","stat","ensurePlusButton","dimSegments","removeDimSegment","removeStatSegment","isEmpty","getStatSegments","standardStatistics","statSegmentChanged","seg","lastSegment","getDimSegments","getDimensionKeys","dimensionKey","getDimensionValues","transformToSegments","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","keySegment","valueSegment","dims","regionChanged","namespaceChanged","metricChanged","addTemplateVars","CloudWatchQueryParameter","query_parameter_ctrl_CloudWatchQueryParameterCtrl","cloudwatch_datasource","CloudWatchDatasource","proxyUrl","defaultRegion","expandTemplateVariable","queries","getActualRegion","convertDimensionFormat","String","getPeriod","some","datasourceId","performTimeSeriesQuery","request","now","convertToCloudWatchTime","interval_to_seconds","periodUnit","daySec","awsRequest","queryRes","unit","transformSuggestDataFromTable","suggestData","tables","doMetricQueryRequest","subtype","getRegions","getNamespaces","getMetrics","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","getDefaultRegion","getExpandedVariables","allSelected","selectedVariables","currentVariables","scopedVar","btoa","chain","findKey","has","multiVariable","convertedDimensions","query_ctrl_CloudWatchQueryCtrl","CloudWatchQueryCtrl","aliasSyntax","CloudWatchConfigCtrl","accessKeyExist","secretKeyExist","authTypes","indexPatternTypes","example","timeField","authType","secureJsonFields","accessKey","secretKey","resetAccessKey","resetSecretKey","CloudWatchAnnotationsQueryCtrl","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","query_def_bucketAggTypes","orderByOptions","orderOptions","sizeOptions","intervalOptions","query_def_pipelineOptions","derivative","movingAvgModelSettings","isCheckbox","getMetricAggTypes","esVersion","query_def_metricAggTypes","f","metricType","po","getMovingAvgSettings","filtered","filteredResult","setting","field","ElasticQueryBuilder","getRangeFilter","gte","lte","buildTermsAgg","aggDef","queryNode","metricRef","terms","orderBy","order","metrics","aggs","min_doc_count","missing","getDateHistogramAgg","esAgg","extended_bounds","getHistogramAgg","getFiltersAgg","analyze_wildcard","documentQuery","unmapped_type","fielddata_fields","docvalue_fields","addAdhocFilters","adhocFilters","queryCondition","bool","must","match_phrase","must_not","lt","gt","build","queryString","bucketAggs","query_string","precision","nestedAggs","pipelineAgg","buckets_path","metricAgg","prop","aggField","getTermsQuery","queryDef","_term","intervalMap","Hourly","startOf","amount","index_pattern_IndexPattern","IndexPattern","pattern","getIndexForToday","utc","getIndexList","intervalInfo","endEpoch","response","processMetrics","props","bucket","buckets","doc_count","newSeries","percentiles","percentileName","statName","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","normalized_value","processAggregationDocs","addColumn","propKey","filterable","addMetricValue","_d","_e","propValues","_f","_g","getMetricName","processBuckets","depth","aggId","nameIndex","key_as_string","metricDef","extendedStats","getSeriesName","metricTypeCount","g2","appliedAgg","describeMetric","propName","ElasticResponse","nameSeries","uniq","processHits","hits","hit","_id","_type","_index","_source","fields","trimDatapoints","aggregations","histogram","trimEdges","getErrorFromElasticResponse","root_cause","reason","$$config","config","getTimeSeries","responses","tmpSeriesList","timeInterval","maxConcurrentShardRequests","query_builder_ElasticQueryBuilder","ElasticDatasource","indexPattern","indexList","tagsField","textField","getFieldFromSource","fieldName","fieldNames","fieldValue","titleField","setTime","getFields","dateFields","getQueryHeader","searchType","timeTo","queryHeader","queryBuilder","queryObj","sentTargets","typeMap","float","double","integer","shouldAddField","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","indexName","mappings","typeName","getTerms","esQuery","fromJson","bucketAgg","objectContainsTemplate","isPrimitive","ElasticBucketAggCtrl","getBucketAggTypes","agg","isFirst","bucketAggCount","settingsLinkText","describeOrder","describeOrderBy","substr","defaultTo","removeFiltersQuery","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","addBucketAgg","lastBucket","addIndex","removeBucketAgg","bucket_agg_ElasticBucketAggCtrl","getPipelineAggOptions","metricAggs","metricAggTypes","pipelineOptions","getPipelineOptions","precisionThreshold","precision_threshold","movingAvgModelTypes","movingAvgModelOptions","modelSettings","updateMovingAvgModelSettings","inlineScript","script","inline","updatePipelineAggOptions","onChangeInternal","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","ElasticMetricAggCtrl","metric_agg_ElasticMetricAggCtrl","ElasticQueryCtrl","queryUpdated","jsonStr","handleQueryError","newJson","rawQueryOld","getCollapsedText","bucketAggTypes","ElasticConfigCtrl","esVersions","indexPatternTypeChanged","database","opentsdb_datasource","OpenTsDatasource","tsdbVersion","tsdbResolution","tagKeys","aggregatorsPromise","filterTypesPromise","convertToTSDBTime","convertTargetToQuery","qs","groupByTags","tagk","metricToTargetMapping","mapMetricsToTargets","metricData","_saveTagKeys","transformMetricData","eventList","aggregator","annotationObject","isGlobal","globalAnnotations","startTime","msResolution","reqBody","showQuery","suggestTagKeys","aggregateTags","_performSuggestQuery","_get","q","_performMetricKeyValueLookup","keysArray","keysQuery","tagvs","_performMetricKeyLookup","tagks","tagv","relativeUrl","_addCredentialOptions","interpolated","responseTransform","tagNamesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","getAggregators","getFilterTypes","createMetricLabel","dps","metricLabel","scopedVars_1","toPairs","tagData","shouldComputeRate","rate","rateOptions","isCounter","counterMax","counterResetValue","resetValue","dropResets","ResetValue","disableDownsampling","downsampleInterval","downsample","downsampleAggregator","downsampleFillPolicy","explicitTags","interpolatedTagValue","arrTagV","tagV","tagK","OpenTsQueryCtrl","errors","validateTarget","aggregators","fillPolicies","filterTypes","suggestMetrics","getTextValues","suggestTagValues","targetBlur","metricFindResult","addTagMode","currentTagKey","currentTagValue","editTag","closeAddTagMode","addFilter","currentFilterType","currentFilterGroupBy","currentFilter","currentFilterValue","currentFilterKey","addFilterMode","removeFilter","editFilter","fil","closeAddFilterMode","errs","shouldDownsample","describe_interval","OpenTsConfigCtrl","tsdbVersions","tsdbResolutions","GrafanaDatasource","tt","GrafanaQueryCtrl","GrafanaAnnotationsQueryCtrl","influx_series","seriesName","columnName","_getSeriesName","segIndex","titleCol","timeCol","tagsCol","textCol","titleColumn","tagsColumn","textColumn","InfluxSeries","getTable","reordered","hasOwnProperty","createPart","part","query_part_index","register","fieldRenderer","innerExpr","replaceAggregationAddStrategy","selectParts","partModel","query_part_categories","Aggregations","morePartsAvailable","Selectors","addTransformationStrategy","Aliasing","addStrategy","selectModels","Fields","dynamicLookup","renderer","Transformations","groupByTimeFunctions","Predictors","partCount","influxdb_query_part","InfluxQuery","policy","resultFormat","orderByTime","updateProjection","create","groupByParts","updatePersistedParts","hasGroupByTime","hasFill","addGroupBy","stringParts","arg","typePart","removeGroupByPart","getCategories","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","getMeasurementAndPolicy","measurement","interpolateQueryStr","defaultFormatFn","rawQuery","selectText","groupBySection","slimit","renderAdhocFilters","response_parser","ResponseParser","influxResults","normalizedQuery","isValueFirst","serie","addUnique","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","InfluxQueryBuilder","influxdb_datasource","username","password","getTimeFilter","queryTargets","influx_query","acc","allQueries","timeFilter","_seriesQuery","influxSeries","timeSeries","curry","responseParser","query_builder_InfluxQueryBuilder","_influxRequest","epoch","serializeParams","currentUrl","urls","u","db","req","getInfluxTime","fromIsAbsolute","InfluxDatasource","InfluxQueryCtrl","resultFormats","policySegment","measurementSegment","newSelectMeasurement","newCondition","buildSelectMenu","removeOrderByTime","selectMenu","cat","getGroupByOptions","groupByAction","groupBySegment","plusButton","subitem","handleSelectPartEvent","fieldsQuery","handleGroupByPartEvent","measurementChanged","getPolicySegments","policiesQuery","policyChanged","getMeasurements","measurementFilter","getTagsOrValues","nextValue","newOperators","removeTagFilterSegment","getFieldSegments","tagSegmentUpdated","rebuildTargetTagConditions","tagOperator","segment2","getTagValueOperator","tagValue","InfluxConfigCtrl","InfluxAnnotationsQueryCtrl","entry","labels","timeFromNow","fromNow","timeLocal","searchMatches","getSearchMatches","logLevel","level","LogLevel","getLogLevel","logging_datasource","LoggingDatasource","_request","apiUrl","prepareQueryTarget","QUERY_REGEXP","streams","combinedEntries","entries","processEntry","processStreams","metadataRequest","silent","MixedDatasource","sets","dsName","mysql_response_parser","processQueryResult","parseMetricFindQueryResult","rowCount","findColIndex","textColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","containsKey","colName","transformAnnotationResponse","textColumnIndex","tagsColumnIndex","timeColumnIndex","interpolateVariable","rawSql","MysqlDatasource","defaultQuery","query_ctrl_MysqlQueryCtrl","MysqlQueryCtrl","formats","onDataReceived","onDataError","dataList","lastQueryError","anySeriesFromQuery","lastQueryMeta","MysqlConfigCtrl","module_defaultQuery","MysqlAnnotationsQueryCtrl","postgres_response_parser","postgres_query","PostgresQuery","timeColumn","metricColumn","where","unquoteIdentifier","quoteIdentifier","quoteLiteral","escapeLiteral","hasTimeGroup","hasMetricColumn","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","timeGroup","buildMetricColumn","buildValueColumns","buildValueColumn","aggregate","windows","overParts","over","curr","buildWhereClause","buildGroupClause","groupSection","PostgresDatasource","getTimescaleDBVersion","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","toUpperCase","wrapOpen","wrapClose","separator","sql_part_SqlPart","SqlPart","sql_part_index","sql_part_register","SqlPartDef","sql_part","PostgresQueryCtrl","metaBuilder","query_ctrl_defaultQuery","tableSegment","timeColumnSegment","groupAdd","whereParts","groupParts","aggregates","timescaledb","postgresVersion","resetPlusButton","button","getTableSegments","tableChanged","metricColumnSegment","task1","segment_1","timeColumnChanged","task2","getTimeColumnSegments","getMetricColumnSegments","addNone","metricColumnChanged","templateQuoter","findAggregateIndex","findWindowIndex","subItem","partType","addAlias","addGroup","aggIndex","windowIndex","aggIndex_1","handleGroupPartEvent","removeGroup","handleWherePartEvent","addWhereAction","whereAdd","getGroupOptions","addGroupAction","config_ctrl_PostgresConfigCtrl","postgresVersions","sslmode","showTimescaleDBHelp","autoDetectFeatures","trunc","toggleTimescaleDBHelp","PostgresAnnotationsQueryCtrl","postgres_module_defaultQuery","metric_find_query","labelValuesQuery","metricNamesQuery","queryResultQuery","metricNameAndLabelsQuery","PrometheusMetricFindQuery","getPrometheusTime","_labels","metricFilterPattern","matchedMetricName","performInstantQuery","__name__","self","getOriginalMetricName","result_transformer_ResultTransformer","ResultTransformer","transform","prometheusResult","transformMetricDataToTable","responseListLength","sortSeriesByLabel","prometheusResult_1","transformToHistogramOverTime","prometheusResult_2","resultType","transformInstantMetricData","dpValue","baseTimestamp","stepMs","endTimestamp","responseIndex","resultCount","metricLabels","sortedLabels","labelIndex","valueText","labelData","isUndefined","legendFormat","renderTemplate","aliasPattern","aliasData","topSeries","bottomSeries","bottomPoint","s1","s2","le1","le2","parseHistogramLabel","le","Infinity","keywords","selector","labelKey","labelValue","labelOperator","labelRegexp","parsedLabels","operatorForLabelKey","add_label_to_query","previousWord","metricNameRegexp","insideSelector","openChar","closeChar","nextSelectorStart","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","builtInWords","selectorRegexp","selectorWithLabel","addLabelToSelector","prometheusRegularEscape","prometheusSpecialRegexEscape","MetricKind","PrometheusDatasource","editorSrc","directUrl","queryTimeout","httpMethod","ruleMappings","loadRules","transformRequest","interpolateQueryExpr","activeTargets","createQuery","allQueryPromise","instant","responseList","hints","transformerOptions","resultTransformer","hinting","queryHints","increasing_1","dp","monotonic","fix","mapping_1","mappingForQuery","ruleName","mapping","determineQueryHints","minInterval","intervalFactor","adjustedInterval","adjustInterval","getRangeScopedVars","adjusted","alignRange","performSuggestQuery","cache","metricsNameCache","expire","interval_to_ms","msRange","diff","sRange","regularRange","secondsToHms","__range_ms","titleFormat","textFormat","useValueForTime","json","groups","rules","rule","extractRuleMappingFromGroups","modifyQuery","mapping_2","ruleNames","rulesRegex","getTimeRange","PromCompleter","wrappedCallback","completions","templateVariableCompletions","getCompletionsForLabelMatcherName","getCompletionsForLabelMatcherValue","getCompletionsForBinaryOperator","vectors","findMetricName","labelNameCache","transformToCompletions","labelNames","findToken","labelNameToken","labelValueCache","labelName","getLabelNameAndValueForExpression","labelValues","rparenToken","keywordOperatorToken","findExpressionMatchedParen","binaryOperatorToken","metricName_1","labelQueryCache","words","nameLabelValueToken","getTokens","nameLabelNameToken","metricNameToken","guard","deep","query_ctrl_PrometheusQueryCtrl","PrometheusQueryCtrl","getDefaultFormat","updateLink","refreshMetricData","isEqual","endTime","rangeDiff","linkToPrometheus","PrometheusConfigCtrl","mssql_response_parser","MssqlDatasource","MssqlQueryCtrl","mssql_query_ctrl_defaultQuery","MssqlConfigCtrl","MssqlAnnotationsQueryCtrl","mssql_module_defaultQuery","scenarioId","stringInput","TestDataDatasource","query_ctrl_TestDataQueryCtrl","TestDataQueryCtrl","scenarioList","newPointTime","selectedPoint","getPoints","point","pointSelected","deletePoint","addPoint","newPointValue","scenario","scenarioChanged","TestDataAnnotationsQueryCtrl","ValueTypes","valueTypes","INT64","DOUBLE","MONEY","DISTRIBUTION","metricKinds","CUMULATIVE","DELTA","GAUGE","STRING","VALUE_TYPE_UNSPECIFIED","BOOL","METRIC_KIND_UNSPECIFIED","ns","stackdriver_datasource","projectName","defaultProject","aggregation","crossSeriesReducer","groupBys","view","interpolateGroupBys","gb","interpolatedGroupBys","resolvePanelUnitFromTargets","baseUrl","projects","projectId","getDefaultProject","error_1","getProjects","getMetricTypes","metricsApiPath","error_2","trys","doRequest","metricDescriptors","serviceShortName","displayName","maxRetries","StackdriverDatasource","alignmentPeriod","alignmentPeriods","aggOptions","alignOptions","setAggOptions","setAlignOptions","valueType","metricKind","perSeriesAligner","deselectAggregationOption","formatAlignmentText","selectedAlignment","ap","notValidOptionValue","StackdriverAggregationCtrl","StackdriverAggregation","query_aggregation_ctrl_StackdriverAggregationCtrl","filter_segments_FilterSegments","FilterSegments","getFilterKeysFunc","getFilterValuesFunc","buildSegmentModel","removeSegment","filterSegments","getFilters","hasNoFilterKeys","filterValues","getValuesForFilterKey","addNewFilterSegments","removeFilterSegment","filterSegmentUpdated","defaultDropdownValue","defaultServiceValue","hideGroupBys","StackdriverFilterCtrl","services","getCurrentProject","loadMetricDescriptors","getLabels","initSegments","groupBySegments","getGroupBys","getFilterValues","project","getServicesList","resourceLabels","onServiceChange","getMetricsList","setMetricType","onMetricTypeChange","removeText","removeUsed","loadLabelsPromise","ml","defaultRemoveGroupByValue","groupByChanged","filterKey","shortKey","StackdriverFilter","query_filter_ctrl_StackdriverFilterCtrl","StackdriverQueryCtrl","showAggregationOptions","aliasBy","defaultsDeep","rawQueryString","decodeURIComponent","jsonBody","StackdriverConfigCtrl","validationErrors","jwt","privateKey","private_key","tokenUri","token_uri","validateJwt","resetValidationMessages","client_email","inputDataValid","onUpload","jsonText","onPasteJwt","originalEvent","clipboardData","StackdriverAnnotationsQueryCtrl","TextPanelCtrl","onInitEditMode","onRefresh","onRender","renderMarkdown","updateContent","renderText","$applyAsync","scrollable","injector","eventManager","tmpScope","onEdit","createEditPopover","markerElementToAttachTo","invoke","$digest","constraints","pin","$destroy","DrawableEvent","drawFunc","clearFunc","moveFunc","_object","_clearFunc","_moveFunc","_position","_width","_height","_drawFunc","getObject","drawableEvent","visual","_drawableEvent","_options","getParent","_parent","isHidden","_hidden","unhide","_events","_types","_plot","eventsEnabled","EventMarkers","getEvents","setTypes","setupEvents","ve","VisualEvent","_buildDiv","vre","_buildRegDiv","ao","bo","drawEvents","_insidePlot","updateEvents","_clearEvents","markerShow","lineStyle","eventTypeId","markerTooltip","topOffset","border-left-width","border-left-color","container","marker_1","font-size","line-height","border-left","border-right","border-top","border-bottom","that","hover","createAnnotationToolip","regionWidth","right","border-left-style","background-color","xc","jquery_flot_events_EventMarkers","eventMarkers","hideEvents","getHandleHtml","valueStr","ThresholdManager","initDragging","posTop","handleElem","currentTarget","parents","lastY","dragging","clientY","stopped","graphValue","toFixed","cleanUp","renderHandle","defaultHandleTopPos","valueCanvasPos","handleTopPos","shouldDrawHandles","hasSecondYAxis","prepare","thresholdMargin","needsCleanup","addFlotOptions","gtLimit","ltLimit","lineColor","y2axis","convertToHistogramData","bucketSize","hiddenSeries","getSeriesValues","getBucketBound","maxBound","bound","bound_1","histogamSeries","convertValuesToHistogram","alignYLevel","yAxes","checkCorrectAxes","checkCorrectAxis","yLeft","yRight","moveLevelToZero","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rateLeft","rateRight","checkTwoCross","absLeftMin","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","restoreLevelFromZero","GraphElement","panelWidth","event_manager_EventManager","thresholdManager","threshold_manager_ThresholdManager","getSeriesFn","posX","initial","middle","renderAndShow","absoluteTime","innerHtml","xMode","place_tt","getMultiSeriesPlotHoverInfo","hoverIndex","hoverDistance","pointTime","minDistance","minTime","lastValue","hideEmpty","allIsNull","hideZero","allIsZero","hideTooltip","findHoverIndexFromData","value_type","findHoverIndexFromDataPoints","aliasEscaped","shared","detach","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","panelRelY","pointOffset","scrollTop","innerHeight","sharedCrosshairModeOnly","hasMsResolution","seriesHoverInfo","plotData","highlightClass","$tooltip","sortedSeries","onPanelteardown","onLegendRenderingComplete","onGraphHover","onGraphHoverClear","onPlotSelected","onPlotClick","onScopeDestroy","renderData","buildFlotPairs","graphHeight","sharedTooltipModeEnabled","render_panel","canMakeEditable","shouldAbortRender","drawHook","yaxes","dataWarning","processOffsetHook","gridMargin","panelOptions","processRangeHook","align","alignLevel","getMinTimeStepOfSeries","timeStep","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","callPlot","getFlotPairs","nullPointMode","barWidth","addXSeriesAxis","histMin","histMax","ticks","addXHistogramAxis","addXTableAxis","addTimeAxis","incrementRenderCounter","renderError","bootData","user","lightTheme","gridColor","processOffset","processRange","percentage","translateFillOption","linewidth","steppedLine","spaceLength","pointradius","minBorderMargin","labelMarginX","sortDesc","haveSortBy","haveSortOrder","shouldSortBy","zindex","timeformat","time_format","defaultTicks","tickValues","tickStep_1","ticksNum","configureAxisMode","logBase","parseNumber","decimals","secondY","tickDecimals","applyLogScale","toNumber","MIN_VALUE","logmin","inverseTransform","generateTicksForLogScaleYAxis","minSetToZero","nextTick","maxNumTicks","numTicks","factor","valueFormats","scaledDecimals","secPerTick","graph_GraphElement","graphDirective","src_core","SeriesOverridesCtrl","overrideMenu","currentOverrides","override","addOverrideOption","propertyName","lenght","setOverride","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","fakeSeries","autoClose","onClose","removeOverride","getSeriesNames","getSeriesIndexForElement","el","toggleAxis","changeSeriesColor","toggleSeries","seriesInfo","scrollPosition","legendScrollbar","scroller","sortLegend","getTableHeaderHtml","renderLegendElement","tableHeaderElem","seriesElements","hideFromLegend","avg","renderSeriesLegendElements","alignAsTable","tbodyElem","wrap","rightSide","legendRightDefaultWidth","scrollRoot","scrollbarParams","root","bar","track","barOnCls","scrollingCls","destroyScrollbar","core_default","marginRight","offsetWidth","clientWidth","scroll","addScrollbar","dispose","legendElem","empty","sideWidth","ieWidth","ThresholdFormCtrl","disabled","unbindDestroy","addThreshold","removeThreshold","onFillColorChange","onLineColorChange","DataProcessor","getSeriesList","firstItem","autoDetectMode","getAutoDetectXAxisMode","setPanelDefaultsForNewXAxisMode","timeSeriesHandler","customHandler","seriesData","colorIndex","aliasColors","isOutsideRange","validateXAxisSeriesValue","validOptions","getXAxisValueOptions","getDataFieldNames","onlyNumbers","fieldParts","getPropertiesRecursive","pluckDeep","property","propertyParts","axes_editor_AxesEditorCtrl","AxesEditorCtrl","unitFormats","getUnitFormats","logScales","linear","log (base 2)","log (base 10)","log (base 32)","setUnitFormat","xAxisModeChanged","processor","xAxisValueChanged","GraphCtrl","panelDefaults","seriesOverrides","data_processor_DataProcessor","onDataSnapshotLoad","onInitPanelActions","axesEditorComponent","alertingEnabled","alertTab","actions","annotationsPromise","zoomOut","tip","applySeriesOverrides","shiftKey","toggleSeriesExclusiveMode","removeSeriesOverride","toggleLegend","legendValuesOptionChanged","exportCsv","templateHtml","modalClass","DashListCtrl","recent","starred","headings","folderId","modes","getRecentDashboards","getStarred","getSearch","folderIds","starDashboard","isStarred","dashIds","take","impression_srv","getDashboardOpened","dashboardIds","orderId","onFolderChange","folder","PluginListCtrl","pluginList","viewModel","gotoPlugin","stopPropagation","$event","preventDefault","embedded","hasUpdate","sortOrderOptions","stateFilter","currentAlerts","onlyAlertsOnDashboard","dashboardFilter","nameFilter","AlertListPanel","sortResult","alerts","alertStateSortScore","updateStateFilter","getAlertsPromise","getCurrentAlertState","getStateChanges","al","noAlertsMessage","dashboardQuery","dashboardTags","dashboardTag","newStateDate","locale","colorScheme","maxValue","minValue","invert","colorInterpolator","domain","d3","colorScale","legendOpacityScale","exponent","drawLegendValues","rangeFrom","rangeTo","childNodes","legendValueScale","tickStepSize","isValueCloseTo","buildLegendTicks","xAxis","tickSize","LEGEND_TICK_SIZE","colorRect","posY","svgElem","baseVal","getSvgElemHeight","LEGEND_VALUE_MARGIN","getSvgElemX","clearLegend","valueTo","outerWidth","getColorScale","colorSchemes","legendHeight","valuesNumber","rangeStep","legendRects","selectAll","valuesRange","enter","drawSimpleColorLegend","colorOptions","legendOpacityScale_1","cardColor","drawSimpleOpacityLegend","cards","cardStats","widthFactor","drawColorLegend","getOpacityScale","opacityScale","drawOpacityLegend","log (base 1024)","dataFormats","Time series","Time series buckets","yBucketBoundModes","Auto","Upper","Lower","yAxis","axesEditor","heatmap_axes_editor_AxesEditorCtrl","HeatmapDisplayEditorCtrl","heatmapDisplayEditor","label2","label1","heatmap_data_converter_parseHistogramLabel","yBucket","yBounds","bounds","card","convertToHeatMap","yBucketSize","xBucketSize","heatmap","bucketBound","heatmap_data_converter_getBucketBound","TIME_INDEX","bucketNum","VALUE_INDEX","pointExt","pushToXBuckets","seriesList_1","xBucket","yBucketSplitFactor","getLogScaleBucketBounds","convertToLogScaleValueBuckets","getBucketBounds","pushToYBuckets","convertToValueBuckets","getValueBucketBound","getLogScaleBucketBound","logp","valueLog","additionalLog","additionalBucketSize","powTop","HeatmapTooltip","mouseOverBucket","originalFillColor","onMouseLeave","getBucketIndexes","xBucketIndex","yBucketIndex","boundBottom","boundTop","countValueFormatter","bucketBoundFormatter","xData","yData","bucketIndex","tooltipDecimals","tickValueFormatter","tooltipHtml","tsBuckets","tickFormatter","valIndex","tsBucketsFormatted","showHistogram","addHistogram","getXBucketIndex","getYBucketIndex","heatmapPanel","xScale","chartHeight","histogramData","histXScale","yScale","barNumberFactor","histogramDomain","histYScale","tooltipWidth","tooltipHeight","clientHeight","innerWidth","pageYOffset","DATA_RANGE_WIDING_FACTOR","HeatmapRenderer","$heatmap","heatmap_tooltip_HeatmapTooltip","padding","dataRangeWidingFactor","drawSharedCrosshair","setElementHeight","getYAxisWidth","axisText","getBBox","getXAxisHeight","axisLinePosition","addXAxis","chartWidth","timeFormat","grafanaTimeFormatter","tickFormat","tickPadding","yAxisWidth","addYAxis","tickInterval","heatmapStats","wideYAxisRange","yMin","yMax","decimalsAuto","flotTickSize","tickSizeInner","tickSizeOuter","yWiding","addLogYAxis","adjustLogRange","minLog","adjustLogMin","adjustLogMax","logScaleTickValues","addYAxisFromBuckets","valueFormatted","domainMin","domainMax","tickValue","fixYAxisTickSize","addAxes","chartTop","chartBottom","dataFormat","xAxisHeight","addHeatmapCanvas","heatmapElem","cardPadding","cardRound","addHeatmap","yBuckets","emptyBucket","nullBucket","minBucket","newBucket","mergeZeroBuckets","cardsData","maxValueAuto","setCardSize","getCardX","getCardWidth","getCardY","getCardHeight","getCardColor","getCardOpacity","highlightCard","resetCardHighLight","highlightColor","darker","strokeColor","brighter","xGridSize","yGridSize","splitFactor","cardWidth","cardHeight","cuttedWidth","getEventOffset","clientX","elemOffset","selectionRange","limitSelection","drawSelection","getEventPos","drawCrosshair","emitGraphHoverEvent","posX1","posX2","selectionX","selectionWidth","graphTooltip","yBucketBound","HeatmapCtrl","opacityScales","colorModes","selectionActivated","onCardColorChange","convertHistogramToHeatmapData","convertTimeSeriesToHeatmapData","bucketsData","xBucketNumber","xBucketSizeByNumber","interval_regex","parseSeries","yBucketNumber","convertToCards","getPanelDataSourceType","dsSupportHistogramSort","panelDatasource","heatmap_data_converter_sortSeriesByLabel","histogramToHeatmap","getDistance","calculateBucketSize","seriesHandler","flotpairs","parseHistogramSeries","rendering_HeatmapRenderer","timeKey","cells","noTableIndex","fromCharCode","columnsUnion","columnNames","columnIndexMapper","flattenedRows","mapper","alteredRow","mergedRows","compactedRows","rowIndex","otherRow","areRowsMatching","matchedRow","columnIndex","foundFieldToMatch","maxDocs","flattened","z","tableCol","TablePanelEditorCtrl","transformers","fontSizes","addColumnSegment","updateTransformHints","canSetColumns","columnsHelpMessage","getColumnOptions","dataRaw","getColumns","transformChanged","removeColumn","tablePanelEditor","editor_TablePanelEditorCtrl","ColumnOptionsCtrl","activeStyleIndex","columnTypes","dateFormats","mappingTypes","getColumnNames","addColumnStyle","styles","stylesCount","indexToInsert","removeColumnStyle","invertColorOrder","ref","styleIndex","addValueMap","valueMaps","removeValueMap","addRangeMap","rangeMaps","removeRangeMap","column_options_ColumnOptionsCtrl","isUtc","setTable","initColumns","colIndex","formatters","createColumnFormatter","getColorForValue","defaultCellFormatter","dateFormat","mappingType","setColorState","valueFormatter_1","numericValue","renderRowVariables","formatColumnValue","renderCell","addWidthHack","cellClasses","cellClass","colorState","columnHtml","preserveFormat","linkUrl","linkTooltip","linkTargetBlank","cellLink","cellTarget","cellLinkTooltip","pageSize","startPos","endPos","rowClasses","rowClass","rowStyle","cellHtml","render_values","newRow","TableRenderer","TablePanelCtrl","showHeader","fontSize","desc","pageIndex","columnOptionsTab","transformer","transformDataToTable","renderer_TableRenderer","isTimezoneUtc","toggleColumnSort","tableData","pageCount","renderPanel","panelElem","rootElem","footerElem","endPage","startPage","paginationList","activeClass","pageLinkElem","max-height","panelHeight","getTableHeight","filterData","LinkSrv","includeVars","addParamsToUrl","paramsArray","instance","appendToQueryString","stringToAppend","getAnchorInfo","href","getLinkUrl","getPanelLinkAnchorInfo","targetBlank","dashUri","slugifyForUrl","keepTime","link_srv_LinkSrv","module_SingleStatCtrl","SingleStatCtrl","linkSrv","dataType","valueNameOptions","postfix","nullText","valueName","prefixFontSize","postfixFontSize","colorBackground","colorValue","sparkline","full","thresholdMarkers","thresholdLabels","tableColumn","onSparklineColorChange","onSparklineFillChange","tableHandler","setTableValues","setValues","setTableColumnToSensibleDefault","valueRounded","decimalInfo","getDecimalsForValue","formatFunc","roundValue","setValueMapping","canModifyText","setColoring","panelColorIndex","delta","LN10","magn","dec","lastPoint","rangeMap","valueString","className","addGauge","dimension","invalidGaugeRange","plotCanvas","plotCss","colorMap","fontScale","gaugeWidthReduceRatio","gaugeWidth","thresholdMarkersWidth","getValueText","plotSeries","addSparkline","dynamicHeightMargin","strVale","applyColoringThresholds","getSpan","colorPostfix","getBigValueHtml","$panelContainer","drilldownTooltip","mouseleave","linkInfo","location","hookupDrilldownLinkTooltip","GettingStartedPanelCtrl","stepIndex","note","check","cta","passed","currentStep","nextStep","dismiss","showSuccessAlert","helpFlags1","built_in_plugins","module_namespaceObject","app/plugins/datasource/cloudwatch/module","cloudwatch_module_namespaceObject","elasticsearch_module_namespaceObject","opentsdb_module_namespaceObject","grafana_module_namespaceObject","influxdb_module_namespaceObject","logging_module_namespaceObject","mixed_module_namespaceObject","app/plugins/datasource/mysql/module","mysql_module_namespaceObject","app/plugins/datasource/postgres/module","postgres_module_namespaceObject","app/plugins/datasource/mssql/module","mssql_module_namespaceObject","prometheus_module_namespaceObject","app/plugins/datasource/testdata/module","testdata_module_namespaceObject","app/plugins/datasource/stackdriver/module","stackdriver_module_namespaceObject","app/plugins/panel/text/module","text_module_namespaceObject","app/plugins/panel/graph/module","graph_module_namespaceObject","app/plugins/panel/dashlist/module","dashlist_module_namespaceObject","app/plugins/panel/pluginlist/module","pluginlist_module_namespaceObject","app/plugins/panel/alertlist/module","alertlist_module_namespaceObject","app/plugins/panel/heatmap/module","heatmap_module_namespaceObject","app/plugins/panel/table/module","table_module_namespaceObject","app/plugins/panel/singlestat/module","singlestat_module_namespaceObject","app/plugins/panel/gettingstarted/module","Observable","Subject","bust","exposeToPlugin","component","registerDynamic","registry","system_default","newModule","locate","load","address","baseURL","defaultExtension","/*","esModule","authorization","loader","slate_react_es","react_default","react_dom_default","sdk_namespaceObject","file_export_namespaceObject","flatten_namespaceObject","plugin_loader_i","flotDeps_1","fakeDep","importPluginModule","light","dark","DatasourceSrv","deferred","pluginDef","dsConfig","Datasource","getAll","addDataSourceVariables","getExploreSources","es","metricSources","metricSource","datasource_srv_DatasourceSrv","UnknownPanelCtrl","$http","$templateCache","class","module_UnknownPanelCtrl","panelInfo","panelModule","panelCtrlPromise","componentInfo","Component","registered","templatePromise","relativeTemplateUrlToAbs","cached","getTemplate","registerPluginComponent","notFound","directiveName","$normalize","bindings","getPluginComponentDirective","core_module","child","dsModule","panel-ctrl","QueryCtrl","ConfigCtrl","dsMeta_1","model_1","appModule","appEditCtrl","app-model","app-edit-ctrl","appModel_1","loadPanelComponentInfo","getModule","pluginDirectiveLoader","dashboard_ctrl_DashboardCtrl","DashboardCtrl","keybindingSrv","alertingSrv","unsavedChangesSrv","dashboardViewStateSrv","playlistSrv","panelLoader","getPanelContainer","setupDashboard","setupDashboardInternal","onInitFailed","setCurrent","processRepeats","autoFitPanels","dashboardViewState","setupDashboardBindings","msg","fatal","loadedFallbackDashboard","templateVariableUpdated","setWindowTitleAndTheme","windowTitlePrefix","showJsonEditor","getDashboard","getPanelLoader","timezoneChanged","onRemovingPanel","getPanelInfoById","ask","confirmText","AlertingSrv","HistorySrv","getHistoryList","calculateDiff","restoreDashboard","history_srv_HistorySrv","HistoryListCtrl","$route","historySrv","appending","canCompare","onDashboardSaved","resetFromSource","switchMode","addToLog","getLog","revisionSelectionChanged","revisions","checked","formatBasicDate","getDiff","newInfo","baseInfo","isNewLatest","new","diffType","revisions_1","rev","createdDateString","created","ageString","isLastPage","basic","restoreConfirm","location_util","stripBaseFromUrl","reload","history_HistoryListCtrl","DashboardLoaderSrv","_dashboardLoadFailed","canStar","isSnapshot","canDelete","canSave","dashboardNotFound","loadDashboard","uid","_loadScriptedDashboard","getDashboardByUid","isFolder","addDashboardImpression","file","_executeScript","fromScript","scriptResult","Function","scriptFunc","isFunction","deferred_1","dashboard_loader_srv_DashboardLoaderSrv","DashNavCtrl","saveDashboard","titleTooltip","calendar","expires","editview","toggleViewMode","shareDashboard","tabIndex","showSearch","addPanel","animate","navItemClicked","navItem","clickHandler","dashnav_DashNavCtrl","bindToController","SubmenuCtrl","annotationStateChanged","openEditView","submenu_SubmenuCtrl","SaveDashboardAsModalCtrl","isValidFolderSelection","editable","hideControls","autoUpdate","keyDown","keyCode","onEnterFolderCreation","onExitFolderCreation","save_as_modal_template","controllerAs","SaveDashboardModalCtrl","saveVariables","saveTimerange","originalCurrent","timeChange","variableValueChange","isSaving","hasTimeChanged","hasVariableValuesChanged","saveForm","getSaveModelClone","postSave","resetOriginalVariables","resetOriginalTime","save_modal_template","SaveProvisionedDashboardModalCtrl","dashboardJson","blob","Blob","getJsonForClipboard","includeTemplateVars","modeSharePanel","tabs","modalTitle","buildUrl","absUrl","orgId","forCurrent","theme","shareUrl","soloUrl","iframeHtml","imageUrl","getLocalTimeZone","utcOffset","Intl","DateTimeFormat","resolvedOptions","timeZone","save_provisioned_modal_template","save_provisioned_modal_SaveProvisionedDashboardModalCtrl","ShareModalCtrl","expireOptions","accessOptions","externalUrl","sharingButtonText","externalEnabled","createSnapshot","external","originalUrl","saveSnapshot","timeoutSeconds","scrubDashboard","cmdData","postUrl","deleteUrl","snapshotUrl","saveExternalSnapshotRef","deleteKey","singlePanel","forEachPanel","deleteSnapshot","ShareSnapshotCtrl","share_snapshot_ctrl_ShareSnapshotCtrl","dashboard_model","DashboardSrv","handleSaveDashboardError","isHandled","altActionText","onAltAction","showSaveAsModal","newUrl","provisioned","showDashboardProvisionedModal","makeEditable","showSaveModal","saveJSONDashboard","dashboard_srv_DashboardSrv","urlState","getQueryStringState","needsSync","registerPanel","serializeToUrl","fromRouteUpdated","toggle","editStateChanged","toggleCollapsedPanelRow","syncState","collapsed","toggleRow","panelScopes","panelScope","getPanelScope","fullscreenPanel","leaveFullscreen","enterFullscreen","setViewMode","oldTimeRange","DashboardViewState","view_state_srv_DashboardViewState","ValidationSrv","rootName","validateNewDashboardName","validateNewFolderName","existingErrorMessage","nameLowerCased","hitTypes","hits_1","TimeSrv","timer","routeUpdated","addEventListener","autoRefreshBlocked","visibilityState","refreshDashboard","cancelAll","initTimeFromUrl","parseTime","timeAtLoad","setAutoRefresh","parseUrlParam","urlRange","timeRangeForUrl","timeHasChangedSinceLoad","cancelNextRefresh","intervalMs_1","refreshTimer","startNextRefreshTimer","afterMs","isGrafanaVisible","cancel","fromRouteUpdate","isMoment","oldRefresh","urlParams","timespan","center","time_srv_TimeSrv","ChangeTracker","originalCopyDelay","$window","originalPath","original","onbeforeunload","ignoreChanges","hasChanges","open_modal","fromFile","cleanDashboardFromIgnoredChanges","dashData","expandRows","schemaVersion","iteration","repeatPanelId","nav","originalTimepicker","discardChanges","gotoNext","baseLen","nextUrl","tracker","change_tracker_ChangeTracker","UnsavedChangesModalCtrl","discard","unsaved_changes_modal_template","TimePickerCtrl","openDropdown","timepicker","firstDayOfWeek","localeData","timeRaw","local","rangeString","absolute","fromJs","toDate","toJs","isAbsolute","zoom","isOpen","closeDropdown","refresh_intervals","applyCustom","editTimeRaw","absoluteFromChanged","getAbsoluteMomentForTimezone","absoluteToChanged","jsDate","setRelativeFilter","nowDelay","timepicker_TimePickerCtrl","$elem","ngModel","$parsers","$setValidity","parsed","$formatters","currentValue","alertSrv","upload_template","isDefined","btnText","wnd","File","FileReader","FileList","files","reader","onload","readAsText","uploadDashboardDirective","makeExportable","variableLookup","refName","requires","processPanel","templateizeDatasourceUsage","panelDef","_h","_j","annotationDef","buildInfo","newObj","DashboardExporter","exporter","exporter_DashboardExporter","saveJson","export_modal_DashExportCtrl","asRows","export","exportSeriesListToCsvColumns","ExportDataModalCtrl","export_data_modal_ExportDataModalCtrl","AdHocFiltersCtrl","segmentChanged","updateVariableModel","filterIndex","hasFakes","ad_hoc_filters_template","ad_hoc_filters_AdHocFiltersCtrl","optionChanged","repeat","repeatDirection","react_grid_layout","classnames_default","classnames","DashboardRow_DashboardRow","DashboardRow","panelContainer","openSettings","setState","prevState","removeRow","dashboard-row","fa","fa-chevron-down","chevronClass","components_ScrollBar_ScrollBar","ScrollBar","handleRef","componentDidMount","scrollbar","parentElement","componentDidUpdate","componentWillUnmount","setScrollTop","setScrollLeft","scrollLeft","dist_main","AddPanelPanel","onAddPanel","panelPluginInfo","handleCloseAddPanel","renderPanelItem","panelSizeChanged","panelPlugins","getPanelPlugins","copiedPanelPlugins","getCopiedPanelPlugins","small","copiedPanels","copiedPanelJson","copiedPanel","pluginCopy","filterPanels","searchWords","main_default","highlightClassName","textToHighlight","noCopiedPanelPlugins","filterChange","openCopy","openAdd","panelTab","active active--panel","","copyClass","autoFocus","onKeyPress","filterKeyPress","DashboardPanel","attachedPanel","AddPanelPanel_AddPanelPanel","lastGridWidth","SizedReactLayoutGrid","react_sizeme","react_sizeme_default","monitorWidth","onWidthChange","react_grid_layout_default","isDraggable","isResizable","measureBeforeMount","containerPadding","useCSSTransforms","cols","rowHeight","draggableHandle","onResize","onResizeStop","onDragStop","onLayoutChange","DashboardGrid_DashboardGrid","DashboardGrid","animated","triggerForceUpdate","buildLayout","panelMap","stringId","panelPos","newLayout","newLayout_1","newPos","updateGridPos","resizeDone","oldItem","newItem","renderPanels","panelClasses","panel--fullscreen","panelElements","DashboardPanel_DashboardPanel","watchDepth","wrapApply","PanelLoader","compiledElem","PanelLoader_PanelLoader","RowOptionsCtrl","onUpdated","FolderPickerCtrl","validationSrv","labelClass","loadInitialValue","permission","enableCreateNew","enableReset","initialTitle","createNewFolder","enterFolderCreation","$folder","newFolderNameChanged","newFolderNameTouched","newFolderName","hasValidationError","validationError","createFolder","closeCreateFolder","exitFolderCreation","resetFolder","rootFolder","initialFolderId","folder_picker_FolderPickerCtrl","onCreateFolder","moveDashboards","successCount","totalCount","alreadyInFolderCount","afterSave","move_to_folder_MoveToFolderCtrl","SettingsCtrl","canSaveAs","hasEditPermissionInFolders","buildSectionList","onRouteUpdated","onPostSave","sections","canAdmin","section","sectionParams","viewId","openSaveAsModal","saveDashboardJson","hideSettings","currentSection","deleteDashboard","sumBy","deleteDashboardConfirmed","folderTitle","hasUnsavedFolderChange","getFolder","folderUrl","settings_SettingsCtrl","transclude","module_PanelLinksEditorCtrl","PanelLinksEditorCtrl","addLink","queryStr","uri","cloud","editor_DashLinkEditorCtrl","DashLinkEditorCtrl","iconMap","backToList","editLink","saveLink","moveLink","deleteLink","dashLink","asDropdown","anchor","anchorSanitized","$last","DashLinksContainerCtrl","currentDashId","buildLinks","linkDef","searchDashboards","updateDashLinks","generatedLinks","searchHits","module_DashLinksContainerCtrl","permissions_DashboardPermissions","WrappedComponent","ConnectedWrappedComponent","react_redux_es","isAdding","onRemoveItem","removeDashboardPermission","onPermissionChanged","updateDashboardPermission","onAddPermission","addDashboardPermission","DashboardPermissions","permissions","Tooltip","placement","PermissionsInfo","onOpenAddPermissions","SlideDown","in","AddPermission","onCancel","onCancelAddPermission","PermissionList","isFetching","folderInfo","activeChildId","getFolderByUid","dashTab","FolderPageLoader","FolderDashboardsCtrl","DashboardImportCtrl","nameExists","uidExists","autoGenerateUid","autoGenerateUidValue","initialFolderTitle","gnetId","gnetUrl","checkGnetDashboard","__inputs","inputModel","setDatasourceOptions","inputsValid","titleChanged","uidChanged","titleTouched","hasNameValidationError","nameValidationError","hasUidValidationError","inputValueChanged","dashUrl","importedUrl","loadJsonText","parseError","gnetError","gnetInfo","back","create_folder_ctrl_CreateFolderCtrl","CreateFolderCtrl","react2angular","folder_dashboards_ctrl_FolderDashboardsCtrl","dashboard_import_ctrl_DashboardImportCtrl","PlaylistsCtrl","playlists","startUrl","removePlaylistConfirmed","playlist","removePlaylist","playlists_ctrl_PlaylistsCtrl","PlaylistSearchCtrl","tagsMode","prom","dashboardResult","tagResult","searchStarted","showStarred","queryHasNoFilters","filterByTag","PlaylistSrv","cancelPromise","filteredParams","pickBy","utils_url","playlistId","stop","isPlaying","kiosk","exit","playlist_srv_PlaylistSrv","PlaylistEditCtrl","filteredDashboards","filteredTags","searchQuery","playlistItems","dashboardresult","tagresult","filterFoundPlaylistItems","playlistItem","listPlaylistItem","term","addPlaylistItem","addTagPlaylistItem","removePlaylistItem","listedPlaylistItem","savePlaylist","isPlaylistEmpty","movePlaylistItem","newPosition","currentPosition","movePlaylistItemUp","movePlaylistItemDown","$routeProvider","playlist_edit_ctrl_PlaylistEditCtrl","grafanaRoutes","listItemClass","renderMenuItem","panel_header_template","menuScope","isDragged","menuElem","togglePanelStackPosition","parentsUntil","targetClass","menuHtml","createMenuTemplate","dropdown","togglePanelMenu","panelHeader","$document","infoDrop","panelScrollbar","lastAlertState","hasAlertRule","cornerInfoElem","transparentLastState","lastHasAlertRule","panelHeightUpdated","panelContent","updatePanelCornerInfo","cornerMode","hoverOpenDelay","transparent","__proto__","constructor","$watchGroup","$watchCollection","setPanelFocus","SoloPanelCtrl","dashboardLoaderSrv","sidemenu","initPanelScope","initDashboard","getDashboardBySlug","panelEditorTab","dynamicDirectiveSrv","fn","solo_panel_ctrl_SoloPanelCtrl","QueryRowCtrl","queryCtrl","toggleCollapse","toggleHideQuery","canCollapse","__collapsedQueryCache","collapsedText","duplicateQuery","query_editor_row_QueryRowCtrl","hasTextEditMode","query_troubleshooter_template","query_troubleshooter_QueryTroubleshooterCtrl","onRequestErrorEventListener","onRequestError","onRequestResponseEventListener","onRequestResponse","removeEventsListeners","stateChanged","toggleMocking","isMocking","hasError","isLoading","QueryTroubleshooterCtrl","getClipboardText","jsonExplorer","handleMocking","mockedData","mockedResponse","transformResponse","paramSerializer","retry","timeout","renderJsonExplorer","toggleExpand","allNodesExpanded","openAtDepth","jsonElem","animateOpen","externalUserMngLinkUrl","externalUserMngLinkName","canInvite","disableLoginForm","externalUserMngInfo","linkTarget","users","unfiltered","pendingInvites","OrgUsersCtrl","onQueryUpdated","email","updateOrgUser","userId","removeUser","removeUserConfirmed","copyInviteToClipboard","getInviteUrl","invite","org_users_ctrl_OrgUsersCtrl","profile_ctrl_ProfileCtrl","teams","orgs","showTeamsList","showOrgsList","readonlyLoginFields","getUser","getUserTeams","getUserOrgs","ProfileCtrl","setUsingOrg","org","userForm","oldTheme","select_org_ctrl_SelectOrgCtrl","SelectOrgCtrl","change_password_ctrl_ChangePasswordCtrl","ChangePasswordCtrl","command","authProxyEnabled","ldapEnabled","changePassword","newPassword","confirmNew","NewOrgCtrl","newOrg","createOrg","new_org_ctrl_NewOrgCtrl","UserInviteCtrl","sendEmail","inviteForm","CreateTeamCtrl","teamId","OrgDetailsCtrl","getOrgInfo","orgName","orgForm","addressForm","PrefsControlCtrl","prefs","updatePrefs","prefsForm","homeDashboardId","cmd","prefs_control_PrefsControlCtrl","prefs_control_template","admin_AdminListUsersCtrl","AdminListUsersCtrl","showPaging","getUsers","perPage","totalPages","pages","navigateToPage","deleteUser","admin_AdminEditUserCtrl","AdminEditUserCtrl","user_id","isGrafanaAdmin","setPassword","passwordForm","updatePermissions","orgUser","removeOrgUser","orgsSearchCache","searchOrgs","addOrgUser","addOrgForm","orgInfo","admin_AdminListOrgsCtrl","AdminListOrgsCtrl","getOrgs","deleteOrg","admin_AdminEditOrgCtrl","AdminEditOrgCtrl","getOrg","getOrgUsers","orgUsers","orgDetailsForm","admin_StyleGuideCtrl","StyleGuideCtrl","buttonNames","buttonSizes","buttonVariants","switchTheme","AdminSettingsCtrl","AdminHomeCtrl","NotificationsEditCtrl_AlertNotificationEditCtrl","AlertNotificationEditCtrl","testSeverity","sendReminder","autoResolve","uploadImage","getFrequencySuggestion","notifiers","getNotifierTemplateId","notifier","optionsTemplate","notifierTemplateId"],"mappings":"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","file":"5.09796ed34e70bee7294e.js","sourcesContent":["/* Flot plugin for selecting regions of a plot.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\nselection: {\n\tmode: null or \"x\" or \"y\" or \"xy\",\n\tcolor: color,\n\tshape: \"round\" or \"miter\" or \"bevel\",\n\tminSize: number of pixels\n}\n\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\nspecified. \"color\" is color of the selection (if you need to change the color\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\nis the shape of the corners of the selection.\n\n\"minSize\" is the minimum size a selection can be in pixels. This value can\nbe customized to determine the smallest size a selection can be and still\nhave the selection rectangle be displayed. When customizing this value, the\nfact that it refers to pixels, not axis units must be taken into account.\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\"plotunselected\" events from being fired when the user clicks the mouse without\ndragging.\n\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\nthe DOM element you passed into the plot function. The event handler gets a\nparameter with the ranges selected on the axes, like this:\n\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t// x2axis, x3axis, ...\n\t});\n\nThe \"plotselected\" event is only fired when the user has finished making the\nselection. A \"plotselecting\" event is fired during the process with the same\nparameters as the \"plotselected\" event, in case you want to know what's\nhappening while it's happening,\n\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\ndestroy this behavior.\n\nThe plugin allso adds the following methods to the plot object:\n\n- setSelection( ranges, preventEvent )\n\n  Set the selection rectangle. The passed in ranges is on the same form as\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n  this:\n\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\n  setSelection will trigger the \"plotselected\" event when called. If you don't\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n  true as the second parameter. If you are using multiple axes, you can\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n  xaxis, the plugin picks the first one it sees.\n\n- clearSelection( preventEvent )\n\n  Clear the selection rectangle. Pass in true to avoid getting a\n  \"plotunselected\" event.\n\n- getSelection()\n\n  Returns the current selection in the same format as the \"plotselected\"\n  event. If there's currently no selection, the function returns null.\n\n*/\n\n(function ($) {\n    function init(plot) {\n        var selection = {\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n                show: false,\n                active: false\n            };\n\n        // FIXME: The drag handling implemented here should be\n        // abstracted out, there's some similar code from a library in\n        // the navigation plugin, this should be massaged a bit to fit\n        // the Flot cases here better and reused. Doing this would\n        // make this plugin much slimmer.\n        var savedhandlers = {};\n\n        var mouseUpHandler = null;\n\n        function onMouseMove(e) {\n            if (selection.active) {\n                updateSelection(e);\n\n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n            }\n        }\n\n        function onMouseDown(e) {\n            if (e.which != 1)  // only accept left-click\n                return;\n\n            // cancel out any text selections\n            document.body.focus();\n\n            // prevent text selection and drag in old-school browsers\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n                savedhandlers.onselectstart = document.onselectstart;\n                document.onselectstart = function () { return false; };\n            }\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n                savedhandlers.ondrag = document.ondrag;\n                document.ondrag = function () { return false; };\n            }\n\n            setSelectionPos(selection.first, e);\n\n            selection.active = true;\n\n            // this is a bit silly, but we have to use a closure to be\n            // able to whack the same handler again\n            mouseUpHandler = function (e) { onMouseUp(e); };\n\n            $(document).one(\"mouseup\", mouseUpHandler);\n        }\n\n        function onMouseUp(e) {\n            mouseUpHandler = null;\n\n            // revert drag stuff for old-school browsers\n            if (document.onselectstart !== undefined)\n                document.onselectstart = savedhandlers.onselectstart;\n            if (document.ondrag !== undefined)\n                document.ondrag = savedhandlers.ondrag;\n\n            // no more dragging\n            selection.active = false;\n            updateSelection(e);\n\n            if (selectionIsSane())\n                triggerSelectedEvent(e);\n            else {\n                // this counts as a clear\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n            }\n\n            setTimeout(function() {\n              plot.isSelecting = false;\n            }, 10);\n\n            return false;\n        }\n\n        function getSelection() {\n            if (!selectionIsSane())\n                return null;\n\n            if (!selection.show) return null;\n\n            var r = {}, c1 = selection.first, c2 = selection.second;\n            var axes = plot.getAxes();\n            // look if no axis is used\n            var noAxisInUse = true;\n            $.each(axes, function (name, axis) {\n              if (axis.used) {\n                anyUsed = false;\n              }\n            })\n\n            $.each(axes, function (name, axis) {\n                if (axis.used || noAxisInUse) {\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]);\n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n                }\n            });\n            return r;\n        }\n\n        function triggerSelectedEvent(event) {\n            var r = getSelection();\n\n            // Add ctrlKey and metaKey to event\n            r.ctrlKey = event.ctrlKey;\n            r.metaKey = event.metaKey;\n\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\n            // backwards-compat stuff, to be removed in future\n            if (r.xaxis && r.yaxis)\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n        }\n\n        function clamp(min, value, max) {\n            return value < min ? min: (value > max ? max: value);\n        }\n\n        function setSelectionPos(pos, e) {\n            var o = plot.getOptions();\n            var offset = plot.getPlaceholder().offset();\n            var plotOffset = plot.getPlotOffset();\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\n            if (o.selection.mode == \"y\")\n                pos.x = pos == selection.first ? 0 : plot.width();\n\n            if (o.selection.mode == \"x\")\n                pos.y = pos == selection.first ? 0 : plot.height();\n        }\n\n        function updateSelection(pos) {\n            if (pos.pageX == null)\n                return;\n\n            setSelectionPos(selection.second, pos);\n            if (selectionIsSane()) {\n                plot.isSelecting = true;\n                selection.show = true;\n                plot.triggerRedrawOverlay();\n            }\n            else\n                clearSelection(true);\n        }\n\n        function clearSelection(preventEvent) {\n            if (selection.show) {\n                selection.show = false;\n                plot.triggerRedrawOverlay();\n                if (!preventEvent)\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n            }\n        }\n\n        // function taken from markings support in Flot\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = plot.getAxes();\n\n            for (var k in axes) {\n                axis = axes[k];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function setSelection(ranges, preventEvent) {\n            var axis, range, o = plot.getOptions();\n\n            if (o.selection.mode == \"y\") {\n                selection.first.x = 0;\n                selection.second.x = plot.width();\n            }\n            else {\n                range = extractRange(ranges, \"x\");\n\n                selection.first.x = range.axis.p2c(range.from);\n                selection.second.x = range.axis.p2c(range.to);\n            }\n\n            if (o.selection.mode == \"x\") {\n                selection.first.y = 0;\n                selection.second.y = plot.height();\n            }\n            else {\n                range = extractRange(ranges, \"y\");\n\n                selection.first.y = range.axis.p2c(range.from);\n                selection.second.y = range.axis.p2c(range.to);\n            }\n\n            selection.show = true;\n            plot.triggerRedrawOverlay();\n            if (!preventEvent && selectionIsSane())\n                triggerSelectedEvent();\n        }\n\n        function selectionIsSane() {\n            var minSize = plot.getOptions().selection.minSize;\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\n        }\n\n        plot.clearSelection = clearSelection;\n        plot.setSelection = setSelection;\n        plot.getSelection = getSelection;\n\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.selection.mode != null) {\n                eventHolder.mousemove(onMouseMove);\n                eventHolder.mousedown(onMouseDown);\n            }\n        });\n\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            // draw selection\n            if (selection.show && selectionIsSane()) {\n                var plotOffset = plot.getPlotOffset();\n                var o = plot.getOptions();\n\n                ctx.save();\n                ctx.translate(plotOffset.left, plotOffset.top);\n\n                var c = $.color.parse(o.selection.color);\n\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\n                ctx.lineWidth = 1;\n                ctx.lineJoin = o.selection.shape;\n                ctx.fillStyle = c.scale('a', 0.4).toString();\n\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\n                ctx.fillRect(x, y, w, h);\n                ctx.strokeRect(x, y, w, h);\n\n                ctx.restore();\n            }\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mousedown\", onMouseDown);\n\n            if (mouseUpHandler)\n                $(document).unbind(\"mouseup\", mouseUpHandler);\n        });\n\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: {\n            selection: {\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n                color: \"#e8cfac\",\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n                minSize: 5 // minimum number of pixels\n            }\n        },\n        name: 'selection',\n        version: '1.1'\n    });\n})(jQuery);\n","/* Flot plugin for stacking data sets rather than overlyaing them.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes the data is sorted on x (or y if stacking horizontally).\nFor line charts, it is assumed that if a line has an undefined gap (from a\nnull point), then the line above it should have the same gap - insert zeros\ninstead of \"null\" if you want another behaviour. This also holds for the start\nand end of the chart. Note that stacking a mix of positive and negative values\nin most instances doesn't make sense (so it looks weird).\n\nTwo or more series are stacked when their \"stack\" attribute is set to the same\nkey (which can be any number or string or just \"true\"). To specify the default\nstack, you can set the stack option like this:\n\n    series: {\n        stack: null/false, true, or a key (number/string)\n    }\n\nYou can also specify it for a single series, like this:\n\n    $.plot( $(\"#placeholder\"), [{\n        data: [ ... ],\n        stack: true\n    }])\n\nThe stacking order is determined by the order of the data series in the array\n(later series end up on top of the previous).\n\nInternally, the plugin modifies the datapoints in each series, adding an\noffset to the y value. For line series, extra data points are inserted through\ninterpolation. If there's a second y value, it's also adjusted (e.g for bar\ncharts or filled areas).\n\n*/\n\n(function ($) {\n    var options = {\n        series: { stack: null } // or number/string\n    };\n\n    function init(plot) {\n        function findMatchingSeries(s, allseries) {\n            var res = null;\n            for (var i = 0; i < allseries.length; ++i) {\n                if (s == allseries[i])\n                    break;\n\n                if (allseries[i].stack == s.stack)\n                    res = allseries[i];\n            }\n\n            return res;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (s.stack == null || s.stack === false)\n                return;\n\n            var other = findMatchingSeries(s, plot.getData());\n            if (!other)\n                return;\n\n            var ps = datapoints.pointsize,\n                points = datapoints.points,\n                otherps = other.datapoints.pointsize,\n                otherpoints = other.datapoints.points,\n                newpoints = [],\n                px, py, intery, qx, qy, bottom,\n                withlines = s.lines.show,\n                horizontal = s.bars.horizontal,\n                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),\n                withsteps = withlines && s.lines.steps,\n                keyOffset = horizontal ? 1 : 0,\n                accumulateOffset = horizontal ? 0 : 1,\n                i = 0, j = 0, l, m;\n\n            while (true) {\n                if (i >= points.length && j >= otherpoints.length)\n                    break;\n\n                l = newpoints.length;\n\n                if (i < points.length && points[i] == null) {\n                    // copy gaps\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (i >= points.length) {\n                    // take the remaining points from the previous series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(otherpoints[j + m]);\n                    if (withbottom)\n                        newpoints[l + 2] = otherpoints[j + accumulateOffset];\n                    j += otherps;\n                }\n                else if (j >= otherpoints.length) {\n                    // take the remaining points from the current series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (j < otherpoints.length && otherpoints[j] == null) {\n                    // ignore point\n                    j += otherps;\n                }\n                else {\n                    // cases where we actually got two points\n                    px = points[i + keyOffset];\n                    py = points[i + accumulateOffset];\n                    qx = otherpoints[j + keyOffset];\n                    qy = otherpoints[j + accumulateOffset];\n                    bottom = 0;\n\n                    if (px == qx) {\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        newpoints[l + accumulateOffset] += qy;\n                        bottom = qy;\n\n                        i += ps;\n                        j += otherps;\n                    }\n                    else if (px > qx) {\n                        // take the point from the previous series so that next series will correctly stack\n                        if (i == 0) {\n                            for (m = 0; m < ps; ++m)\n                                newpoints.push(otherpoints[j + m]);\n                            bottom = qy;\n                        }\n                        // we got past point below, might need to\n                        // insert interpolated extra point\n                        if (i > 0 && points[i - ps] != null) {\n                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);\n                            newpoints.push(qx);\n                            newpoints.push(intery + qy);\n                            for (m = 2; m < ps; ++m)\n                                newpoints.push(points[i + m]);\n                            bottom = qy;\n                        }\n\n                        j += otherps;\n                    }\n                    else { // px < qx\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        // we might be able to interpolate a point below,\n                        // this can give us a better y\n                        if (j > 0 && otherpoints[j - otherps] != null)\n                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);\n\n                        newpoints[l + accumulateOffset] += bottom;\n\n                        i += ps;\n                    }\n\n                    fromgap = false;\n\n                    if (l != newpoints.length && withbottom)\n                        newpoints[l + 2] = bottom;\n                }\n\n                // maintain the line steps invariant\n                if (withsteps && l != newpoints.length && l > 0\n                    && newpoints[l] != null\n                    && newpoints[l] != newpoints[l - ps]\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\n                    for (m = 0; m < ps; ++m)\n                        newpoints[l + ps + m] = newpoints[l + m];\n                    newpoints[l + 1] = newpoints[l - ps + 1];\n                }\n            }\n\n            datapoints.points = newpoints;\n        }\n\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stack',\n        version: '1.2'\n    });\n})(jQuery);\n","(function ($) {\n    var options = {\n        series: {\n            stackpercent: null\n        } // or number/string\n    };\n\n    function init(plot) {\n\n        // will be built up dynamically as a hash from x-value, or y-value if horizontal\n        var stackBases = {};\n        var processed = false;\n        var stackSums = {};\n\n        //set percentage for stacked chart\n        function processRawData(plot, series, data, datapoints) {\n            if (!processed) {\n                processed = true;\n                stackSums = getStackSums(plot.getData());\n            }\n\t\t\tif (series.stackpercent == true) {\n\t\t\t\tvar num = data.length;\n\t\t\t\tseries.percents = [];\n\t\t\t\tvar key_idx = 0;\n\t\t\t\tvar value_idx = 1;\n\t\t\t\tif (series.bars && series.bars.horizontal && series.bars.horizontal === true) {\n\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < num; j++) {\n\t\t\t\t\tvar sum = stackSums[data[j][key_idx] + \"\"];\n\t\t\t\t\tif (sum > 0) {\n\t\t\t\t\t\tseries.percents.push(data[j][value_idx] * 100 / sum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseries.percents.push(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\n        //calculate summary\n        function getStackSums(_data) {\n            var data_len = _data.length;\n            var sums = {};\n            if (data_len > 0) {\n                //caculate summary\n                for (var i = 0; i < data_len; i++) {\n                    if (_data[i].stackpercent) {\n\t\t\t\t\t\tvar key_idx = 0;\n\t\t\t\t\t\tvar value_idx = 1;\n\t\t\t\t\t\tif (_data[i].bars && _data[i].bars.horizontal && _data[i].bars.horizontal === true) {\n\t\t\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t\t\t}\n                        var num = _data[i].data.length;\n                        for (var j = 0; j < num; j++) {\n                            var value = 0;\n                            if (_data[i].data[j][1] != null) {\n                                value = _data[i].data[j][value_idx];\n                            }\n                            if (sums[_data[i].data[j][key_idx] + \"\"]) {\n                                sums[_data[i].data[j][key_idx] + \"\"] += value;\n                            } else {\n                                sums[_data[i].data[j][key_idx] + \"\"] = value;\n                            }\n\n                        }\n                    }\n                }\n            }\n            return sums;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (!s.stackpercent) return;\n            if (!processed) {\n                stackSums = getStackSums(plot.getData());\n            }\n            var newPoints = [];\n\n\n\t\t\tvar key_idx = 0;\n\t\t\tvar value_idx = 1;\n\t\t\tif (s.bars && s.bars.horizontal && s.bars.horizontal === true) {\n\t\t\t\tkey_idx = 1;\n\t\t\t\tvalue_idx = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < datapoints.points.length; i += 3) {\n\t\t\t\t// note that the values need to be turned into absolute y-values.\n\t\t\t\t// in other words, if you were to stack (x, y1), (x, y2), and (x, y3),\n\t\t\t\t// (each from different series, which is where stackBases comes in),\n\t\t\t\t// you'd want the new points to be (x, y1, 0), (x, y1+y2, y1), (x, y1+y2+y3, y1+y2)\n\t\t\t\t// generally, (x, thisValue + (base up to this point), + (base up to this point))\n\t\t\t\tif (!stackBases[datapoints.points[i + key_idx]]) {\n\t\t\t\t\tstackBases[datapoints.points[i + key_idx]] = 0;\n\t\t\t\t}\n\t\t\t\tnewPoints[i + key_idx] = datapoints.points[i + key_idx];\n\t\t\t\tnewPoints[i + value_idx] = datapoints.points[i + value_idx] + stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tnewPoints[i + 2] = stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tstackBases[datapoints.points[i + key_idx]] += datapoints.points[i + value_idx];\n\t\t\t\t// change points to percentage values\n\t\t\t\t// you may need to set yaxis:{ max = 100 }\n\t\t\t\tif ( stackSums[newPoints[i+key_idx]+\"\"] > 0 ){\n\t\t\t\t\tnewPoints[i + value_idx] = newPoints[i + value_idx] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t\tnewPoints[i + 2] = newPoints[i + 2] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t} else {\n\t\t\t\t\tnewPoints[i + value_idx] = 0;\n\t\t\t\t\tnewPoints[i + 2] = 0;\n\t\t\t\t}\n\t\t\t}\n\n            datapoints.points = newPoints;\n        }\n\n\t\tplot.hooks.processRawData.push(processRawData);\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stackpercent',\n        version: '0.1'\n    });\n})(jQuery);\n","(function($) {\n    \"use strict\";\n\n    var options = {\n        series: {\n            fillBelowTo: null\n        }\n    };\n\n    function init(plot) {\n        function findBelowSeries( series, allseries ) {\n\n            var i;\n\n            for ( i = 0; i < allseries.length; ++i ) {\n                if ( allseries[ i ].id === series.fillBelowTo ) {\n                    return allseries[ i ];\n                }\n            }\n\n            return null;\n        }\n\n        /* top and bottom doesn't actually matter for this, we're just using it to help make this easier to think about */\n        /* this is a vector cross product operation */\n        function segmentIntersection(top_left_x, top_left_y, top_right_x, top_right_y, bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y) {\n            var top_delta_x, top_delta_y, bottom_delta_x, bottom_delta_y,\n                s, t;\n\n            top_delta_x = top_right_x - top_left_x;\n            top_delta_y = top_right_y - top_left_y;\n            bottom_delta_x = bottom_right_x - bottom_left_x;\n            bottom_delta_y = bottom_right_y - bottom_left_y;\n\n            s = (\n                (-top_delta_y * (top_left_x - bottom_left_x)) + (top_delta_x * (top_left_y - bottom_left_y))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            t = (\n                (bottom_delta_x * (top_left_y - bottom_left_y)) - (bottom_delta_y * (top_left_x - bottom_left_x))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            // Collision detected\n            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                return [\n                    top_left_x + (t * top_delta_x), // X\n                    top_left_y + (t * top_delta_y) // Y\n                ];\n            }\n\n            // No collision\n            return null;\n        }\n\n        function plotDifferenceArea(plot, ctx, series) {\n            if ( series.fillBelowTo === null ) {\n                return;\n            }\n\n            var otherseries,\n\n                ps,\n                points,\n\n                otherps,\n                otherpoints,\n\n                plotOffset,\n                fillStyle;\n\n            function openPolygon(x, y) {\n                ctx.beginPath();\n                ctx.moveTo(\n                    series.xaxis.p2c(x) + plotOffset.left,\n                    series.yaxis.p2c(y) + plotOffset.top\n                );\n\n            }\n\n            function closePolygon() {\n                ctx.closePath();\n                ctx.fill();\n            }\n\n            function validateInput() {\n                if (points.length/ps !== otherpoints.length/otherps) {\n                    console.error(\"Refusing to graph inconsistent number of points\");\n                    return false;\n                }\n\n                var i;\n                for (i = 0; i < (points.length / ps); i++) {\n                    if (\n                        points[i * ps] !== null &&\n                        otherpoints[i * otherps] !== null &&\n                        points[i * ps] !== otherpoints[i * otherps]\n                    ) {\n                        console.error(\"Refusing to graph points without matching value\");\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            function findNextStart(start_i, end_i) {\n                console.assert(end_i > start_i, \"expects the end index to be greater than the start index\");\n\n                var start = (\n                        start_i === 0 ||\n                        points[start_i - 1] === null ||\n                        otherpoints[start_i - 1] === null\n                    ),\n                    equal = false,\n                    i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    // Take note of null points\n                    if (\n                        points[(i * ps) + 1] === null ||\n                        otherpoints[(i * ps) + 1] === null\n                    ) {\n                        equal = false;\n                        start = true;\n                    }\n\n                    // Take note of equal points\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        equal = true;\n                        start = false;\n                    }\n\n\n                    else if (points[(i * ps) + 1] > otherpoints[(i * otherps) + 1]) {\n                        // If we begin above the desired point\n                        if (start) {\n                            openPolygon(points[i * ps], points[(i * ps) + 1]);\n                        }\n\n                        // If an equal point preceeds this, start the polygon at that equal point\n                        else if (equal) {\n                            openPolygon(points[(i - 1) * ps], points[((i - 1) * ps) + 1]);\n                        }\n\n                        // Otherwise, find the intersection point, and start it there\n                        else {\n                            intersect = intersectionPoint(i);\n                            openPolygon(intersect[0], intersect[1]);\n                        }\n\n                        topTraversal(i, end_i);\n                        return;\n                    }\n\n                    // If we go below equal, equal at any preceeding point is irrelevant\n                    else {\n                        start = false;\n                        equal = false;\n                    }\n                }\n            }\n\n            function intersectionPoint(right_i) {\n                console.assert(right_i > 0, \"expects the second point in the series line segment\");\n\n                var i, intersect;\n\n                for (i = 1; i < (otherpoints.length/otherps); i++) {\n                    intersect = segmentIntersection(\n                        points[(right_i - 1) * ps], points[((right_i - 1) * ps) + 1],\n                        points[right_i * ps], points[(right_i * ps) + 1],\n\n                        otherpoints[(i - 1) * otherps], otherpoints[((i - 1) * otherps) + 1],\n                        otherpoints[i * otherps], otherpoints[(i * otherps) + 1]\n                    );\n\n                    if (intersect !== null) {\n                        return intersect;\n                    }\n                }\n\n                console.error(\"intersectionPoint() should only be called when an intersection happens\");\n            }\n\n            function bottomTraversal(start_i, end_i) {\n                console.assert(start_i >= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i;\n\n                for (i = start_i; i >= end_i; i--) {\n                    ctx.lineTo(\n                        otherseries.xaxis.p2c(otherpoints[i * otherps]) + plotOffset.left,\n                        otherseries.yaxis.p2c(otherpoints[(i * otherps) + 1]) + plotOffset.top\n                    );\n                }\n\n                closePolygon();\n            }\n\n            function topTraversal(start_i, end_i) {\n                console.assert(start_i <= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    if (points[(i * ps) + 1] === null && i > start_i) {\n                        bottomTraversal(i - 1, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] < otherpoints[(i * otherps) + 1]) {\n                        intersect = intersectionPoint(i);\n                        ctx.lineTo(\n                            series.xaxis.p2c(intersect[0]) + plotOffset.left,\n                            series.yaxis.p2c(intersect[1]) + plotOffset.top\n                        );\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n\n                    }\n\n                    else {\n                        ctx.lineTo(\n                            series.xaxis.p2c(points[i * ps]) + plotOffset.left,\n                            series.yaxis.p2c(points[(i * ps) + 1]) + plotOffset.top\n                        );\n                    }\n                }\n\n                bottomTraversal(end_i, start_i);\n            }\n\n\n            // Begin processing\n\n            otherseries = findBelowSeries( series, plot.getData() );\n\n            if ( !otherseries ) {\n                return;\n            }\n\n            ps = series.datapoints.pointsize;\n            points = series.datapoints.points;\n            otherps = otherseries.datapoints.pointsize;\n            otherpoints = otherseries.datapoints.points;\n            plotOffset = plot.getPlotOffset();\n\n            if (!validateInput()) {\n                return;\n            }\n\n\n            // Flot's getFillStyle() should probably be exposed somewhere\n            fillStyle = $.color.parse(series.color);\n            fillStyle.a = 0.4;\n            fillStyle.normalize();\n            ctx.fillStyle = fillStyle.toString();\n\n\n            // Begin recursive bi-directional traversal\n            findNextStart(0, points.length/ps);\n        }\n\n        plot.hooks.drawSeries.push(plotDifferenceArea);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: \"fillbelow\",\n        version: \"0.1.0\"\n    });\n\n})(jQuery);\n","/* Flot plugin for showing crosshairs when the mouse hovers over the plot.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\n\tcrosshair: {\n\t\tmode: null or \"x\" or \"y\" or \"xy\"\n\t\tcolor: color\n\t\tlineWidth: number\n\t}\n\nSet the mode to one of \"x\", \"y\" or \"xy\". The \"x\" mode enables a vertical\ncrosshair that lets you trace the values on the x axis, \"y\" enables a\nhorizontal crosshair and \"xy\" enables them both. \"color\" is the color of the\ncrosshair (default is \"rgba(170, 0, 0, 0.80)\"), \"lineWidth\" is the width of\nthe drawn lines (default is 1).\n\nThe plugin also adds four public methods:\n\n  - setCrosshair( pos )\n\n    Set the position of the crosshair. Note that this is cleared if the user\n    moves the mouse. \"pos\" is in coordinates of the plot and should be on the\n    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple\n    axes), which is coincidentally the same format as what you get from a\n    \"plothover\" event. If \"pos\" is null, the crosshair is cleared.\n\n  - clearCrosshair()\n\n    Clear the crosshair.\n\n  - lockCrosshair(pos)\n\n    Cause the crosshair to lock to the current location, no longer updating if\n    the user moves the mouse. Optionally supply a position (passed on to\n    setCrosshair()) to move it to.\n\n    Example usage:\n\n\tvar myFlot = $.plot( $(\"#graph\"), ..., { crosshair: { mode: \"x\" } } };\n\t$(\"#graph\").bind( \"plothover\", function ( evt, position, item ) {\n\t\tif ( item ) {\n\t\t\t// Lock the crosshair to the data point being hovered\n\t\t\tmyFlot.lockCrosshair({\n\t\t\t\tx: item.datapoint[ 0 ],\n\t\t\t\ty: item.datapoint[ 1 ]\n\t\t\t});\n\t\t} else {\n\t\t\t// Return normal crosshair operation\n\t\t\tmyFlot.unlockCrosshair();\n\t\t}\n\t});\n\n  - unlockCrosshair()\n\n    Free the crosshair to move again after locking it.\n*/\n\n(function ($) {\n    var options = {\n        crosshair: {\n            mode: null, // one of null, \"x\", \"y\" or \"xy\",\n            color: \"rgba(170, 0, 0, 0.80)\",\n            lineWidth: 1\n        }\n    };\n    \n    function init(plot) {\n        // position of crosshair in pixels\n        var crosshair = { x: -1, y: -1, locked: false };\n\n        plot.setCrosshair = function setCrosshair(pos) {\n            if (!pos)\n                crosshair.x = -1;\n            else {\n                var o = plot.p2c(pos);\n                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));\n                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));\n            }\n            \n            plot.triggerRedrawOverlay();\n        };\n        \n        plot.clearCrosshair = plot.setCrosshair; // passes null for pos\n        \n        plot.lockCrosshair = function lockCrosshair(pos) {\n            if (pos)\n                plot.setCrosshair(pos);\n            crosshair.locked = true;\n        };\n\n        plot.unlockCrosshair = function unlockCrosshair() {\n            crosshair.locked = false;\n        };\n\n        function onMouseOut(e) {\n            if (crosshair.locked)\n                return;\n\n            if (crosshair.x != -1) {\n                crosshair.x = -1;\n                plot.triggerRedrawOverlay();\n            }\n        }\n\n        function onMouseMove(e) {\n            if (crosshair.locked)\n                return;\n                \n            if (plot.getSelection && plot.getSelection()) {\n                crosshair.x = -1; // hide the crosshair while selecting\n                return;\n            }\n                \n            var offset = plot.offset();\n            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));\n            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));\n            plot.triggerRedrawOverlay();\n        }\n        \n        plot.hooks.bindEvents.push(function (plot, eventHolder) {\n            if (!plot.getOptions().crosshair.mode)\n                return;\n\n            eventHolder.mouseout(onMouseOut);\n            eventHolder.mousemove(onMouseMove);\n        });\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            var c = plot.getOptions().crosshair;\n            if (!c.mode)\n                return;\n\n            var plotOffset = plot.getPlotOffset();\n            \n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            if (crosshair.x != -1) {\n                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;\n\n                ctx.strokeStyle = c.color;\n                ctx.lineWidth = c.lineWidth;\n                ctx.lineJoin = \"round\";\n\n                ctx.beginPath();\n                if (c.mode.indexOf(\"x\") != -1) {\n                    var drawX = Math.floor(crosshair.x) + adj;\n                    ctx.moveTo(drawX, 0);\n                    ctx.lineTo(drawX, plot.height());\n                }\n                if (c.mode.indexOf(\"y\") != -1) {\n                    var drawY = Math.floor(crosshair.y) + adj;\n                    ctx.moveTo(0, drawY);\n                    ctx.lineTo(plot.width(), drawY);\n                }\n                ctx.stroke();\n            }\n            ctx.restore();\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mouseout\", onMouseOut);\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n        });\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'crosshair',\n        version: '1.0'\n    });\n})(jQuery);\n","/*\n * jQuery.flot.dashes\n *\n * options = {\n *   series: {\n *     dashes: {\n *\n *       // show\n *       // default: false\n *       // Whether to show dashes for the series.\n *       show: <boolean>,\n *\n *       // lineWidth\n *       // default: 2\n *       // The width of the dashed line in pixels.\n *       lineWidth: <number>,\n *\n *       // dashLength\n *       // default: 10\n *       // Controls the length of the individual dashes and the amount of\n *       // space between them.\n *       // If this is a number, the dashes and spaces will have that length.\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\n *       dashLength: <number> or <array[2]>\n *     }\n *   }\n * }\n */\n(function($){\n\n  function init(plot) {\n\n    plot.hooks.processDatapoints.push(function(plot, series, datapoints) {\n\n      if (!series.dashes.show) return;\n\n      plot.hooks.draw.push(function(plot, ctx) {\n\n        var plotOffset = plot.getPlotOffset(),\n          axisx = series.xaxis,\n          axisy = series.yaxis;\n\n        function plotDashes(xoffset, yoffset) {\n\n          var points = datapoints.points,\n            ps = datapoints.pointsize,\n            prevx = null,\n            prevy = null,\n            dashRemainder = 0,\n            dashOn = true,\n            dashOnLength,\n            dashOffLength;\n\n          if (series.dashes.dashLength[0]) {\n            dashOnLength = series.dashes.dashLength[0];\n            if (series.dashes.dashLength[1]) {\n              dashOffLength = series.dashes.dashLength[1];\n            } else {\n              dashOffLength = dashOnLength;\n            }\n          } else {\n            dashOffLength = dashOnLength = series.dashes.dashLength;\n          }\n\n          ctx.beginPath();\n\n          for (var i = ps; i < points.length; i += ps) {\n\n            var x1 = points[i - ps],\n              y1 = points[i - ps + 1],\n              x2 = points[i],\n              y2 = points[i + 1];\n\n            if (x1 == null || x2 == null) continue;\n\n            // clip with ymin\n            if (y1 <= y2 && y1 < axisy.min) {\n              if (y2 < axisy.min) continue;   // line segment is outside\n              // compute new intersection point\n              x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.min;\n            } else if (y2 <= y1 && y2 < axisy.min) {\n              if (y1 < axisy.min) continue;\n              x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.min;\n            }\n\n            // clip with ymax\n            if (y1 >= y2 && y1 > axisy.max) {\n              if (y2 > axisy.max) continue;\n              x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.max;\n            } else if (y2 >= y1 && y2 > axisy.max) {\n              if (y1 > axisy.max) continue;\n              x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.max;\n            }\n\n            // clip with xmin\n            if (x1 <= x2 && x1 < axisx.min) {\n              if (x2 < axisx.min) continue;\n              y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.min;\n            } else if (x2 <= x1 && x2 < axisx.min) {\n              if (x1 < axisx.min) continue;\n              y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.min;\n            }\n\n            // clip with xmax\n            if (x1 >= x2 && x1 > axisx.max) {\n              if (x2 > axisx.max) continue;\n              y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.max;\n            } else if (x2 >= x1 && x2 > axisx.max) {\n              if (x1 > axisx.max) continue;\n              y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.max;\n            }\n\n            if (x1 != prevx || y1 != prevy) {\n              ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n            }\n\n            var ax1 = axisx.p2c(x1) + xoffset,\n              ay1 = axisy.p2c(y1) + yoffset,\n              ax2 = axisx.p2c(x2) + xoffset,\n              ay2 = axisy.p2c(y2) + yoffset,\n              dashOffset;\n\n            function lineSegmentOffset(segmentLength) {\n\n              var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\n\n              if (c <= segmentLength) {\n                return {\n                  deltaX: ax2 - ax1,\n                  deltaY: ay2 - ay1,\n                  distance: c,\n                  remainder: segmentLength - c\n                }\n              } else {\n                var xsign = ax2 > ax1 ? 1 : -1,\n                  ysign = ay2 > ay1 ? 1 : -1;\n                return {\n                  deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  distance: segmentLength,\n                  remainder: 0\n                };\n              }\n            }\n            //-end lineSegmentOffset\n\n            do {\n\n              dashOffset = lineSegmentOffset(\n                dashRemainder > 0 ? dashRemainder :\n                  dashOn ? dashOnLength : dashOffLength);\n\n              if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\n                if (dashOn) {\n                  ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                } else {\n                  ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                }\n              }\n\n              dashOn = !dashOn;\n              dashRemainder = dashOffset.remainder;\n              ax1 += dashOffset.deltaX;\n              ay1 += dashOffset.deltaY;\n\n            } while (dashOffset.distance > 0);\n\n            prevx = x2;\n            prevy = y2;\n          }\n\n          ctx.stroke();\n        }\n        //-end plotDashes\n\n        ctx.save();\n        ctx.translate(plotOffset.left, plotOffset.top);\n        ctx.lineJoin = 'round';\n\n        var lw = series.dashes.lineWidth,\n          sw = series.shadowSize;\n\n        // FIXME: consider another form of shadow when filling is turned on\n        if (lw > 0 && sw > 0) {\n          // draw shadow as a thick and thin line with transparency\n          ctx.lineWidth = sw;\n          ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n          // position shadow at angle from the mid of line\n          var angle = Math.PI/18;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\n          ctx.lineWidth = sw/2;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\n        }\n\n        ctx.lineWidth = lw;\n        ctx.strokeStyle = series.color;\n\n        if (lw > 0) {\n          plotDashes(0, 0);\n        }\n\n        ctx.restore();\n\n      });\n      //-end draw hook\n\n    });\n    //-end processDatapoints hook\n\n  }\n  //-end init\n\n  $.plot.plugins.push({\n    init: init,\n    options: {\n      series: {\n        dashes: {\n          show: false,\n          lineWidth: 2,\n          dashLength: 10\n        }\n      }\n    },\n    name: 'dashes',\n    version: '0.1'\n  });\n\n})(jQuery)\n","/*!\n * jquery.flot.gauge v1.1.0 *\n *\n * Flot plugin for rendering gauge charts.\n *\n * Copyright (c) 2015 @toyoty99.\n * Licensed under the MIT license.\n */\n\n/**\n * @module flot.gauge\n */\n(function($) {\n\n\n    /**\n     * Gauge class\n     *\n     * @class Gauge\n     */\n    var Gauge = (function() {\n        /**\n         * context of canvas\n         *\n         * @property context\n         * @type Object\n         */\n        var context;\n        /**\n         * placeholder of canvas\n         *\n         * @property placeholder\n         * @type Object\n         */\n        var placeholder;\n        /**\n         * options of plot\n         *\n         * @property options\n         * @type Object\n         */\n        var options;\n        /**\n         * options of gauge\n         *\n         * @property gaugeOptions\n         * @type Object\n         */\n        var gaugeOptions;\n        /**\n         * data series\n         *\n         * @property series\n         * @type Array\n         */\n        var series;\n        /**\n         * logger\n         *\n         * @property logger\n         * @type Object\n         */\n        var logger;\n\n        /**\n         * constructor\n         *\n         * @class Gauge\n         * @constructor\n         * @param  {Object} gaugeOptions gauge options\n         */\n        var Gauge = function(plot, ctx) {\n            context = ctx;\n            placeholder = plot.getPlaceholder();\n            options = plot.getOptions();\n            gaugeOptions = options.series.gauges;\n            series = plot.getData();\n            logger = getLogger(gaugeOptions.debug);\n        }\n\n        /**\n         * calculate layout\n         *\n         * @method calculateLayout\n         * @return the calculated layout properties\n         */\n        Gauge.prototype.calculateLayout = function() {\n\n            var canvasWidth = placeholder.width();\n            var canvasHeight = placeholder.height();\n\n\n\n            // calculate cell size\n            var columns = Math.min(series.length, gaugeOptions.layout.columns);\n            var rows = Math.ceil(series.length / columns);\n\n\n\n            var margin = gaugeOptions.layout.margin;\n            var hMargin = gaugeOptions.layout.hMargin;\n            var vMargin = gaugeOptions.layout.vMargin;\n            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;\n            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;\n            if (gaugeOptions.layout.square) {\n                var cell = Math.min(cellWidth, cellHeight);\n                cellWidth = cell;\n                cellHeight = cell;\n            }\n\n\n\n            // calculate 'auto' values\n            calculateAutoValues(gaugeOptions, cellWidth);\n\n            // calculate maximum radius\n            var cellMargin = gaugeOptions.cell.margin;\n            var labelMargin = 0;\n            var labelFontSize = 0;\n            if (gaugeOptions.label.show) {\n                labelMargin = gaugeOptions.label.margin;\n                labelFontSize = gaugeOptions.label.font.size;\n            }\n            var valueMargin = 0;\n            var valueFontSize = 0;\n            if (gaugeOptions.value.show) {\n                valueMargin = gaugeOptions.value.margin;\n                valueFontSize = gaugeOptions.value.font.size;\n            }\n            var thresholdWidth = 0;\n            if (gaugeOptions.threshold.show) {\n                thresholdWidth = gaugeOptions.threshold.width;\n            }\n            var thresholdLabelMargin = 0;\n            var thresholdLabelFontSize = 0;\n            if (gaugeOptions.threshold.label.show) {\n                thresholdLabelMargin = gaugeOptions.threshold.label.margin;\n                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;\n            }\n\n            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;\n\n            var startAngle = gaugeOptions.gauge.startAngle;\n            var endAngle = gaugeOptions.gauge.endAngle;\n            var dAngle = (endAngle - startAngle) / 100;\n            var heightRatioV = -1;\n            for (var a = startAngle; a < endAngle; a += dAngle) {\n                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));\n            }\n            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));\n            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);\n            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {\n                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);\n            }\n            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;\n\n            var radius = Math.min(maxRadiusH, maxRadiusV);\n\n\n            var width = gaugeOptions.gauge.width;\n            if (width >= radius) {\n                width = Math.max(3, radius / 3);\n            }\n\n\n            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;\n            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));\n\n            return {\n                canvasWidth: canvasWidth,\n                canvasHeight: canvasHeight,\n                margin: margin,\n                hMargin: hMargin,\n                vMargin: vMargin,\n                columns: columns,\n                rows: rows,\n                cellWidth: cellWidth,\n                cellHeight: cellHeight,\n                cellMargin: cellMargin,\n                labelMargin: labelMargin,\n                labelFontSize: labelFontSize,\n                valueMargin: valueMargin,\n                valueFontSize: valueFontSize,\n                width: width,\n                radius: radius,\n                thresholdWidth: thresholdWidth,\n                thresholdLabelMargin: thresholdLabelMargin,\n                thresholdLabelFontSize: thresholdLabelFontSize,\n                gaugeOuterHeight: gaugeOuterHeight\n            };\n        }\n\n        /**\n         * calculate the values which are set as 'auto'\n         *\n         * @method calculateAutoValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         */\n        function calculateAutoValues(gaugeOptionsi, cellWidth) {\n\n            if (gaugeOptionsi.gauge.width === \"auto\") {\n                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.label.margin === \"auto\") {\n                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);\n            }\n            if (gaugeOptionsi.label.font.size === \"auto\") {\n                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.value.margin === \"auto\") {\n                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);\n            }\n            if (gaugeOptionsi.value.font.size === \"auto\") {\n                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);\n            }\n            if (gaugeOptionsi.threshold.width === \"auto\") {\n                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);\n            }\n            if (gaugeOptionsi.threshold.label.margin === \"auto\") {\n                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);\n            }\n            if (gaugeOptionsi.threshold.label.font.size === \"auto\") {\n                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);\n            }\n\n        }\n        Gauge.prototype.calculateAutoValues = calculateAutoValues;\n\n        /**\n         * calculate the layout of the cell inside\n         *\n         * @method calculateCellLayout\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         * @param  {Number} i the index of the series\n         * @return the calculated cell layout properties\n         */\n        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {\n\n            // calculate top, left and center\n            var c = col(layout.columns, i);\n            var r = row(layout.columns, i);\n            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;\n            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;\n            var cx = x + (layout.cellWidth / 2);\n            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth\n                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;\n            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;\n            var offsetY = 0;\n            if (gaugeOptionsi.cell.vAlign === \"middle\") {\n                offsetY = (blank / 2);\n            } else if (gaugeOptionsi.cell.vAlign === \"bottom\") {\n                offsetY = blank;\n            }\n            cy += offsetY;\n\n            return {\n                col: c,\n                row: r,\n                x: x,\n                y: y,\n                offsetY: offsetY,\n                cellWidth: layout.cellWidth,\n                cellHeight: layout.cellHeight,\n                cellMargin: layout.cellMargin,\n                cx: cx,\n                cy: cy\n            }\n        }\n\n        /**\n         * draw the background of chart\n         *\n         * @method drawBackground\n         * @param  {Object} layout the layout properties\n         */\n        Gauge.prototype.drawBackground = function(layout) {\n\n            if (!gaugeOptions.frame.show) {\n                return;\n            }\n            context.save();\n            context.strokeStyle = options.grid.borderColor;\n            context.lineWidth = options.grid.borderWidth;\n            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            if (options.grid.backgroundColor) {\n                context.fillStyle = options.grid.backgroundColor;\n                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the background of cell\n         *\n         * @method drawCellBackground\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {\n\n            context.save();\n            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.show && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {\n                context.strokeStyle = gaugeOptionsi.cell.border.color;\n                context.lineWidth = gaugeOptionsi.cell.border.width;\n                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {\n                context.fillStyle = gaugeOptionsi.cell.background.color;\n                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the gauge\n         *\n         * @method drawGauge\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {String} label the label of data\n         * @param  {Number} data the value of the gauge\n         */\n        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {\n\n\n            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;\n\n\n            // draw gauge frame\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius,\n                layout.width,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(gaugeOptionsi.gauge.endAngle),\n                gaugeOptionsi.gauge.border.color,      // line color\n                gaugeOptionsi.gauge.border.width,      // line width\n                gaugeOptionsi.gauge.background.color,  // fill color\n                blur);\n\n            // draw gauge\n            var c1 = getColor(gaugeOptionsi, data);\n            var a2 = calculateAngle(gaugeOptionsi, layout, data);\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius - 1,\n                layout.width - 2,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(a2),\n                c1,           // line color\n                1,            // line width\n                c1,           // fill color\n                blur);\n        }\n\n        /**\n         * decide the color of the data from the threshold options\n         *\n         * @method getColor\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} data the value of the gauge\n         */\n        function getColor(gaugeOptionsi, data) {\n            var color;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                color = threshold.color;\n                if (data < threshold.value) {\n                    break;\n                }\n            }\n            return color;\n        }\n\n        /**\n         * calculate the angle of the data\n         *\n         * @method calculateAngle\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Number} data the value of the gauge\n         */\n        function calculateAngle(gaugeOptionsi, layout, data) {\n            var a =\n                gaugeOptionsi.gauge.startAngle\n                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)\n                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));\n\n            if (a < gaugeOptionsi.gauge.startAngle) {\n                a = gaugeOptionsi.gauge.startAngle;\n            } else if (a > gaugeOptionsi.gauge.endAngle) {\n                a = gaugeOptionsi.gauge.endAngle;\n            }\n            return a;\n        }\n\n        /**\n         * draw the arc of the threshold\n         *\n         * @method drawThreshold\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {\n\n            var a1 = gaugeOptionsi.gauge.startAngle;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                c1 = threshold.color;\n                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                drawArc(\n                    context,\n                    cellLayout.cx, // center x\n                    cellLayout.cy, // center y\n                    layout.radius + layout.thresholdWidth,\n                    layout.thresholdWidth - 2,\n                    toRad(a1),\n                    toRad(a2),\n                    c1,           // line color\n                    1,            // line width\n                    c1);          // fill color\n                a1 = a2;\n            }\n        }\n\n        /**\n         * draw an arc with a shadow\n         *\n         * @method drawArcWithShadow\n         * @private\n         * @param  {Number} cx the x position of the center\n         * @param  {Number} cy the y position of the center\n         * @param  {Number} r the radius of an arc\n         * @param  {Number} w the width of an arc\n         * @param  {Number} rd1 the start angle of an arc in radians\n         * @param  {Number} rd2 the end angle of an arc in radians\n         * @param  {String} lc the color of a line\n         * @param  {Number} lw the widht of a line\n         * @param  {String} fc the fill color  of an arc\n         * @param  {Number} blur the shdow blur\n         */\n        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {\n            if (rd1 === rd2) {\n                return;\n            }\n            context.save();\n\n            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);\n\n            if (blur) {\n                drawArc(context, cx, cy, r, w, rd1, rd2);\n                context.clip();\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n                context.shadowBlur = 10;\n                context.shadowColor = \"gray\";\n                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the label of the gauge\n         *\n         * @method drawLable\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,\n                \"flotGagueLabel\" + i,\n                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.label);\n        }\n\n        /**\n         * draw the value of the gauge\n         *\n         * @method drawValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),\n                \"flotGagueValue\" + i,\n                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.value);\n        }\n\n        /**\n         * draw the values of the threshold\n         *\n         * @method drawThresholdValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         */\n        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {\n\n            // min, max\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Min\" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Max\" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);\n            // threshold values\n            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {\n                var threshold = gaugeOptionsi.threshold.values[j];\n                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {\n                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + \"_\" + j, threshold.value, a);\n                }\n            }\n        }\n\n        /**\n         * draw the value of the threshold\n         *\n         * @method drawThresholdValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Number} value the value of the threshold\n         * @param  {Number} a the angle of the value drawn\n         */\n        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {\n            drawText(\n                cellLayout.cx\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.cos(toRad(a))),\n                cellLayout.cy\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.sin(toRad(a))),\n                \"flotGagueThresholdValue\" + i,\n                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,\n                gaugeOptionsi.threshold.label,\n                a);\n        }\n\n        /**\n         * draw a text\n         *\n         * the textOptions is assumed as follows:\n         *\n         *   textOptions: {\n         *       background: {\n         *           color: null,\n         *           opacity: 0\n         *       },\n         *       font: {\n         *           size: \"auto\"\n         *           family: \"\\\"ＭＳ ゴシック\\\",sans-serif\"\n         *       },\n         *       color: null\n         *   }\n         *\n         * @method drawText\n         * @private\n         * @param  {Number} x the x position of the text drawn (left top)\n         * @param  {Number} y the y position of the text drawn (left top)\n         * @param  {String} id the id of the dom element\n         * @param  {String} text the text drawn\n         * @param  {Object} textOptions the option of the text\n         * @param  {Number} [a] the angle of the value drawn\n         */\n        function drawText(x, y, id, text, textOptions, a) {\n            var span = $(\".\" + id, placeholder);\n            var exists = span.length;\n            if (!exists) {\n                span = $(\"<span></span>\")\n                span.attr(\"id\", id);\n                span.css(\"position\", \"absolute\");\n                span.css(\"top\", y + \"px\");\n                if (textOptions.font.size) {\n                    span.css(\"font-size\", textOptions.font.size + \"px\");\n                }\n                if (textOptions.font.family) {\n                    span.css(\"font-family\", textOptions.font.family);\n                }\n                if (textOptions.color) {\n                    span.css(\"color\", textOptions.color);\n                }\n                if (textOptions.background.color) {\n                    span.css(\"background-color\", textOptions.background.color);\n                }\n                if (textOptions.background.opacity) {\n                    span.css(\"opacity\", textOptions.background.opacity);\n                }\n                placeholder.append(span);\n            }\n            span.text(text);\n            // after append, readjust the left position\n            span.css(\"left\", x + \"px\"); // for redraw, resetting the left position is needed here\n            span.css(\"left\", (parseInt(span.css(\"left\")) - (span.width()/ 2)) + \"px\");\n\n            // at last, set angle\n            if (!exists && a) {\n                span.css(\"top\", (parseInt(span.css(\"top\")) - (span.height()/ 2)) + \"px\");\n                span.css(\"transform\", \"rotate(\" + ((180 * a) + 90) + \"deg)\"); // not supported for ie8\n            }\n        }\n\n        return Gauge;\n    })();\n    /**\n     * get a instance of Logger\n     *\n     * @method  getLogger\n     * @for flot.gauge\n     * @private\n     * @param  {Object} debugOptions the options of debug\n     */\n    function getLogger(debugOptions) {\n        return typeof Logger !== \"undefined\" ? new Logger(debugOptions) : null;\n    }\n\n    /**\n     * calculate the index of columns for the specified data\n     *\n     * @method col\n     * @for flot.gauge\n     * @param  {Number} columns the number of columns\n     * @param  {Number} i       the index of the series\n     * @return the index of columns\n     */\n    function col(columns, i) {\n        return i % columns;\n    }\n\n    /**\n     * calculate the index of rows for the specified data\n     *\n     * @method row\n     * @for flot.gauge\n     * @param  {Number} columns the number of rows\n     * @param  {Number} i       the index of the series\n     * @return the index of rows\n     */\n    function row(columns, i) {\n        return Math.floor(i / columns);\n    }\n\n    /**\n     * calculate the angle in radians\n     *\n     * internally, use a number without PI (0 - 2).\n     * so, in this function, multiply PI\n     *\n     * @method toRad\n     * @for flot.gauge\n     * @param  {Number} a the number of angle without PI\n     * @return the angle in radians\n     */\n    function toRad(a) {\n        return a * Math.PI;\n    }\n\n    /**\n     * draw an arc\n     *\n     * @method drawArc\n     * @for flot.gauge\n     * @param  {Object} context the context of canvas\n     * @param  {Number} cx the x position of the center\n     * @param  {Number} cy the y position of the center\n     * @param  {Number} r the radius of an arc\n     * @param  {Number} w the width of an arc\n     * @param  {Number} rd1 the start angle of an arc in radians\n     * @param  {Number} rd2 the end angle of an arc in radians\n     * @param  {String} lc the color of a line\n     * @param  {Number} lw the widht of a line\n     * @param  {String} fc the fill color  of an arc\n     */\n    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {\n        if (rd1 === rd2) {\n            return;\n        }\n        var counterClockwise = false;\n        context.save();\n        context.beginPath();\n        context.arc(cx, cy, r, rd1, rd2, counterClockwise);\n        context.lineTo(cx + (r - w) * Math.cos(rd2),\n                       cy + (r - w) * Math.sin(rd2));\n        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);\n        context.closePath();\n        if (lw) {\n            context.lineWidth = lw;\n        }\n        if (lc) {\n            context.strokeStyle = lc;\n            context.stroke();\n        }\n        if (fc) {\n            context.fillStyle = fc;\n            context.fill();\n        }\n        context.restore();\n    }\n\n    /**\n     * initialize plugin\n     *\n     * @method init\n     * @for flot.gauge\n     * @private\n     * @param  {Object} plot a instance of plot\n     */\n    function init (plot) {\n        // add processOptions hook\n        plot.hooks.processOptions.push(function(plot, options) {\n            var logger = getLogger(options.series.gauges.debug);\n\n\n\n\n            // turn 'grid' and 'legend' off\n            if (options.series.gauges.show) {\n                options.grid.show = false;\n                options.legend.show = false;\n            }\n\n            // sort threshold\n            var thresholds = options.series.gauges.threshold.values;\n\n            thresholds.sort(function(a, b) {\n                if (a.value < b.value) {\n                    return -1;\n                } else if (a.value > b.value) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n\n\n\n        });\n\n        // add draw hook\n        plot.hooks.draw.push(function(plot, context) {\n            var options = plot.getOptions();\n            var gaugeOptions = options.series.gauges;\n\n            var logger = getLogger(gaugeOptions.debug);\n\n\n            if (!gaugeOptions.show) {\n                return;\n            }\n\n            var series = plot.getData();\n\n            if (!series || !series.length) {\n                return; // if no series were passed\n            }\n\n            var gauge = new Gauge(plot, context);\n\n            // calculate layout\n            var layout = gauge.calculateLayout();\n\n            // debug layout\n            if (gaugeOptions.debug.layout) {\n\n            }\n\n            // draw background\n            gauge.drawBackground(layout)\n\n            // draw cells (label, gauge, value, threshold)\n            for (var i = 0; i < series.length; i++) {\n                var item = series[i];\n\n                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);\n                if (item.gauges) {\n                    // re-calculate 'auto' values\n                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);\n                }\n\n                // calculate cell layout\n                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);\n\n                // draw cell background\n                gauge.drawCellBackground(gaugeOptionsi, cellLayout)\n                // debug layout\n                if (gaugeOptionsi.debug.layout) {\n\n                }\n                // draw label\n                if (gaugeOptionsi.label.show) {\n                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n                // draw gauge\n                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);\n                // draw threshold\n                if (gaugeOptionsi.threshold.show) {\n                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);\n                }\n                if (gaugeOptionsi.threshold.label.show) {\n                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)\n                }\n                // draw value\n                if (gaugeOptionsi.value.show) {\n                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n            }\n        });\n    }\n\n    /**\n     * [defaults description]\n     *\n     * @property defaults\n     * @type {Object}\n     */\n    var defaults = {\n        series: {\n            gauges: {\n                debug: {\n                    log: false,\n                    layout: false,\n                    alert: false\n                },\n                show: false,\n                layout: {\n                    margin: 5,\n                    columns: 3,\n                    hMargin: 5,\n                    vMargin: 5,\n                    square: false\n                },\n                frame: {\n                    show: true\n                },\n                cell: {\n                    background: {\n                        color: null\n                    },\n                    border: {\n                        show: true,\n                        color: \"black\",\n                        width: 1\n                    },\n                    margin: 5,\n                    vAlign: \"middle\" // 'top' or 'middle' or 'bottom'\n                },\n                gauge: {\n                    width: \"auto\", // a specified number, or 'auto'\n                    startAngle: 0.9, // 0 - 2 factor of the radians\n                    endAngle: 2.1, // 0 - 2 factor of the radians\n                    min: 0,\n                    max: 100,\n                    background: {\n                        color: \"white\"\n                    },\n                    border: {\n                        color: \"lightgray\",\n                        width: 2\n                    },\n                    shadow: {\n                        show: true,\n                        blur: 5\n                    }\n                },\n                label: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return label;\n                    }\n                },\n                value: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return parseInt(value);\n                    }\n                },\n                threshold: {\n                    show: true,\n                    width: \"auto\", // a specified number, or 'auto'\n                    label: {\n                        show: true,\n                        margin: \"auto\", // a specified number, or 'auto'\n                        background: {\n                            color: null,\n                            opacity: 0\n                        },\n                        font: {\n                            size: \"auto\", // a specified number, or 'auto'\n                            family: \",sans-serif\"\n                        },\n                        color: null,\n                        formatter: function(value) {\n                            return value;\n                        }\n                    },\n                    values: [\n                        {\n                            value: 50,\n                            color: \"lightgreen\"\n                        }, {\n                            value: 80,\n                            color: \"yellow\"\n                        }, {\n                            value: 100,\n                            color: \"red\"\n                        }\n                    ]\n                }\n            }\n        }\n    };\n\n    // register the gauge plugin\n    $.plot.plugins.push({\n        init: init,\n        options: defaults,\n        name: \"gauge\",\n        version: \"1.1.0\"\n    });\n\n})(jQuery);\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/mode/prometheus_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrometheusHighlightRules = function() {\n  var keywords = (\n    \"count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile\"\n  );\n\n  var builtinConstants = (\n    \"true|false|null|__name__|job\"\n  );\n\n  var builtinFunctions = (\n    \"abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv|\" + \"drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2|\" +\n    \"log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time|\" +\n    \"min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time\"\n  );\n\n  var keywordMapper = this.createKeywordMapper({\n    \"support.function\": builtinFunctions,\n    \"keyword\": keywords,\n    \"constant.language\": builtinConstants\n  }, \"identifier\", true);\n\n  this.$rules = {\n    \"start\" : [ {\n      token : \"string\", // single line\n      regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\n    }, {\n      token : \"string\", // string\n      regex : \"'.*?'\"\n    }, {\n      token : \"constant.numeric\", // float\n      regex : \"[-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n    }, {\n      token : \"constant.language\", // time\n      regex : \"\\\\d+[smhdwy]\"\n    }, {\n      token : \"keyword.operator.binary\",\n      regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\^|==|!=|<=|>=|<|>|and|or|unless\"\n    }, {\n      token : \"keyword.other\",\n      regex : \"keep_common|offset|bool\"\n    }, {\n      token : \"keyword.control\",\n      regex : \"by|without|on|ignoring|group_left|group_right\",\n      next  : \"start-label-list-matcher\"\n    }, {\n      token : \"variable\",\n      regex : \"\\\\$[A-Za-z0-9_]+\"\n    }, {\n      token : keywordMapper,\n      regex : \"[a-zA-Z_:][a-zA-Z0-9_:]*\"\n    }, {\n      token : \"paren.lparen\",\n      regex : \"[[(]\"\n    }, {\n      token : \"paren.lparen.label-matcher\",\n      regex : \"{\",\n      next  : \"start-label-matcher\"\n    }, {\n      token : \"paren.rparen\",\n      regex : \"[\\\\])]\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\"\n    }, {\n      token : \"text\",\n      regex : \"\\\\s+\"\n    } ],\n    \"start-label-matcher\" : [ {\n      token : \"entity.name.tag.label-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"keyword.operator.label-matcher\",\n      regex : '=~|=|!~|!='\n    }, {\n      token : \"string.quoted.label-matcher\",\n      regex : '\"[^\"]*\"|\\'[^\\']*\\''\n    }, {\n      token : \"punctuation.operator.label-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\",\n      next  : \"start\"\n    } ],\n    \"start-label-list-matcher\" : [ {\n      token : \"paren.lparen.label-list-matcher\",\n      regex : \"[(]\"\n    }, {\n      token : \"entity.name.tag.label-list-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"punctuation.operator.label-list-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-list-matcher\",\n      regex : \"[)]\",\n      next  : \"start\"\n    } ]\n  };\n\n  this.normalizeRules();\n};\n\noop.inherits(PrometheusHighlightRules, TextHighlightRules);\n\nexports.PrometheusHighlightRules = PrometheusHighlightRules;\n});\n\nace.define(\"ace/mode/prometheus_completions\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\", \"ace/lib/lang\"], function(require, exports, module) {\n\"use strict\";\n\nvar lang = require(\"../lib/lang\");\n\nvar prometheusKeyWords = [\n  \"by\", \"without\", \"keep_common\", \"offset\", \"bool\", \"and\", \"or\", \"unless\", \"ignoring\", \"on\", \"group_left\",\n  \"group_right\", \"count\", \"count_values\", \"min\", \"max\", \"avg\", \"sum\", \"stddev\", \"stdvar\", \"bottomk\", \"topk\", \"quantile\"\n];\n\nvar keyWordsCompletions = prometheusKeyWords.map(function(word) {\n  return {\n    caption: word,\n    value: word,\n    meta: \"keyword\",\n    score: Number.MAX_VALUE\n  }\n});\n\nvar prometheusFunctions = [\n  {\n    name: 'abs()', value: 'abs',\n    def: 'abs(v instant-vector)',\n    docText: 'Returns the input vector with all sample values converted to their absolute value.'\n  },\n  {\n    name: 'absent()', value: 'absent',\n    def: 'absent(v instant-vector)',\n    docText: 'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.'\n  },\n  {\n    name: 'ceil()', value: 'ceil',\n    def: 'ceil(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` up to the nearest integer.'\n  },\n  {\n    name: 'changes()', value: 'changes',\n    def: 'changes(v range-vector)',\n    docText: 'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.'\n  },\n  {\n    name: 'clamp_max()', value: 'clamp_max',\n    def: 'clamp_max(v instant-vector, max scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.'\n  },\n  {\n    name: 'clamp_min()', value: 'clamp_min',\n    def: 'clamp_min(v instant-vector, min scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.'\n  },\n  {\n    name: 'count_scalar()', value: 'count_scalar',\n    def: 'count_scalar(v instant-vector)',\n    docText: 'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.'\n  },\n  {\n    name: 'day_of_month()', value: 'day_of_month',\n    def: 'day_of_month(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.'\n  },\n  {\n    name: 'day_of_week()', value: 'day_of_week',\n    def: 'day_of_week(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.'\n  },\n  {\n    name: 'days_in_month()', value: 'days_in_month',\n    def: 'days_in_month(v=vector(time()) instant-vector)',\n    docText: 'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.'\n  },\n  {\n    name: 'delta()', value: 'delta',\n    def: 'delta(v range-vector)',\n    docText: 'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.'\n  },\n  {\n    name: 'deriv()', value: 'deriv',\n    def: 'deriv(v range-vector)',\n    docText: 'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'drop_common_labels()', value: 'drop_common_labels',\n    def: 'drop_common_labels(instant-vector)',\n    docText: 'Drops all labels that have the same name and value across all series in the input vector.'\n  },\n  {\n    name: 'exp()', value: 'exp',\n    def: 'exp(v instant-vector)',\n    docText: 'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`'\n  },\n  {\n    name: 'floor()', value: 'floor',\n    def: 'floor(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` down to the nearest integer.'\n  },\n  {\n    name: 'histogram_quantile()', value: 'histogram_quantile',\n    def: 'histogram_quantile(φ float, b instant-vector)',\n    docText: 'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.'\n  },\n  {\n    name: 'holt_winters()', value: 'holt_winters',\n    def: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    docText: 'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.'\n  },\n  {\n    name: 'hour()', value: 'hour',\n    def: 'hour(v=vector(time()) instant-vector)',\n    docText: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.'\n  },\n  {\n    name: 'idelta()', value: 'idelta',\n    def: 'idelta(v range-vector)',\n    docText: 'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.'\n  },\n  {\n    name: 'increase()', value: 'increase',\n    def: 'increase(v range-vector)',\n    docText: 'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.'\n  },\n  {\n    name: 'irate()', value: 'irate',\n    def: 'irate(v range-vector)',\n    docText: 'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.'\n  },\n  {\n    name: 'label_replace()', value: 'label_replace',\n    def: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    docText: 'For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn\\'t match then the timeseries is returned unchanged.'\n  },\n  {\n    name: 'ln()', value: 'ln',\n    def: 'ln(v instant-vector)',\n    docText: 'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`'\n  },\n  {\n    name: 'log2()', value: 'log2',\n    def: 'log2(v instant-vector)',\n    docText: 'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'log10()', value: 'log10',\n    def: 'log10(v instant-vector)',\n    docText: 'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'minute()', value: 'minute',\n    def: 'minute(v=vector(time()) instant-vector)',\n    docText: 'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.'\n  },\n  {\n    name: 'month()', value: 'month',\n    def: 'month(v=vector(time()) instant-vector)',\n    docText: 'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.'\n  },\n  {\n    name: 'predict_linear()', value: 'predict_linear',\n    def: 'predict_linear(v range-vector, t scalar)',\n    docText: 'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'rate()', value: 'rate',\n    def: 'rate(v range-vector)',\n    docText: \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\"\n  },\n  {\n    name: 'resets()', value: 'resets',\n    def: 'resets(v range-vector)',\n    docText: 'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.'\n  },\n  {\n    name: 'round()', value: 'round',\n    def: 'round(v instant-vector, to_nearest=1 scalar)',\n    docText: 'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.'\n  },\n  {\n    name: 'scalar()', value: 'scalar',\n    def: 'scalar(v instant-vector)',\n    docText: 'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.'\n  },\n  {\n    name: 'sort()', value: 'sort',\n    def: 'sort(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in ascending order.'\n  },\n  {\n    name: 'sort_desc()', value: 'sort_desc',\n    def: 'sort_desc(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in descending order.'\n  },\n  {\n    name: 'sqrt()', value: 'sqrt',\n    def: 'sqrt(v instant-vector)',\n    docText: 'Calculates the square root of all elements in `v`.'\n  },\n  {\n    name: 'time()', value: 'time',\n    def: 'time()',\n    docText: 'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.'\n  },\n  {\n    name: 'vector()', value: 'vector',\n    def: 'vector(s scalar)',\n    docText: 'Returns the scalar `s` as a vector with no labels.'\n  },\n  {\n    name: 'year()', value: 'year',\n    def: 'year(v=vector(time()) instant-vector)',\n    docText: 'Returns the year for each of the given times in UTC.'\n  },\n  {\n    name: 'avg_over_time()', value: 'avg_over_time',\n    def: 'avg_over_time(range-vector)',\n    docText: 'The average value of all points in the specified interval.'\n  },\n  {\n    name: 'min_over_time()', value: 'min_over_time',\n    def: 'min_over_time(range-vector)',\n    docText: 'The minimum value of all points in the specified interval.'\n  },\n  {\n    name: 'max_over_time()', value: 'max_over_time',\n    def: 'max_over_time(range-vector)',\n    docText: 'The maximum value of all points in the specified interval.'\n  },\n  {\n    name: 'sum_over_time()', value: 'sum_over_time',\n    def: 'sum_over_time(range-vector)',\n    docText: 'The sum of all values in the specified interval.'\n  },\n  {\n    name: 'count_over_time()', value: 'count_over_time',\n    def: 'count_over_time(range-vector)',\n    docText: 'The count of all values in the specified interval.'\n  },\n  {\n    name: 'quantile_over_time()', value: 'quantile_over_time',\n    def: 'quantile_over_time(scalar, range-vector)',\n    docText: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.'\n  },\n  {\n    name: 'stddev_over_time()', value: 'stddev_over_time',\n    def: 'stddev_over_time(range-vector)',\n    docText: 'The population standard deviation of the values in the specified interval.'\n  },\n  {\n    name: 'stdvar_over_time()', value: 'stdvar_over_time',\n    def: 'stdvar_over_time(range-vector)',\n    docText: 'The population standard variance of the values in the specified interval.'\n  },\n];\n\nfunction wrapText(str, len) {\n  len = len || 60;\n  var lines = [];\n  var space_index = 0;\n  var line_start = 0;\n  var next_line_end = len;\n  var line = \"\";\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === ' ') {\n      space_index = i;\n    } else if (i >= next_line_end  && space_index != 0) {\n      line = str.slice(line_start, space_index);\n      lines.push(line);\n      line_start = space_index + 1;\n      next_line_end = i + len;\n      space_index = 0;\n    }\n  }\n  line = str.slice(line_start);\n  lines.push(line);\n  return lines.join(\"&nbsp<br>\");\n}\n\nfunction convertMarkDownTags(text) {\n  text = text.replace(/```(.+)```/, \"<pre>$1</pre>\");\n  text = text.replace(/`([^`]+)`/, \"<code>$1</code>\");\n  return text;\n}\n\nfunction convertToHTML(item) {\n  var docText = lang.escapeHTML(item.docText);\n  docText = convertMarkDownTags(wrapText(docText, 40));\n  return [\n    \"<b>\", lang.escapeHTML(item.def), \"</b>\", \"<hr></hr>\", docText, \"<br>&nbsp\"\n  ].join(\"\");\n}\n\nvar functionsCompletions = prometheusFunctions.map(function(item) {\n  return {\n    caption: item.name,\n    value: item.value,\n    docHTML: convertToHTML(item),\n    meta: \"function\",\n    score: Number.MAX_VALUE\n  };\n});\n\nvar PrometheusCompletions = function() {};\n\n(function() {\n  this.getCompletions = function(state, session, pos, prefix, callback) {\n    var token = session.getTokenAt(pos.row, pos.column);\n    if (token.type === 'entity.name.tag.label-matcher'\n      || token.type === 'string.quoted.label-matcher'\n      || token.type === 'entity.name.tag.label-list-matcher') {\n      return callback(null, []);\n    }\n\n    var completions = keyWordsCompletions.concat(functionsCompletions);\n    callback(null, completions);\n  };\n\n}).call(PrometheusCompletions.prototype);\n\nexports.PrometheusCompletions = PrometheusCompletions;\n});\n\nace.define(\"ace/mode/behaviour/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/behaviour\",\"ace/mode/behaviour/cstyle\",\"ace/token_iterator\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Behaviour = require(\"../behaviour\").Behaviour;\nvar CstyleBehaviour = require(\"./cstyle\").CstyleBehaviour;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\nfunction getWrapped(selection, selected, opening, closing) {\n  var rowDiff = selection.end.row - selection.start.row;\n  return {\n    text: opening + selected + closing,\n    selection: [\n      0,\n      selection.start.column + 1,\n      rowDiff,\n      selection.end.column + (rowDiff ? 0 : 1)\n    ]\n  };\n};\n\nvar PrometheusBehaviour = function () {\n  this.inherit(CstyleBehaviour);\n\n  // Rewrite default CstyleBehaviour for {} braces\n  this.add(\"braces\", \"insertion\", function(state, action, editor, session, text) {\n    if (text == '{') {\n      var selection = editor.getSelectionRange();\n      var selected = session.doc.getTextRange(selection);\n      if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\n        return getWrapped(selection, selected, '{', '}');\n      } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n        return {\n          text: '{}',\n          selection: [1, 1]\n        };\n      }\n    } else if (text == '}') {\n      var cursor = editor.getCursorPosition();\n      var line = session.doc.getLine(cursor.row);\n      var rightChar = line.substring(cursor.column, cursor.column + 1);\n      if (rightChar == '}') {\n        var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});\n        if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n          return {\n            text: '',\n            selection: [1, 1]\n          };\n        }\n      }\n    }\n  });\n\n  this.add(\"braces\", \"deletion\", function(state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '{') {\n      var line = session.doc.getLine(range.start.row);\n      var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n      if (rightChar == '}') {\n        range.end.column++;\n        return range;\n      }\n    }\n  });\n\n}\noop.inherits(PrometheusBehaviour, CstyleBehaviour);\n\nexports.PrometheusBehaviour = PrometheusBehaviour;\n});\n\nace.define(\"ace/mode/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prometheus_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrometheusHighlightRules = require(\"./prometheus_highlight_rules\").PrometheusHighlightRules;\nvar PrometheusCompletions = require(\"./prometheus_completions\").PrometheusCompletions;\nvar PrometheusBehaviour = require(\"./behaviour/prometheus\").PrometheusBehaviour;\n\nvar Mode = function() {\n  this.HighlightRules = PrometheusHighlightRules;\n  this.$behaviour = new PrometheusBehaviour();\n  this.$completer = new PrometheusCompletions();\n  // replace keyWordCompleter\n  this.completer = this.$completer;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n  this.$id = \"ace/mode/prometheus\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/snippets/prometheus\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\n// exports.snippetText = \"# rate\\n\\\n// snippet r\\n\\\n//   rate(${1:metric}[${2:range}])\\n\\\n// \";\n\nexports.snippets = [\n  {\n    \"content\": \"rate(${1:metric}[${2:range}])\",\n    \"name\": \"rate()\",\n    \"scope\": \"prometheus\",\n    \"tabTrigger\": \"r\"\n  }\n];\n\nexports.scope = \"prometheus\";\n});\n","/* Flot plugin for rendering pie charts.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes that each series has a single data value, and that each\nvalue is a positive integer or zero.  Negative numbers don't make sense for a\npie chart, and have unpredictable results.  The values do NOT need to be\npassed in as percentages; the plugin will calculate the total and per-slice\npercentages internally.\n\n* Created by Brian Medendorp\n\n* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars\n\nThe plugin supports these options:\n\n\tseries: {\n\t\tpie: {\n\t\t\tshow: true/false\n\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'\n\t\t\tinnerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect\n\t\t\tstartAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result\n\t\t\ttilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)\n\t\t\toffset: {\n\t\t\t\ttop: integer value to move the pie up or down\n\t\t\t\tleft: integer value to move the pie left or right, or 'auto'\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')\n\t\t\t\twidth: integer pixel width of the stroke\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tshow: true/false, or 'auto'\n\t\t\t\tformatter:  a user-defined function that modifies the text/style of the label text\n\t\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length\n\t\t\t\tbackground: {\n\t\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')\n\t\t\t\t\topacity: 0-1\n\t\t\t\t},\n\t\t\t\tthreshold: 0-1 for the percentage value at which to hide labels (if they're too small)\n\t\t\t},\n\t\t\tcombine: {\n\t\t\t\tthreshold: 0-1 for the percentage value at which to combine slices (if they're too small)\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined\n\t\t\t\tlabel: any text value of what the combined slice should be labeled\n\t\t\t}\n\t\t\thighlight: {\n\t\t\t\topacity: 0-1\n\t\t\t}\n\t\t}\n\t}\n\nMore detail and specific examples can be found in the included HTML file.\n\n*/\n\n(function($) {\n\n\t// Maximum redraw attempts when fitting labels within the plot\n\n\tvar REDRAW_ATTEMPTS = 10;\n\n\t// Factor by which to shrink the pie when fitting labels within the plot\n\n\tvar REDRAW_SHRINK = 0.95;\n\n\tfunction init(plot) {\n\n\t\tvar canvas = null,\n\t\t\ttarget = null,\n\t\t\tmaxRadius = null,\n\t\t\tcenterLeft = null,\n\t\t\tcenterTop = null,\n\t\t\tprocessed = false,\n\t\t\tctx = null;\n\n\t\t// interactive variables\n\n\t\tvar highlights = [];\n\n\t\t// add hook to determine if pie plugin in enabled, and then perform necessary operations\n\n\t\tplot.hooks.processOptions.push(function(plot, options) {\n\t\t\tif (options.series.pie.show) {\n\n\t\t\t\toptions.grid.show = false;\n\n\t\t\t\t// set labels.show\n\n\t\t\t\tif (options.series.pie.label.show == \"auto\") {\n\t\t\t\t\tif (options.legend.show) {\n\t\t\t\t\t\toptions.series.pie.label.show = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.label.show = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set radius\n\n\t\t\t\tif (options.series.pie.radius == \"auto\") {\n\t\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\t\toptions.series.pie.radius = 3/4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.radius = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure sane tilt\n\n\t\t\t\tif (options.series.pie.tilt > 1) {\n\t\t\t\t\toptions.series.pie.tilt = 1;\n\t\t\t\t} else if (options.series.pie.tilt < 0) {\n\t\t\t\t\toptions.series.pie.tilt = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.bindEvents.push(function(plot, eventHolder) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tif (options.grid.hoverable) {\n\t\t\t\t\teventHolder.unbind(\"mousemove\").mousemove(onMouseMove);\n\t\t\t\t}\n\t\t\t\tif (options.grid.clickable) {\n\t\t\t\t\teventHolder.unbind(\"click\").click(onClick);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tprocessDatapoints(plot, series, data, datapoints);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.drawOverlay.push(function(plot, octx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdrawOverlay(plot, octx);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.draw.push(function(plot, newCtx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdraw(plot, newCtx);\n\t\t\t}\n\t\t});\n\n\t\tfunction processDatapoints(plot, series, datapoints) {\n\t\t\tif (!processed)\t{\n\t\t\t\tprocessed = true;\n\t\t\t\tcanvas = plot.getCanvas();\n\t\t\t\ttarget = $(canvas).parent();\n\t\t\t\toptions = plot.getOptions();\n\t\t\t\tplot.setData(combine(plot.getData()));\n\t\t\t}\n\t\t}\n\n\t\tfunction combine(data) {\n\n\t\t\tvar total = 0,\n\t\t\t\tcombined = 0,\n\t\t\t\tnumCombined = 0,\n\t\t\t\tcolor = options.series.pie.combine.color,\n\t\t\t\tnewdata = [];\n\n\t\t\t// Fix up the raw data from Flot, ensuring the data is numeric\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\n\t\t\t\tvar value = data[i].data;\n\n\t\t\t\t// If the data is an array, we'll assume that it's a standard\n\t\t\t\t// Flot x-y pair, and are concerned only with the second value.\n\n\t\t\t\t// Note how we use the original array, rather than creating a\n\t\t\t\t// new one; this is more efficient and preserves any extra data\n\t\t\t\t// that the user may have stored in higher indexes.\n\n\t\t\t\tif ($.isArray(value) && value.length == 1) {\n    \t\t\t\tvalue = value[0];\n\t\t\t\t}\n\n\t\t\t\tif ($.isArray(value)) {\n\t\t\t\t\t// Equivalent to $.isNumeric() but compatible with jQuery < 1.7\n\t\t\t\t\tif (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {\n\t\t\t\t\t\tvalue[1] = +value[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue[1] = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if (!isNaN(parseFloat(value)) && isFinite(value)) {\n\t\t\t\t\tvalue = [1, +value];\n\t\t\t\t} else {\n\t\t\t\t\tvalue = [1, 0];\n\t\t\t\t}\n\n\t\t\t\tdata[i].data = [value];\n\t\t\t}\n\n\t\t\t// Sum up all the slices, so we can calculate percentages for each\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\ttotal += data[i].data[0][1];\n\t\t\t}\n\n\t\t\t// Count the number of slices with percentages below the combine\n\t\t\t// threshold; if it turns out to be just one, we won't combine.\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (value / total <= options.series.pie.combine.threshold) {\n\t\t\t\t\tcombined += value;\n\t\t\t\t\tnumCombined++;\n\t\t\t\t\tif (!color) {\n\t\t\t\t\t\tcolor = data[i].color;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (numCombined < 2 || value / total > options.series.pie.combine.threshold) {\n\t\t\t\t\tnewdata.push({\n\t\t\t\t\t\tdata: [[1, value]],\n\t\t\t\t\t\tcolor: data[i].color,\n\t\t\t\t\t\tlabel: data[i].label,\n\t\t\t\t\t\tangle: value * Math.PI * 2 / total,\n\t\t\t\t\t\tpercent: value / (total / 100)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (numCombined > 1) {\n\t\t\t\tnewdata.push({\n\t\t\t\t\tdata: [[1, combined]],\n\t\t\t\t\tcolor: color,\n\t\t\t\t\tlabel: options.series.pie.combine.label,\n\t\t\t\t\tangle: combined * Math.PI * 2 / total,\n\t\t\t\t\tpercent: combined / (total / 100)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newdata;\n\t\t}\n\n\t\tfunction draw(plot, newCtx) {\n\n\t\t\tif (!target) {\n\t\t\t\treturn; // if no series were passed\n\t\t\t}\n\n\t\t\tvar canvasWidth = plot.getPlaceholder().width(),\n\t\t\t\tcanvasHeight = plot.getPlaceholder().height(),\n\t\t\t\tlegendWidth = target.children().filter(\".legend\").children().width() || 0;\n\n\t\t\tctx = newCtx;\n\n\t\t\t// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!\n\n\t\t\t// When combining smaller slices into an 'other' slice, we need to\n\t\t\t// add a new series.  Since Flot gives plugins no way to modify the\n\t\t\t// list of series, the pie plugin uses a hack where the first call\n\t\t\t// to processDatapoints results in a call to setData with the new\n\t\t\t// list of series, then subsequent processDatapoints do nothing.\n\n\t\t\t// The plugin-global 'processed' flag is used to control this hack;\n\t\t\t// it starts out false, and is set to true after the first call to\n\t\t\t// processDatapoints.\n\n\t\t\t// Unfortunately this turns future setData calls into no-ops; they\n\t\t\t// call processDatapoints, the flag is true, and nothing happens.\n\n\t\t\t// To fix this we'll set the flag back to false here in draw, when\n\t\t\t// all series have been processed, so the next sequence of calls to\n\t\t\t// processDatapoints once again starts out with a slice-combine.\n\t\t\t// This is really a hack; in 0.9 we need to give plugins a proper\n\t\t\t// way to modify series before any processing begins.\n\n\t\t\tprocessed = false;\n\n\t\t\t// calculate maximum radius and center point\n\n\t\t\tmaxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;\n\t\t\tcenterTop = canvasHeight / 2 + options.series.pie.offset.top;\n\t\t\tcenterLeft = canvasWidth / 2;\n\n\t\t\tif (options.series.pie.offset.left == \"auto\") {\n\t\t\t\tif (options.legend.position.match(\"w\")) {\n\t\t\t\t\tcenterLeft += legendWidth / 2;\n\t\t\t\t} else {\n\t\t\t\t\tcenterLeft -= legendWidth / 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcenterLeft += options.series.pie.offset.left;\n\t\t\t}\n\n\t\t\tif (centerLeft < maxRadius) {\n\t\t\t\tcenterLeft = maxRadius;\n\t\t\t} else if (centerLeft > canvasWidth - maxRadius) {\n\t\t\t\tcenterLeft = canvasWidth - maxRadius;\n\t\t\t}\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\tattempts = 0;\n\n\t\t\t// Keep shrinking the pie's radius until drawPie returns true,\n\t\t\t// indicating that all the labels fit, or we try too many times.\n\n\t\t\tdo {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tmaxRadius *= REDRAW_SHRINK;\n\t\t\t\t}\n\t\t\t\tattempts += 1;\n\t\t\t\tclear();\n\t\t\t\tif (options.series.pie.tilt <= 0.8) {\n\t\t\t\t\tdrawShadow();\n\t\t\t\t}\n\t\t\t} while (!drawPie() && attempts < REDRAW_ATTEMPTS)\n\n\t\t\tif (attempts >= REDRAW_ATTEMPTS) {\n\t\t\t\tclear();\n\t\t\t\ttarget.prepend(\"<div class='error'>Could not draw pie with labels contained inside canvas</div>\");\n\t\t\t}\n\n\t\t\tif (plot.setSeries && plot.insertLegend) {\n\t\t\t\tplot.setSeries(slices);\n\t\t\t\tplot.insertLegend();\n\t\t\t}\n\n\t\t\t// we're actually done at this point, just defining internal functions at this point\n\n\t\t\tfunction clear() {\n\t\t\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t\ttarget.children().filter(\".pieLabel, .pieLabelBackground\").remove();\n\t\t\t}\n\n\t\t\tfunction drawShadow() {\n\n\t\t\t\tvar shadowLeft = options.series.pie.shadow.left;\n\t\t\t\tvar shadowTop = options.series.pie.shadow.top;\n\t\t\t\tvar edge = 10;\n\t\t\t\tvar alpha = options.series.pie.shadow.alpha;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\tif (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {\n\t\t\t\t\treturn;\t// shadow would be outside canvas, so don't draw it\n\t\t\t\t}\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(shadowLeft,shadowTop);\n\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t\tctx.fillStyle = \"#000\";\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\n\t\t\t\t//radius -= edge;\n\n\t\t\t\tfor (var i = 1; i <= edge; i++) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, false);\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tradius -= i;\n\t\t\t\t}\n\n\t\t\t\tctx.restore();\n\t\t\t}\n\n\t\t\tfunction drawPie() {\n\n\t\t\t\tvar startAngle = Math.PI * options.series.pie.startAngle;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\t\t\t\t//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera\n\n\t\t\t\t// draw slices\n\n\t\t\t\tctx.save();\n\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\tslices[i].startAngle = currentAngle;\n\t\t\t\t\tdrawSlice(slices[i].angle, slices[i].color, true);\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\n\t\t\t\t// draw slice outlines\n\n\t\t\t\tif (options.series.pie.stroke.width > 0) {\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.lineWidth = options.series.pie.stroke.width;\n\t\t\t\t\tcurrentAngle = startAngle;\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tdrawSlice(slices[i].angle, options.series.pie.stroke.color, false);\n\t\t\t\t\t}\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\n\t\t\t\t// draw donut hole\n\n\t\t\t\tdrawDonutHole(ctx);\n\n\t\t\t\tctx.restore();\n\n\t\t\t\t// Draw the labels, returning true if they fit within the plot\n\n\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\treturn drawLabels();\n\t\t\t\t} else return true;\n\n\t\t\t\tfunction drawSlice(angle, color, fill) {\n\n\t\t\t\t\tif (angle <= 0 || isNaN(angle)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fillStyle = color;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.strokeStyle = color;\n\t\t\t\t\t\tctx.lineJoin = \"round\";\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tif (Math.abs(angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t}\n\n\t\t\t\t\t//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\t//ctx.rotate(angle); // This doesn't work properly in Opera\n\t\t\t\t\tcurrentAngle += angle;\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction drawLabels() {\n\n\t\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\t\tvar radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;\n\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tif (slices[i].percent >= options.series.pie.label.threshold * 100) {\n\t\t\t\t\t\t\tif (!drawLabel(slices[i], currentAngle, i)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAngle += slices[i].angle;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t\tfunction drawLabel(slice, startAngle, index) {\n\n\t\t\t\t\t\tif (slice.data[0][1] == 0) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// format label text\n\n\t\t\t\t\t\tvar lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;\n\n\t\t\t\t\t\tif (lf) {\n\t\t\t\t\t\t\ttext = lf(slice.label, slice);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttext = slice.label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (plf) {\n\t\t\t\t\t\t\ttext = plf(text, slice);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar halfAngle = ((startAngle + slice.angle) + startAngle) / 2;\n\t\t\t\t\t\tvar x = centerLeft + Math.round(Math.cos(halfAngle) * radius);\n\t\t\t\t\t\tvar y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;\n\n\t\t\t\t\t\tvar html = \"<span class='pieLabel' id='pieLabel\" + index + \"' style='position:absolute;top:\" + y + \"px;left:\" + x + \"px;'>\" + text + \"</span>\";\n\t\t\t\t\t\ttarget.append(html);\n\n\t\t\t\t\t\tvar label = target.children(\"#pieLabel\" + index);\n\t\t\t\t\t\tvar labelTop = (y - label.height() / 2);\n\t\t\t\t\t\tvar labelLeft = (x - label.width() / 2);\n\n\t\t\t\t\t\tlabel.css(\"top\", labelTop);\n\t\t\t\t\t\tlabel.css(\"left\", labelLeft);\n\n\t\t\t\t\t\t// check to make sure that the label is not outside the canvas\n\n\t\t\t\t\t\tif (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.series.pie.label.background.opacity != 0) {\n\n\t\t\t\t\t\t\t// put in the transparent background separately to avoid blended labels and label boxes\n\n\t\t\t\t\t\t\tvar c = options.series.pie.label.background.color;\n\n\t\t\t\t\t\t\tif (c == null) {\n\t\t\t\t\t\t\t\tc = slice.color;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar pos = \"top:\" + labelTop + \"px;left:\" + labelLeft + \"px;\";\n\t\t\t\t\t\t\t$(\"<div class='pieLabelBackground' style='position:absolute;width:\" + label.width() + \"px;height:\" + label.height() + \"px;\" + pos + \"background-color:\" + c + \";'></div>\")\n\t\t\t\t\t\t\t\t.css(\"opacity\", options.series.pie.label.background.opacity)\n\t\t\t\t\t\t\t\t.insertBefore(label);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} // end individual label function\n\t\t\t\t} // end drawLabels function\n\t\t\t} // end drawPie function\n\t\t} // end draw function\n\n\t\t// Placed here because it needs to be accessed from multiple locations\n\n\t\tfunction drawDonutHole(layer) {\n\t\t\tif (options.series.pie.innerRadius > 0) {\n\n\t\t\t\t// subtract the center\n\n\t\t\t\tlayer.save();\n\t\t\t\tvar innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;\n\t\t\t\tlayer.globalCompositeOperation = \"destination-out\"; // this does not work with excanvas, but it will fall back to using the stroke color\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.fillStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.fill();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// add inner stroke\n\n\t\t\t\tlayer.save();\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.strokeStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.stroke();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.\n\t\t\t}\n\t\t}\n\n\t\t//-- Additional Interactive related functions --\n\n\t\tfunction isPointInPoly(poly, pt) {\n\t\t\tfor(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n\t\t\t\t((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))\n\t\t\t\t&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])\n\t\t\t\t&& (c = !c);\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction findNearbySlice(mouseX, mouseY) {\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\toptions = plot.getOptions(),\n\t\t\t\tradius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,\n\t\t\t\tx, y;\n\n\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\n\t\t\t\tvar s = slices[i];\n\n\t\t\t\tif (s.pie.show) {\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t//ctx.scale(1, options.series.pie.tilt);\t// this actually seems to break everything when here.\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tx = mouseX - centerLeft;\n\t\t\t\t\ty = mouseY - centerTop;\n\n\t\t\t\t\tif (ctx.isPointInPath) {\n\t\t\t\t\t\tif (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// excanvas for IE doesn;t support isPointInPath, this is a workaround.\n\n\t\t\t\t\t\tvar p1X = radius * Math.cos(s.startAngle),\n\t\t\t\t\t\t\tp1Y = radius * Math.sin(s.startAngle),\n\t\t\t\t\t\t\tp2X = radius * Math.cos(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp2Y = radius * Math.sin(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp3X = radius * Math.cos(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp3Y = radius * Math.sin(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp4X = radius * Math.cos(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp5X = radius * Math.cos(s.startAngle + s.angle),\n\t\t\t\t\t\t\tp5Y = radius * Math.sin(s.startAngle + s.angle),\n\t\t\t\t\t\t\tarrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],\n\t\t\t\t\t\t\tarrPoint = [x, y];\n\n\t\t\t\t\t\t// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?\n\n\t\t\t\t\t\tif (isPointInPoly(arrPoly, arrPoint)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction onMouseMove(e) {\n\t\t\ttriggerClickHoverEvent(\"plothover\", e);\n\t\t}\n\n\t\tfunction onClick(e) {\n\t\t\ttriggerClickHoverEvent(\"plotclick\", e);\n\t\t}\n\n\t\t// trigger click or hover event (they send the same parameters so we share their code)\n\n\t\tfunction triggerClickHoverEvent(eventname, e) {\n\n\t\t\tvar offset = plot.offset();\n\t\t\tvar canvasX = parseInt(e.pageX - offset.left);\n\t\t\tvar canvasY =  parseInt(e.pageY - offset.top);\n\t\t\tvar item = findNearbySlice(canvasX, canvasY);\n\n\t\t\tif (options.grid.autoHighlight) {\n\n\t\t\t\t// clear auto-highlights\n\n\t\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\t\tvar h = highlights[i];\n\t\t\t\t\tif (h.auto == eventname && !(item && h.series == item.series)) {\n\t\t\t\t\t\tunhighlight(h.series);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// highlight the slice\n\n\t\t\tif (item) {\n\t\t\t\thighlight(item.series, eventname);\n\t\t\t}\n\n\t\t\t// trigger any hover bind events\n\n\t\t\tvar pos = { pageX: e.pageX, pageY: e.pageY };\n\t\t\ttarget.trigger(eventname, [pos, item]);\n\t\t}\n\n\t\tfunction highlight(s, auto) {\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i == -1) {\n\t\t\t\thighlights.push({ series: s, auto: auto });\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t} else if (!auto) {\n\t\t\t\thighlights[i].auto = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction unhighlight(s) {\n\t\t\tif (s == null) {\n\t\t\t\thighlights = [];\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i != -1) {\n\t\t\t\thighlights.splice(i, 1);\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\t\t}\n\n\t\tfunction indexOfHighlight(s) {\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tvar h = highlights[i];\n\t\t\t\tif (h.series == s)\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tfunction drawOverlay(plot, octx) {\n\n\t\t\tvar options = plot.getOptions();\n\n\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\toctx.save();\n\t\t\toctx.translate(centerLeft, centerTop);\n\t\t\toctx.scale(1, options.series.pie.tilt);\n\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tdrawHighlight(highlights[i].series);\n\t\t\t}\n\n\t\t\tdrawDonutHole(octx);\n\n\t\t\toctx.restore();\n\n\t\t\tfunction drawHighlight(series) {\n\n\t\t\t\tif (series.angle <= 0 || isNaN(series.angle)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();\n\t\t\t\toctx.fillStyle = \"rgba(255, 255, 255, \" + options.series.pie.highlight.opacity + \")\"; // this is temporary until we have access to parseColor\n\t\t\t\toctx.beginPath();\n\t\t\t\tif (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\toctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t}\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);\n\t\t\t\toctx.closePath();\n\t\t\t\toctx.fill();\n\t\t\t}\n\t\t}\n\t} // end init (plugin body)\n\n\t// define pie specific options and their default values\n\n\tvar options = {\n\t\tseries: {\n\t\t\tpie: {\n\t\t\t\tshow: false,\n\t\t\t\tradius: \"auto\",\t// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\tinnerRadius: 0, /* for donut */\n\t\t\t\tstartAngle: 3/2,\n\t\t\t\ttilt: 1,\n\t\t\t\tshadow: {\n\t\t\t\t\tleft: 5,\t// shadow left offset\n\t\t\t\t\ttop: 15,\t// shadow top offset\n\t\t\t\t\talpha: 0.02\t// shadow alpha\n\t\t\t\t},\n\t\t\t\toffset: {\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: \"auto\"\n\t\t\t\t},\n\t\t\t\tstroke: {\n\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t\twidth: 1\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: \"auto\",\n\t\t\t\t\tformatter: function(label, slice) {\n\t\t\t\t\t\treturn \"<div style='font-size:x-small;text-align:center;padding:2px;color:\" + slice.color + \";'>\" + label + \"<br/>\" + Math.round(slice.percent) + \"%</div>\";\n\t\t\t\t\t},\t// formatter function\n\t\t\t\t\tradius: 1,\t// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\t\tbackground: {\n\t\t\t\t\t\tcolor: null,\n\t\t\t\t\t\topacity: 0\n\t\t\t\t\t},\n\t\t\t\t\tthreshold: 0\t// percentage at which to hide the label (i.e. the slice is too narrow)\n\t\t\t\t},\n\t\t\t\tcombine: {\n\t\t\t\t\tthreshold: -1,\t// percentage at which to combine little slices into one larger slice\n\t\t\t\t\tcolor: null,\t// color to give the new slice (auto-generated if null)\n\t\t\t\t\tlabel: \"Other\"\t// label to give the new slice\n\t\t\t\t},\n\t\t\t\thighlight: {\n\t\t\t\t\t//color: \"#fff\",\t\t// will add this functionality once parseColor is available\n\t\t\t\t\topacity: 0.5\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: \"pie\",\n\t\tversion: \"1.1\"\n\t});\n\n})(jQuery);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\n\nexport class AnnotationsEditorCtrl {\n  mode: any;\n  datasources: any;\n  annotations: any;\n  currentAnnotation: any;\n  currentDatasource: any;\n  currentIsNew: any;\n\n  annotationDefaults: any = {\n    name: '',\n    datasource: null,\n    iconColor: 'rgba(255, 96, 96, 1)',\n    enable: true,\n    showIn: 0,\n    hide: false,\n  };\n\n  showOptions: any = [{ text: 'All Panels', value: 0 }, { text: 'Specific Panels', value: 1 }];\n\n  /** @ngInject */\n  constructor($scope, private datasourceSrv) {\n    $scope.ctrl = this;\n\n    this.mode = 'list';\n    this.datasources = datasourceSrv.getAnnotationSources();\n    this.annotations = $scope.dashboard.annotations.list;\n    this.reset();\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  datasourceChanged() {\n    return this.datasourceSrv.get(this.currentAnnotation.datasource).then(ds => {\n      this.currentDatasource = ds;\n    });\n  }\n\n  edit(annotation) {\n    this.currentAnnotation = annotation;\n    this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;\n    this.currentIsNew = false;\n    this.datasourceChanged();\n    this.mode = 'edit';\n    $('.tooltip.in').remove();\n  }\n\n  reset() {\n    this.currentAnnotation = angular.copy(this.annotationDefaults);\n    this.currentAnnotation.datasource = this.datasources[0].name;\n    this.currentIsNew = true;\n    this.datasourceChanged();\n  }\n\n  update() {\n    this.reset();\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.reset();\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  move(index, dir) {\n    _.move(this.annotations, index, index + dir);\n  }\n\n  add() {\n    this.annotations.push(this.currentAnnotation);\n    this.reset();\n    this.mode = 'list';\n  }\n\n  removeAnnotation(annotation) {\n    const index = _.indexOf(this.annotations, annotation);\n    this.annotations.splice(index, 1);\n  }\n\n  onColorChange(newColor) {\n    this.currentAnnotation.iconColor = newColor;\n  }\n}\n\ncoreModule.controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);\n","import _ from 'lodash';\n\n/**\n * This function converts annotation events into set\n * of single events and regions (event consist of two)\n * @param annotations\n * @param options\n */\nexport function makeRegions(annotations, options) {\n  const [regionEvents, singleEvents] = _.partition(annotations, 'regionId');\n  const regions = getRegions(regionEvents, options.range);\n  annotations = _.concat(regions, singleEvents);\n  return annotations;\n}\n\nfunction getRegions(events, range) {\n  const regionEvents = _.filter(events, event => {\n    return event.regionId;\n  });\n  let regions = _.groupBy(regionEvents, 'regionId');\n  regions = _.compact(\n    _.map(regions, regionEvents => {\n      const regionObj = _.head(regionEvents);\n      if (regionEvents && regionEvents.length > 1) {\n        regionObj.timeEnd = regionEvents[1].time;\n        regionObj.isRegion = true;\n        return regionObj;\n      } else {\n        if (regionEvents && regionEvents.length) {\n          // Don't change proper region object\n          if (!regionObj.time || !regionObj.timeEnd) {\n            // This is cut region\n            if (isStartOfRegion(regionObj)) {\n              regionObj.timeEnd = range.to.valueOf() - 1;\n            } else {\n              // Start time = null\n              regionObj.timeEnd = regionObj.time;\n              regionObj.time = range.from.valueOf() + 1;\n            }\n            regionObj.isRegion = true;\n          }\n\n          return regionObj;\n        }\n      }\n    })\n  );\n\n  return regions;\n}\n\nfunction isStartOfRegion(event): boolean {\n  return event.id && event.id === event.regionId;\n}\n\nexport function dedupAnnotations(annotations) {\n  let dedup = [];\n\n  // Split events by annotationId property existence\n  const events = _.partition(annotations, 'id');\n\n  const eventsById = _.groupBy(events[0], 'id');\n  dedup = _.map(eventsById, eventGroup => {\n    if (eventGroup.length > 1 && !_.every(eventGroup, isPanelAlert)) {\n      // Get first non-panel alert\n      return _.find(eventGroup, event => {\n        return event.eventType !== 'panel-alert';\n      });\n    } else {\n      return _.head(eventGroup);\n    }\n  });\n\n  dedup = _.concat(dedup, events[1]);\n  return dedup;\n}\n\nfunction isPanelAlert(event) {\n  return event.eventType === 'panel-alert';\n}\n","import './editor_ctrl';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { makeRegions, dedupAnnotations } from './events_processing';\n\nexport class AnnotationsSrv {\n  globalAnnotationsPromise: any;\n  alertStatesPromise: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private datasourceSrv, private backendSrv, private timeSrv) {\n    $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);\n    $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);\n  }\n\n  clearCache() {\n    this.globalAnnotationsPromise = null;\n    this.alertStatesPromise = null;\n  }\n\n  getAnnotations(options) {\n    return this.$q\n      .all([this.getGlobalAnnotations(options), this.getAlertStates(options)])\n      .then(results => {\n        // combine the annotations and flatten results\n        let annotations = _.flattenDeep(results[0]);\n\n        // filter out annotations that do not belong to requesting panel\n        annotations = _.filter(annotations, item => {\n          // if event has panel id and query is of type dashboard then panel and requesting panel id must match\n          if (item.panelId && item.source.type === 'dashboard') {\n            return item.panelId === options.panel.id;\n          }\n          return true;\n        });\n\n        annotations = dedupAnnotations(annotations);\n        annotations = makeRegions(annotations, options);\n\n        // look for alert state for this panel\n        const alertState = _.find(results[1], { panelId: options.panel.id });\n\n        return {\n          annotations: annotations,\n          alertState: alertState,\n        };\n      })\n      .catch(err => {\n        if (!err.message && err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        console.log('AnnotationSrv.query error', err);\n        this.$rootScope.appEvent('alert-error', ['Annotation Query Failed', err.message || err]);\n        return [];\n      });\n  }\n\n  getAlertStates(options) {\n    if (!options.dashboard.id) {\n      return this.$q.when([]);\n    }\n\n    // ignore if no alerts\n    if (options.panel && !options.panel.alert) {\n      return this.$q.when([]);\n    }\n\n    if (options.range.raw.to !== 'now') {\n      return this.$q.when([]);\n    }\n\n    if (this.alertStatesPromise) {\n      return this.alertStatesPromise;\n    }\n\n    this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {\n      dashboardId: options.dashboard.id,\n    });\n    return this.alertStatesPromise;\n  }\n\n  getGlobalAnnotations(options) {\n    const dashboard = options.dashboard;\n\n    if (this.globalAnnotationsPromise) {\n      return this.globalAnnotationsPromise;\n    }\n\n    const range = this.timeSrv.timeRange();\n    const promises = [];\n\n    for (const annotation of dashboard.annotations.list) {\n      if (!annotation.enable) {\n        continue;\n      }\n\n      if (annotation.snapshotData) {\n        return this.translateQueryResult(annotation, annotation.snapshotData);\n      }\n\n      promises.push(\n        this.datasourceSrv\n          .get(annotation.datasource)\n          .then(datasource => {\n            // issue query against data source\n            return datasource.annotationQuery({\n              range: range,\n              rangeRaw: range.raw,\n              annotation: annotation,\n              dashboard: dashboard,\n            });\n          })\n          .then(results => {\n            // store response in annotation object if this is a snapshot call\n            if (dashboard.snapshot) {\n              annotation.snapshotData = angular.copy(results);\n            }\n            // translate result\n            return this.translateQueryResult(annotation, results);\n          })\n      );\n    }\n\n    this.globalAnnotationsPromise = this.$q.all(promises);\n    return this.globalAnnotationsPromise;\n  }\n\n  saveAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.post('/api/annotations', annotation);\n  }\n\n  updateAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.put(`/api/annotations/${annotation.id}`, annotation);\n  }\n\n  deleteAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    let deleteUrl = `/api/annotations/${annotation.id}`;\n    if (annotation.isRegion) {\n      deleteUrl = `/api/annotations/region/${annotation.regionId}`;\n    }\n\n    return this.backendSrv.delete(deleteUrl);\n  }\n\n  translateQueryResult(annotation, results) {\n    // if annotation has snapshotData\n    // make clone and remove it\n    if (annotation.snapshotData) {\n      annotation = angular.copy(annotation);\n      delete annotation.snapshotData;\n    }\n\n    for (const item of results) {\n      item.source = annotation;\n    }\n    return results;\n  }\n}\n\ncoreModule.service('annotationsSrv', AnnotationsSrv);\n","import _ from 'lodash';\nimport moment from 'moment';\nimport { coreModule } from 'app/core/core';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\n\nexport class EventEditorCtrl {\n  panelCtrl: MetricsPanelCtrl;\n  event: AnnotationEvent;\n  timeRange: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated: string;\n\n  /** @ngInject */\n  constructor(private annotationsSrv) {\n    this.event.panelId = this.panelCtrl.panel.id;\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time);\n  }\n\n  save() {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = _.cloneDeep(this.event);\n    saveModel.time = saveModel.time.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    if (saveModel.id) {\n      this.annotationsSrv\n        .updateAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    } else {\n      this.annotationsSrv\n        .saveAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    }\n  }\n\n  delete() {\n    return this.annotationsSrv\n      .deleteAnnotationEvent(this.event)\n      .then(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      })\n      .catch(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      });\n  }\n}\n\nfunction tryEpochToMoment(timestamp) {\n  if (timestamp && _.isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return moment(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","export class AnnotationEvent {\n  dashboardId: number;\n  panelId: number;\n  userId: number;\n  time: any;\n  timeEnd: any;\n  isRegion: boolean;\n  text: string;\n  type: string;\n  tags: string;\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport tinycolor from 'tinycolor2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\nimport {\n  OK_COLOR,\n  ALERTING_COLOR,\n  NO_DATA_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  REGION_FILL_ALPHA,\n} from 'app/core/utils/colors';\n\nexport class EventManager {\n  event: AnnotationEvent;\n  editorOpen: boolean;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range) {\n    if (!this.event) {\n      this.event = new AnnotationEvent();\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = moment(range.from);\n    this.event.isRegion = false;\n    if (range.to) {\n      this.event.timeEnd = moment(range.to);\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event, elem?) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations, flotOptions) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time.valueOf(),\n            timeEnd: this.event.timeEnd.valueOf(),\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time.valueOf(),\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.source.name;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.source.name]) {\n          types[item.source.name] = {\n            color: item.source.iconColor,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: _.keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events) {\n  return _.filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions, flotOptions) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  _.each(regions, region => {\n    if (region.source) {\n      fillColor = region.source.iconColor || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\nimport alertDef from '../alerting/state/alertDef';\n\n/** @ngInject */\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\n  function sanitizeString(str) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return _.escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope, element) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"icon-gf ${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (_.isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${\n          event.avatarUrl\n        }\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard.meta.canEdit) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { AnnotationsSrv } from './annotations_srv';\nimport { eventEditor } from './event_editor';\nimport { EventManager } from './event_manager';\nimport { AnnotationEvent } from './event';\nimport { annotationTooltipDirective } from './annotation_tooltip';\n\nexport { AnnotationsSrv, eventEditor, EventManager, AnnotationEvent, annotationTooltipDirective };\n","import kbn from 'app/core/utils/kbn';\nimport { assignModelProperties } from 'app/core/utils/model_utils';\n\nexport interface Variable {\n  setValue(option);\n  updateOptions();\n  dependsOn(variable);\n  setValueFromUrl(urlValue);\n  getValueForUrl();\n  getSaveModel();\n}\n\nexport let variableTypes = {};\nexport { assignModelProperties };\n\nexport function containsVariable(...args: any[]) {\n  let variableName = args[args.length - 1];\n  let str = args[0] || '';\n\n  for (let i = 1; i < args.length - 1; i++) {\n    str += ' ' + args[i] || '';\n  }\n\n  variableName = kbn.regexEscape(variableName);\n  const findVarRegex = new RegExp('\\\\$(' + variableName + ')(?:\\\\W|$)|\\\\[\\\\[(' + variableName + ')\\\\]\\\\]', 'g');\n  const match = findVarRegex.exec(str);\n  return match !== null;\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport appEvents from 'app/core/app_events';\n\nexport class VariableEditorCtrl {\n  /** @ngInject */\n  constructor($scope, datasourceSrv, variableSrv, templateSrv) {\n    $scope.variableTypes = variableTypes;\n    $scope.ctrl = {};\n    $scope.namePattern = /^(?!__).*$/;\n    $scope._ = _;\n    $scope.optionsLimit = 20;\n\n    $scope.refreshOptions = [\n      { value: 0, text: 'Never' },\n      { value: 1, text: 'On Dashboard Load' },\n      { value: 2, text: 'On Time Range Change' },\n    ];\n\n    $scope.sortOptions = [\n      { value: 0, text: 'Disabled' },\n      { value: 1, text: 'Alphabetical (asc)' },\n      { value: 2, text: 'Alphabetical (desc)' },\n      { value: 3, text: 'Numerical (asc)' },\n      { value: 4, text: 'Numerical (desc)' },\n      { value: 5, text: 'Alphabetical (case-insensitive, asc)' },\n      { value: 6, text: 'Alphabetical (case-insensitive, desc)' },\n    ];\n\n    $scope.hideOptions = [{ value: 0, text: '' }, { value: 1, text: 'Label' }, { value: 2, text: 'Variable' }];\n\n    $scope.init = () => {\n      $scope.mode = 'list';\n\n      $scope.variables = variableSrv.variables;\n      $scope.reset();\n\n      $scope.$watch('mode', val => {\n        if (val === 'new') {\n          $scope.reset();\n        }\n      });\n    };\n\n    $scope.setMode = mode => {\n      $scope.mode = mode;\n    };\n\n    $scope.add = () => {\n      if ($scope.isValid()) {\n        variableSrv.addVariable($scope.current);\n        $scope.update();\n      }\n    };\n\n    $scope.isValid = () => {\n      if (!$scope.ctrl.form.$valid) {\n        return false;\n      }\n\n      if (!$scope.current.name.match(/^\\w+$/)) {\n        appEvents.emit('alert-warning', ['Validation', 'Only word and digit characters are allowed in variable names']);\n        return false;\n      }\n\n      const sameName = _.find($scope.variables, { name: $scope.current.name });\n      if (sameName && sameName !== $scope.current) {\n        appEvents.emit('alert-warning', ['Validation', 'Variable with the same name already exists']);\n        return false;\n      }\n\n      if (\n        $scope.current.type === 'query' &&\n        $scope.current.query.match(new RegExp('\\\\$' + $scope.current.name + '(/| |$)'))\n      ) {\n        appEvents.emit('alert-warning', [\n          'Validation',\n          'Query cannot contain a reference to itself. Variable: $' + $scope.current.name,\n        ]);\n        return false;\n      }\n\n      return true;\n    };\n\n    $scope.validate = () => {\n      $scope.infoText = '';\n      if ($scope.current.type === 'adhoc' && $scope.current.datasource !== null) {\n        $scope.infoText = 'Adhoc filters are applied automatically to all queries that target this datasource';\n        datasourceSrv.get($scope.current.datasource).then(ds => {\n          if (!ds.getTagKeys) {\n            $scope.infoText = 'This datasource does not support adhoc filters yet.';\n          }\n        });\n      }\n    };\n\n    $scope.runQuery = () => {\n      $scope.optionsLimit = 20;\n      return variableSrv.updateOptions($scope.current).catch(err => {\n        if (err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        appEvents.emit('alert-error', ['Templating', 'Template variables could not be initialized: ' + err.message]);\n      });\n    };\n\n    $scope.edit = variable => {\n      $scope.current = variable;\n      $scope.currentIsNew = false;\n      $scope.mode = 'edit';\n      $scope.validate();\n    };\n\n    $scope.duplicate = variable => {\n      const clone = _.cloneDeep(variable.getSaveModel());\n      $scope.current = variableSrv.createVariableFromModel(clone);\n      $scope.current.name = 'copy_of_' + variable.name;\n      variableSrv.addVariable($scope.current);\n    };\n\n    $scope.update = () => {\n      if ($scope.isValid()) {\n        $scope.runQuery().then(() => {\n          $scope.reset();\n          $scope.mode = 'list';\n          templateSrv.updateTemplateData();\n        });\n      }\n    };\n\n    $scope.reset = () => {\n      $scope.currentIsNew = true;\n      $scope.current = variableSrv.createVariableFromModel({ type: 'query' });\n\n      // this is done here in case a new data source type variable was added\n      $scope.datasources = _.filter(datasourceSrv.getMetricSources(), ds => {\n        return !ds.meta.mixed && ds.value !== null;\n      });\n\n      $scope.datasourceTypes = _($scope.datasources)\n        .uniqBy('meta.id')\n        .map(ds => {\n          return { text: ds.meta.name, value: ds.meta.id };\n        })\n        .value();\n    };\n\n    $scope.typeChanged = function() {\n      const old = $scope.current;\n      $scope.current = variableSrv.createVariableFromModel({\n        type: $scope.current.type,\n      });\n      $scope.current.name = old.name;\n      $scope.current.hide = old.hide;\n      $scope.current.label = old.label;\n\n      const oldIndex = _.indexOf(this.variables, old);\n      if (oldIndex !== -1) {\n        this.variables[oldIndex] = $scope.current;\n      }\n\n      $scope.validate();\n    };\n\n    $scope.removeVariable = variable => {\n      variableSrv.removeVariable(variable);\n    };\n\n    $scope.showMoreOptions = () => {\n      $scope.optionsLimit += 20;\n    };\n  }\n}\n\ncoreModule.controller('VariableEditorCtrl', VariableEditorCtrl);\n","import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\n\nfunction luceneEscape(value) {\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n\nexport class TemplateSrv {\n  variables: any[];\n\n  /*\n   * This regex matches 3 types of variable reference with an optional format specifier\n   * \\$(\\w+)                          $var1\n   * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n   * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n   */\n  private regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\n  private index = {};\n  private grafanaVariables = {};\n  private builtIns = {};\n\n  constructor() {\n    this.builtIns['__interval'] = { text: '1s', value: '1s' };\n    this.builtIns['__interval_ms'] = { text: '100', value: '100' };\n  }\n\n  init(variables) {\n    this.variables = variables;\n    this.updateTemplateData();\n  }\n\n  updateTemplateData() {\n    this.index = {};\n\n    for (let i = 0; i < this.variables.length; i++) {\n      const variable = this.variables[i];\n\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\n        continue;\n      }\n\n      this.index[variable.name] = variable;\n    }\n  }\n\n  variableInitialized(variable) {\n    this.index[variable.name] = variable;\n  }\n\n  getAdhocFilters(datasourceName) {\n    let filters = [];\n\n    if (this.variables) {\n      for (let i = 0; i < this.variables.length; i++) {\n        const variable = this.variables[i];\n        if (variable.type !== 'adhoc') {\n          continue;\n        }\n\n        // null is the \"default\" datasource\n        if (variable.datasource === null || variable.datasource === datasourceName) {\n          filters = filters.concat(variable.filters);\n        } else if (variable.datasource.indexOf('$') === 0) {\n          if (this.replace(variable.datasource) === datasourceName) {\n            filters = filters.concat(variable.filters);\n          }\n        }\n      }\n    }\n\n    return filters;\n  }\n\n  luceneFormat(value) {\n    if (typeof value === 'string') {\n      return luceneEscape(value);\n    }\n    if (value instanceof Array && value.length === 0) {\n      return '__empty__';\n    }\n    const quotedValues = _.map(value, val => {\n      return '\"' + luceneEscape(val) + '\"';\n    });\n    return '(' + quotedValues.join(' OR ') + ')';\n  }\n\n  formatValue(value, format, variable) {\n    // for some scopedVars there is no variable\n    variable = variable || {};\n\n    if (typeof format === 'function') {\n      return format(value, variable, this.formatValue);\n    }\n\n    switch (format) {\n      case 'regex': {\n        if (typeof value === 'string') {\n          return kbn.regexEscape(value);\n        }\n\n        const escapedValues = _.map(value, kbn.regexEscape);\n        if (escapedValues.length === 1) {\n          return escapedValues[0];\n        }\n        return '(' + escapedValues.join('|') + ')';\n      }\n      case 'lucene': {\n        return this.luceneFormat(value);\n      }\n      case 'pipe': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return value.join('|');\n      }\n      case 'distributed': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return this.distributeVariable(value, variable.name);\n      }\n      case 'csv': {\n        if (_.isArray(value)) {\n          return value.join(',');\n        }\n        return value;\n      }\n      default: {\n        if (_.isArray(value)) {\n          return '{' + value.join(',') + '}';\n        }\n        return value;\n      }\n    }\n  }\n\n  setGrafanaVariable(name, value) {\n    this.grafanaVariables[name] = value;\n  }\n\n  getVariableName(expression) {\n    this.regex.lastIndex = 0;\n    const match = this.regex.exec(expression);\n    if (!match) {\n      return null;\n    }\n    return match[1] || match[2];\n  }\n\n  variableExists(expression) {\n    const name = this.getVariableName(expression);\n    return name && this.index[name] !== void 0;\n  }\n\n  highlightVariablesAsHtml(str) {\n    if (!str || !_.isString(str)) {\n      return str;\n    }\n\n    str = _.escape(str);\n    this.regex.lastIndex = 0;\n    return str.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (this.index[var1 || var2 || var3] || this.builtIns[var1 || var2 || var3]) {\n        return '<span class=\"template-variable\">' + match + '</span>';\n      }\n      return match;\n    });\n  }\n\n  getAllValue(variable) {\n    if (variable.allValue) {\n      return variable.allValue;\n    }\n    const values = [];\n    for (let i = 1; i < variable.options.length; i++) {\n      values.push(variable.options[i].value);\n    }\n    return values;\n  }\n\n  replace(target, scopedVars?, format?) {\n    if (!target) {\n      return target;\n    }\n\n    let variable, systemValue, value, fmt;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\n      variable = this.index[var1 || var2 || var3];\n      fmt = fmt2 || fmt3 || format;\n      if (scopedVars) {\n        value = scopedVars[var1 || var2 || var3];\n        if (value) {\n          return this.formatValue(value.value, fmt, variable);\n        }\n      }\n\n      if (!variable) {\n        return match;\n      }\n\n      systemValue = this.grafanaVariables[variable.current.value];\n      if (systemValue) {\n        return this.formatValue(systemValue, fmt, variable);\n      }\n\n      value = variable.current.value;\n      if (this.isAllValue(value)) {\n        value = this.getAllValue(variable);\n        // skip formatting of custom all values\n        if (variable.allValue) {\n          return this.replace(value);\n        }\n      }\n\n      const res = this.formatValue(value, fmt, variable);\n      return res;\n    });\n  }\n\n  isAllValue(value) {\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\n  }\n\n  replaceWithText(target, scopedVars) {\n    if (!target) {\n      return target;\n    }\n\n    let variable;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (scopedVars) {\n        const option = scopedVars[var1 || var2 || var3];\n        if (option) {\n          return option.text;\n        }\n      }\n\n      variable = this.index[var1 || var2 || var3];\n      if (!variable) {\n        return match;\n      }\n\n      return this.grafanaVariables[variable.current.value] || variable.current.text;\n    });\n  }\n\n  fillVariableValuesForUrl(params, scopedVars) {\n    _.each(this.variables, variable => {\n      if (scopedVars && scopedVars[variable.name] !== void 0) {\n        if (scopedVars[variable.name].skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = scopedVars[variable.name].value;\n      } else {\n        if (variable.skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = variable.getValueForUrl();\n      }\n    });\n  }\n\n  distributeVariable(value, variable) {\n    value = _.map(value, (val, index) => {\n      if (index !== 0) {\n        return variable + '=' + val;\n      } else {\n        return val;\n      }\n    });\n    return value.join(',');\n  }\n}\n\nexport default new TemplateSrv();\n","export class Edge {\n  inputNode: Node;\n  outputNode: Node;\n\n  _linkTo(node, direction) {\n    if (direction <= 0) {\n      node.inputEdges.push(this);\n    }\n\n    if (direction >= 0) {\n      node.outputEdges.push(this);\n    }\n\n    node.edges.push(this);\n  }\n\n  link(inputNode: Node, outputNode: Node) {\n    if (!inputNode) {\n      throw Error('inputNode is required');\n    }\n\n    if (!outputNode) {\n      throw Error('outputNode is required');\n    }\n\n    this.unlink();\n    this.inputNode = inputNode;\n    this.outputNode = outputNode;\n\n    this._linkTo(inputNode, 1);\n    this._linkTo(outputNode, -1);\n    return this;\n  }\n\n  unlink() {\n    let pos;\n    const inode = this.inputNode;\n    const onode = this.outputNode;\n\n    if (!(inode && onode)) {\n      return;\n    }\n\n    pos = inode.edges.indexOf(this);\n    if (pos > -1) {\n      inode.edges.splice(pos, 1);\n    }\n\n    pos = onode.edges.indexOf(this);\n    if (pos > -1) {\n      onode.edges.splice(pos, 1);\n    }\n\n    pos = inode.outputEdges.indexOf(this);\n    if (pos > -1) {\n      inode.outputEdges.splice(pos, 1);\n    }\n\n    pos = onode.inputEdges.indexOf(this);\n    if (pos > -1) {\n      onode.inputEdges.splice(pos, 1);\n    }\n\n    this.inputNode = null;\n    this.outputNode = null;\n  }\n}\n\nexport class Node {\n  name: string;\n  edges: Edge[];\n  inputEdges: Edge[];\n  outputEdges: Edge[];\n\n  constructor(name: string) {\n    this.name = name;\n    this.edges = [];\n    this.inputEdges = [];\n    this.outputEdges = [];\n  }\n\n  getEdgeFrom(from: string | Node): Edge {\n    if (!from) {\n      return null;\n    }\n\n    if (typeof from === 'object') {\n      return this.inputEdges.find(e => e.inputNode.name === from.name);\n    }\n\n    return this.inputEdges.find(e => e.inputNode.name === from);\n  }\n\n  getEdgeTo(to: string | Node): Edge {\n    if (!to) {\n      return null;\n    }\n\n    if (typeof to === 'object') {\n      return this.outputEdges.find(e => e.outputNode.name === to.name);\n    }\n\n    return this.outputEdges.find(e => e.outputNode.name === to);\n  }\n\n  getOptimizedInputEdges(): Edge[] {\n    const toBeRemoved = [];\n    this.inputEdges.forEach(e => {\n      const inputEdgesNodes = e.inputNode.inputEdges.map(e => e.inputNode);\n\n      inputEdgesNodes.forEach(n => {\n        const edgeToRemove = n.getEdgeTo(this.name);\n        if (edgeToRemove) {\n          toBeRemoved.push(edgeToRemove);\n        }\n      });\n    });\n\n    return this.inputEdges.filter(e => toBeRemoved.indexOf(e) === -1);\n  }\n}\n\nexport class Graph {\n  nodes = {};\n\n  constructor() {}\n\n  createNode(name: string): Node {\n    const n = new Node(name);\n    this.nodes[name] = n;\n    return n;\n  }\n\n  createNodes(names: string[]): Node[] {\n    const nodes = [];\n    names.forEach(name => {\n      nodes.push(this.createNode(name));\n    });\n    return nodes;\n  }\n\n  link(input: string | string[] | Node | Node[], output: string | string[] | Node | Node[]): Edge[] {\n    let inputArr = [];\n    let outputArr = [];\n    const inputNodes = [];\n    const outputNodes = [];\n\n    if (input instanceof Array) {\n      inputArr = input;\n    } else {\n      inputArr = [input];\n    }\n\n    if (output instanceof Array) {\n      outputArr = output;\n    } else {\n      outputArr = [output];\n    }\n\n    for (let n = 0; n < inputArr.length; n++) {\n      const i = inputArr[n];\n      if (typeof i === 'string') {\n        const n = this.getNode(i);\n        if (!n) {\n          throw Error(`cannot link input node named ${i} since it doesn't exist in graph`);\n        }\n        inputNodes.push(n);\n      } else {\n        inputNodes.push(i);\n      }\n    }\n\n    for (let n = 0; n < outputArr.length; n++) {\n      const i = outputArr[n];\n      if (typeof i === 'string') {\n        const n = this.getNode(i);\n        if (!n) {\n          throw Error(`cannot link output node named ${i} since it doesn't exist in graph`);\n        }\n        outputNodes.push(n);\n      } else {\n        outputNodes.push(i);\n      }\n    }\n\n    const edges = [];\n    inputNodes.forEach(input => {\n      outputNodes.forEach(output => {\n        edges.push(this.createEdge().link(input, output));\n      });\n    });\n    return edges;\n  }\n\n  createEdge(): Edge {\n    return new Edge();\n  }\n\n  getNode(name: string): Node {\n    return this.nodes[name];\n  }\n}\n\nexport const printGraph = (g: Graph) => {\n  Object.keys(g.nodes).forEach(name => {\n    const n = g.nodes[name];\n    let outputEdges = n.outputEdges.map(e => e.outputNode.name).join(', ');\n    if (!outputEdges) {\n      outputEdges = '<none>';\n    }\n    let inputEdges = n.inputEdges.map(e => e.inputNode.name).join(', ');\n    if (!inputEdges) {\n      inputEdges = '<none>';\n    }\n    console.log(`${n.name}:\\n - links to:   ${outputEdges}\\n - links from: ${inputEdges}`);\n  });\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport { Graph } from 'app/core/utils/dag';\n\nexport class VariableSrv {\n  dashboard: any;\n  variables: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private $location, private $injector, private templateSrv) {\n    // update time variant variables\n    $rootScope.$on('refresh', this.onDashboardRefresh.bind(this), $rootScope);\n    $rootScope.$on('template-variable-value-updated', this.updateUrlParamsWithCurrentVariables.bind(this), $rootScope);\n  }\n\n  init(dashboard) {\n    this.dashboard = dashboard;\n\n    // create working class models representing variables\n    this.variables = dashboard.templating.list = dashboard.templating.list.map(this.createVariableFromModel.bind(this));\n    this.templateSrv.init(this.variables);\n\n    // init variables\n    for (const variable of this.variables) {\n      variable.initLock = this.$q.defer();\n    }\n\n    const queryParams = this.$location.search();\n    return this.$q\n      .all(\n        this.variables.map(variable => {\n          return this.processVariable(variable, queryParams);\n        })\n      )\n      .then(() => {\n        this.templateSrv.updateTemplateData();\n      });\n  }\n\n  onDashboardRefresh(evt, payload) {\n    if (payload && payload.fromVariableValueUpdated) {\n      return Promise.resolve({});\n    }\n\n    const promises = this.variables.filter(variable => variable.refresh === 2).map(variable => {\n      const previousOptions = variable.options.slice();\n\n      return variable.updateOptions().then(() => {\n        if (angular.toJson(previousOptions) !== angular.toJson(variable.options)) {\n          this.$rootScope.$emit('template-variable-value-updated');\n        }\n      });\n    });\n\n    return this.$q.all(promises);\n  }\n\n  processVariable(variable, queryParams) {\n    const dependencies = [];\n\n    for (const otherVariable of this.variables) {\n      if (variable.dependsOn(otherVariable)) {\n        dependencies.push(otherVariable.initLock.promise);\n      }\n    }\n\n    return this.$q\n      .all(dependencies)\n      .then(() => {\n        const urlValue = queryParams['var-' + variable.name];\n        if (urlValue !== void 0) {\n          return variable.setValueFromUrl(urlValue).then(variable.initLock.resolve);\n        }\n\n        if (variable.refresh === 1 || variable.refresh === 2) {\n          return variable.updateOptions().then(variable.initLock.resolve);\n        }\n\n        variable.initLock.resolve();\n      })\n      .finally(() => {\n        this.templateSrv.variableInitialized(variable);\n        delete variable.initLock;\n      });\n  }\n\n  createVariableFromModel(model) {\n    const ctor = variableTypes[model.type].ctor;\n    if (!ctor) {\n      throw {\n        message: 'Unable to find variable constructor for ' + model.type,\n      };\n    }\n\n    const variable = this.$injector.instantiate(ctor, { model: model });\n    return variable;\n  }\n\n  addVariable(variable) {\n    this.variables.push(variable);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  removeVariable(variable) {\n    const index = _.indexOf(this.variables, variable);\n    this.variables.splice(index, 1);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  updateOptions(variable) {\n    return variable.updateOptions();\n  }\n\n  variableUpdated(variable, emitChangeEvents?) {\n    // if there is a variable lock ignore cascading update because we are in a boot up scenario\n    if (variable.initLock) {\n      return this.$q.when();\n    }\n\n    const g = this.createGraph();\n    const node = g.getNode(variable.name);\n    let promises = [];\n    if (node) {\n      promises = node.getOptimizedInputEdges().map(e => {\n        return this.updateOptions(this.variables.find(v => v.name === e.inputNode.name));\n      });\n    }\n\n    return this.$q.all(promises).then(() => {\n      if (emitChangeEvents) {\n        this.$rootScope.$emit('template-variable-value-updated');\n        this.$rootScope.$broadcast('refresh', { fromVariableValueUpdated: true });\n      }\n    });\n  }\n\n  selectOptionsForCurrentValue(variable) {\n    let i, y, value, option;\n    const selected: any = [];\n\n    for (i = 0; i < variable.options.length; i++) {\n      option = variable.options[i];\n      option.selected = false;\n      if (_.isArray(variable.current.value)) {\n        for (y = 0; y < variable.current.value.length; y++) {\n          value = variable.current.value[y];\n          if (option.value === value) {\n            option.selected = true;\n            selected.push(option);\n          }\n        }\n      } else if (option.value === variable.current.value) {\n        option.selected = true;\n        selected.push(option);\n      }\n    }\n\n    return selected;\n  }\n\n  validateVariableSelectionState(variable) {\n    if (!variable.current) {\n      variable.current = {};\n    }\n\n    if (_.isArray(variable.current.value)) {\n      let selected = this.selectOptionsForCurrentValue(variable);\n\n      // if none pick first\n      if (selected.length === 0) {\n        selected = variable.options[0];\n      } else {\n        selected = {\n          value: _.map(selected, val => {\n            return val.value;\n          }),\n          text: _.map(selected, val => {\n            return val.text;\n          }).join(' + '),\n        };\n      }\n\n      return variable.setValue(selected);\n    } else {\n      const currentOption = _.find(variable.options, {\n        text: variable.current.text,\n      });\n      if (currentOption) {\n        return variable.setValue(currentOption);\n      } else {\n        if (!variable.options.length) {\n          return Promise.resolve();\n        }\n        return variable.setValue(variable.options[0]);\n      }\n    }\n  }\n\n  setOptionFromUrl(variable, urlValue) {\n    let promise = this.$q.when();\n\n    if (variable.refresh) {\n      promise = variable.updateOptions();\n    }\n\n    return promise.then(() => {\n      let option = _.find(variable.options, op => {\n        return op.text === urlValue || op.value === urlValue;\n      });\n\n      let defaultText = urlValue;\n      const defaultValue = urlValue;\n\n      if (!option && _.isArray(urlValue)) {\n        defaultText = [];\n\n        for (let n = 0; n < urlValue.length; n++) {\n          const t = _.find(variable.options, op => {\n            return op.value === urlValue[n];\n          });\n\n          if (t) {\n            defaultText.push(t.text);\n          }\n        }\n      }\n\n      option = option || { text: defaultText, value: defaultValue };\n      return variable.setValue(option);\n    });\n  }\n\n  setOptionAsCurrent(variable, option) {\n    variable.current = _.cloneDeep(option);\n\n    if (_.isArray(variable.current.text)) {\n      variable.current.text = variable.current.text.join(' + ');\n    }\n\n    this.selectOptionsForCurrentValue(variable);\n    return this.variableUpdated(variable);\n  }\n\n  updateUrlParamsWithCurrentVariables() {\n    // update url\n    const params = this.$location.search();\n\n    // remove variable params\n    _.each(params, (value, key) => {\n      if (key.indexOf('var-') === 0) {\n        delete params[key];\n      }\n    });\n\n    // add new values\n    this.templateSrv.fillVariableValuesForUrl(params);\n    // update url\n    this.$location.search(params);\n  }\n\n  setAdhocFilter(options) {\n    let variable = _.find(this.variables, {\n      type: 'adhoc',\n      datasource: options.datasource,\n    });\n    if (!variable) {\n      variable = this.createVariableFromModel({\n        name: 'Filters',\n        type: 'adhoc',\n        datasource: options.datasource,\n      });\n      this.addVariable(variable);\n    }\n\n    const filters = variable.filters;\n    let filter = _.find(filters, { key: options.key, value: options.value });\n\n    if (!filter) {\n      filter = { key: options.key, value: options.value };\n      filters.push(filter);\n    }\n\n    filter.operator = options.operator;\n    this.variableUpdated(variable, true);\n  }\n\n  createGraph() {\n    const g = new Graph();\n\n    this.variables.forEach(v => {\n      g.createNode(v.name);\n    });\n\n    this.variables.forEach(v1 => {\n      this.variables.forEach(v2 => {\n        if (v1 === v2) {\n          return;\n        }\n\n        if (v1.dependsOn(v2)) {\n          g.link(v1.name, v2.name);\n        }\n      });\n    });\n\n    return g;\n  }\n}\n\ncoreModule.service('variableSrv', VariableSrv);\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class IntervalVariable implements Variable {\n  name: string;\n  auto_count: number; // tslint:disable-line variable-name\n  auto_min: number; // tslint:disable-line variable-name\n  options: any;\n  auto: boolean;\n  query: string;\n  refresh: number;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'interval',\n    name: '',\n    hide: 0,\n    label: '',\n    refresh: 2,\n    options: [],\n    current: {},\n    query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\n    auto: false,\n    auto_min: '10s',\n    auto_count: 30,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private timeSrv, private templateSrv, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 2;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateAutoValue() {\n    if (!this.auto) {\n      return;\n    }\n\n    // add auto option if missing\n    if (this.options.length && this.options[0].text !== 'auto') {\n      this.options.unshift({\n        text: 'auto',\n        value: '$__auto_interval_' + this.name,\n      });\n    }\n\n    const res = kbn.calculateInterval(this.timeSrv.timeRange(), this.auto_count, this.auto_min);\n    this.templateSrv.setGrafanaVariable('$__auto_interval_' + this.name, res.interval);\n    // for backward compatibility, to be removed eventually\n    this.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\n  }\n\n  updateOptions() {\n    // extract options between quotes and/or comma\n    this.options = _.map(this.query.match(/([\"'])(.*?)\\1|\\w+/g), text => {\n      text = text.replace(/[\"']+/g, '');\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    this.updateAutoValue();\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['interval'] = {\n  name: 'Interval',\n  ctor: IntervalVariable,\n  description: 'Define a timespan interval (ex 1m, 1h, 1d)',\n};\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nfunction getNoneOption() {\n  return { text: 'None', value: '', isNone: true };\n}\n\nexport class QueryVariable implements Variable {\n  datasource: any;\n  query: any;\n  regex: any;\n  sort: any;\n  options: any;\n  current: any;\n  refresh: number;\n  hide: number;\n  name: string;\n  multi: boolean;\n  includeAll: boolean;\n  useTags: boolean;\n  tagsQuery: string;\n  tagValuesQuery: string;\n  tags: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'query',\n    label: null,\n    query: '',\n    regex: '',\n    sort: 0,\n    datasource: null,\n    refresh: 0,\n    hide: 0,\n    name: '',\n    multi: false,\n    includeAll: false,\n    allValue: null,\n    options: [],\n    current: {},\n    tags: [],\n    useTags: false,\n    tagsQuery: '',\n    tagValuesQuery: '',\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private templateSrv, private variableSrv, private timeSrv) {\n    // copy model properties to this instance\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    // copy back model properties to model\n    assignModelProperties(this.model, this, this.defaults);\n\n    // remove options\n    if (this.refresh !== 0) {\n      this.model.options = [];\n    }\n\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n\n  updateOptions() {\n    return this.datasourceSrv\n      .get(this.datasource)\n      .then(this.updateOptionsFromMetricFindQuery.bind(this))\n      .then(this.updateTags.bind(this))\n      .then(this.variableSrv.validateVariableSelectionState.bind(this.variableSrv, this));\n  }\n\n  updateTags(datasource) {\n    if (this.useTags) {\n      return this.metricFindQuery(datasource, this.tagsQuery).then(results => {\n        this.tags = [];\n        for (let i = 0; i < results.length; i++) {\n          this.tags.push(results[i].text);\n        }\n        return datasource;\n      });\n    } else {\n      delete this.tags;\n    }\n\n    return datasource;\n  }\n\n  getValuesForTag(tagKey) {\n    return this.datasourceSrv.get(this.datasource).then(datasource => {\n      const query = this.tagValuesQuery.replace('$tag', tagKey);\n      return this.metricFindQuery(datasource, query).then(results => {\n        return _.map(results, value => {\n          return value.text;\n        });\n      });\n    });\n  }\n\n  updateOptionsFromMetricFindQuery(datasource) {\n    return this.metricFindQuery(datasource, this.query).then(results => {\n      this.options = this.metricNamesToVariableValues(results);\n      if (this.includeAll) {\n        this.addAllOption();\n      }\n      if (!this.options.length) {\n        this.options.push(getNoneOption());\n      }\n      return datasource;\n    });\n  }\n\n  metricFindQuery(datasource, query) {\n    const options = { range: undefined, variable: this };\n\n    if (this.refresh === 2) {\n      options.range = this.timeSrv.timeRange();\n    }\n\n    return datasource.metricFindQuery(query, options);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  metricNamesToVariableValues(metricNames) {\n    let regex, options, i, matches;\n    options = [];\n\n    if (this.regex) {\n      regex = kbn.stringToJsRegex(this.templateSrv.replace(this.regex, {}, 'regex'));\n    }\n    for (i = 0; i < metricNames.length; i++) {\n      const item = metricNames[i];\n      let text = item.text === undefined || item.text === null ? item.value : item.text;\n\n      let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n      if (_.isNumber(value)) {\n        value = value.toString();\n      }\n\n      if (_.isNumber(text)) {\n        text = text.toString();\n      }\n\n      if (regex) {\n        matches = regex.exec(value);\n        if (!matches) {\n          continue;\n        }\n        if (matches.length > 1) {\n          value = matches[1];\n          text = matches[1];\n        }\n      }\n\n      options.push({ text: text, value: value });\n    }\n\n    options = _.uniqBy(options, 'value');\n    return this.sortVariableValues(options, this.sort);\n  }\n\n  sortVariableValues(options, sortOrder) {\n    if (sortOrder === 0) {\n      return options;\n    }\n\n    const sortType = Math.ceil(sortOrder / 2);\n    const reverseSort = sortOrder % 2 === 0;\n\n    if (sortType === 1) {\n      options = _.sortBy(options, 'text');\n    } else if (sortType === 2) {\n      options = _.sortBy(options, opt => {\n        const matches = opt.text.match(/.*?(\\d+).*/);\n        if (!matches || matches.length < 2) {\n          return -1;\n        } else {\n          return parseInt(matches[1], 10);\n        }\n      });\n    } else if (sortType === 3) {\n      options = _.sortBy(options, opt => {\n        return _.toLower(opt.text);\n      });\n    }\n\n    if (reverseSort) {\n      options = options.reverse();\n    }\n\n    return options;\n  }\n\n  dependsOn(variable) {\n    return containsVariable(this.query, this.datasource, this.regex, variable.name);\n  }\n}\n\nvariableTypes['query'] = {\n  name: 'Query',\n  ctor: QueryVariable,\n  description: 'Variable values are fetched from a datasource query',\n  supportsMulti: true,\n};\n","import kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nexport class DatasourceVariable implements Variable {\n  regex: any;\n  query: string;\n  options: any;\n  current: any;\n  refresh: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'datasource',\n    name: '',\n    hide: 0,\n    label: '',\n    current: {},\n    regex: '',\n    options: [],\n    query: '',\n    refresh: 1,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private variableSrv, private templateSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 1;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n\n    // don't persist options\n    this.model.options = [];\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    const options = [];\n    const sources = this.datasourceSrv.getMetricSources({ skipVariables: true });\n    let regex;\n\n    if (this.regex) {\n      regex = this.templateSrv.replace(this.regex, null, 'regex');\n      regex = kbn.stringToJsRegex(regex);\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      // must match on type\n      if (source.meta.id !== this.query) {\n        continue;\n      }\n\n      if (regex && !regex.exec(source.name)) {\n        continue;\n      }\n\n      options.push({ text: source.name, value: source.name });\n    }\n\n    if (options.length === 0) {\n      options.push({ text: 'No data sources found', value: '' });\n    }\n\n    this.options = options;\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    if (this.regex) {\n      return containsVariable(this.regex, variable.name);\n    }\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['datasource'] = {\n  name: 'Datasource',\n  ctor: DatasourceVariable,\n  description: 'Enabled you to dynamically switch the datasource for multiple panels',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class CustomVariable implements Variable {\n  query: string;\n  options: any;\n  includeAll: boolean;\n  multi: boolean;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'custom',\n    name: '',\n    label: '',\n    hide: 0,\n    options: [],\n    current: {},\n    query: '',\n    includeAll: false,\n    multi: false,\n    allValue: null,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    // extract options in comma separated string\n    this.options = _.map(this.query.split(/[,]+/), text => {\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    if (this.includeAll) {\n      this.addAllOption();\n    }\n\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n}\n\nvariableTypes['custom'] = {\n  name: 'Custom',\n  ctor: CustomVariable,\n  description: 'Define variable values manually',\n  supportsMulti: true,\n};\n","import { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class ConstantVariable implements Variable {\n  query: string;\n  options: any[];\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'constant',\n    name: '',\n    hide: 2,\n    label: '',\n    query: '',\n    current: {},\n    options: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    this.options = [{ text: this.query.trim(), value: this.query.trim() }];\n    this.setValue(this.options[0]);\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['constant'] = {\n  name: 'Constant',\n  ctor: ConstantVariable,\n  description: 'Define a hidden constant variable, useful for metric prefixes in dashboards you want to share',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class AdhocVariable implements Variable {\n  filters: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'adhoc',\n    name: '',\n    label: '',\n    hide: 0,\n    datasource: null,\n    filters: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return Promise.resolve();\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    if (!_.isArray(urlValue)) {\n      urlValue = [urlValue];\n    }\n\n    this.filters = urlValue.map(item => {\n      const values = item.split('|').map(value => {\n        return this.unescapeDelimiter(value);\n      });\n      return {\n        key: values[0],\n        operator: values[1],\n        value: values[2],\n      };\n    });\n\n    return Promise.resolve();\n  }\n\n  getValueForUrl() {\n    return this.filters.map(filter => {\n      return [filter.key, filter.operator, filter.value]\n        .map(value => {\n          return this.escapeDelimiter(value);\n        })\n        .join('|');\n    });\n  }\n\n  escapeDelimiter(value) {\n    return value.replace(/\\|/g, '__gfp__');\n  }\n\n  unescapeDelimiter(value) {\n    return value.replace(/__gfp__/g, '|');\n  }\n\n  setFilters(filters: any[]) {\n    this.filters = filters;\n  }\n}\n\nvariableTypes['adhoc'] = {\n  name: 'Ad hoc filters',\n  ctor: AdhocVariable,\n  description: 'Add key/value filters on the fly',\n};\n","import { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class TextBoxVariable implements Variable {\n  query: string;\n  current: any;\n  options: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'textbox',\n    name: '',\n    hide: 2,\n    label: '',\n    query: '',\n    current: {},\n    options: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    this.options = [{ text: this.query.trim(), value: this.query.trim() }];\n    this.current = this.options[0];\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    this.query = urlValue;\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['textbox'] = {\n  name: 'Text box',\n  ctor: TextBoxVariable,\n  description: 'Define a textbox variable, where users can enter any arbitrary string',\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport Remarkable from 'remarkable';\n\nexport class PluginEditCtrl {\n  model: any;\n  pluginIcon: string;\n  pluginId: any;\n  includes: any;\n  readmeHtml: any;\n  includedDatasources: any;\n  tab: string;\n  navModel: any;\n  hasDashboards: any;\n  preUpdateHook: () => any;\n  postUpdateHook: () => any;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private backendSrv, private $sce, private $routeParams, navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n    this.preUpdateHook = () => Promise.resolve();\n    this.postUpdateHook = () => Promise.resolve();\n\n    this.init();\n  }\n\n  setNavModel(model) {\n    let defaultTab = 'readme';\n\n    this.navModel = {\n      main: {\n        img: model.info.logos.large,\n        subTitle: model.info.author.name,\n        url: '',\n        text: model.name,\n        breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\n        children: [\n          {\n            icon: 'fa fa-fw fa-file-text-o',\n            id: 'readme',\n            text: 'Readme',\n            url: `plugins/${this.model.id}/edit?tab=readme`,\n          },\n        ],\n      },\n    };\n\n    if (model.type === 'app') {\n      this.navModel.main.children.push({\n        icon: 'gicon gicon-cog',\n        id: 'config',\n        text: 'Config',\n        url: `plugins/${this.model.id}/edit?tab=config`,\n      });\n\n      const hasDashboards = _.find(model.includes, { type: 'dashboard' });\n\n      if (hasDashboards) {\n        this.navModel.main.children.push({\n          icon: 'gicon gicon-dashboard',\n          id: 'dashboards',\n          text: 'Dashboards',\n          url: `plugins/${this.model.id}/edit?tab=dashboards`,\n        });\n      }\n\n      defaultTab = 'config';\n    }\n\n    this.tab = this.$routeParams.tab || defaultTab;\n\n    for (const tab of this.navModel.main.children) {\n      if (tab.id === this.tab) {\n        tab.active = true;\n      }\n    }\n  }\n\n  init() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(result => {\n      this.model = result;\n      this.pluginIcon = this.getPluginIcon(this.model.type);\n\n      this.model.dependencies.plugins.forEach(plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n      });\n\n      this.includes = _.map(result.includes, plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n        return plug;\n      });\n\n      this.setNavModel(this.model);\n      return this.initReadme();\n    });\n  }\n\n  initReadme() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/markdown/readme`).then(res => {\n      const md = new Remarkable({\n        linkify: true,\n      });\n      this.readmeHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  getPluginIcon(type) {\n    switch (type) {\n      case 'datasource':\n        return 'icon-gf icon-gf-datasources';\n      case 'panel':\n        return 'icon-gf icon-gf-panel';\n      case 'app':\n        return 'icon-gf icon-gf-apps';\n      case 'page':\n        return 'icon-gf icon-gf-endpoint-tiny';\n      case 'dashboard':\n        return 'icon-gf icon-gf-dashboard';\n      default:\n        return 'icon-gf icon-gf-apps';\n    }\n  }\n\n  update() {\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = _.extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return this.backendSrv.post(`/api/plugins/${this.pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  }\n\n  importDashboards() {\n    return Promise.resolve();\n  }\n\n  setPreUpdateHook(callback: () => any) {\n    this.preUpdateHook = callback;\n  }\n\n  setPostUpdateHook(callback: () => any) {\n    this.postUpdateHook = callback;\n  }\n\n  updateAvailable() {\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = this.model;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  enable() {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  }\n\n  disable() {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  }\n}\n\nangular.module('grafana.controllers').controller('PluginEditCtrl', PluginEditCtrl);\n","import './editor_ctrl';\nimport coreModule from 'app/core/core_module';\n\nimport templateSrv from './template_srv';\nimport { VariableSrv } from './variable_srv';\nimport { IntervalVariable } from './interval_variable';\nimport { QueryVariable } from './query_variable';\nimport { DatasourceVariable } from './datasource_variable';\nimport { CustomVariable } from './custom_variable';\nimport { ConstantVariable } from './constant_variable';\nimport { AdhocVariable } from './adhoc_variable';\nimport { TextBoxVariable } from './TextBoxVariable';\n\ncoreModule.factory('templateSrv', () => {\n  return templateSrv;\n});\n\nexport {\n  VariableSrv,\n  IntervalVariable,\n  QueryVariable,\n  DatasourceVariable,\n  CustomVariable,\n  ConstantVariable,\n  AdhocVariable,\n  TextBoxVariable,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\n\nconst pluginInfoCache = {};\n\nexport class AppPageCtrl {\n  page: any;\n  pluginId: any;\n  appModel: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams: any, private $rootScope, private navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n\n    if (pluginInfoCache[this.pluginId]) {\n      this.initPage(pluginInfoCache[this.pluginId]);\n    } else {\n      this.loadPluginInfo();\n    }\n  }\n\n  initPage(app) {\n    this.appModel = app;\n    this.page = _.find(app.includes, { slug: this.$routeParams.slug });\n\n    pluginInfoCache[this.pluginId] = app;\n\n    if (!this.page) {\n      this.$rootScope.appEvent('alert-error', ['App Page Not Found', '']);\n\n      this.navModel = this.navModelSrv.getNotFoundNav();\n      return;\n    }\n\n    const pluginNav = this.navModelSrv.getNav('plugin-page-' + app.id);\n\n    this.navModel = {\n      main: {\n        img: app.info.logos.large,\n        subTitle: app.name,\n        url: '',\n        text: this.page.name,\n        breadcrumbs: [{ title: app.name, url: pluginNav.main.url }],\n      },\n    };\n  }\n\n  loadPluginInfo() {\n    this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(app => {\n      this.initPage(app);\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('AppPageCtrl', AppPageCtrl);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class DashImportListCtrl {\n  dashboards: any[];\n  plugin: any;\n  datasource: any;\n\n  /** @ngInject */\n  constructor($scope, private backendSrv, private $rootScope) {\n    this.dashboards = [];\n\n    backendSrv.get(`/api/plugins/${this.plugin.id}/dashboards`).then(dashboards => {\n      this.dashboards = dashboards;\n    });\n\n    appEvents.on('dashboard-list-import-all', this.importAll.bind(this), $scope);\n  }\n\n  importAll(payload) {\n    return this.importNext(0)\n      .then(() => {\n        payload.resolve('All dashboards imported');\n      })\n      .catch(err => {\n        payload.reject(err);\n      });\n  }\n\n  importNext(index) {\n    return this.import(this.dashboards[index], true).then(() => {\n      if (index + 1 < this.dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  import(dash, overwrite) {\n    const installCmd = {\n      pluginId: this.plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (this.datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: this.datasource.type,\n        value: this.datasource.name,\n      });\n    }\n\n    return this.backendSrv.post(`/api/dashboards/import`, installCmd).then(res => {\n      this.$rootScope.appEvent('alert-success', ['Dashboard Imported', dash.title]);\n      _.extend(dash, res);\n    });\n  }\n\n  remove(dash) {\n    this.backendSrv.delete('/api/dashboards/' + dash.importedUri).then(() => {\n      this.$rootScope.appEvent('alert-success', ['Dashboard Deleted', dash.title]);\n      dash.imported = false;\n    });\n  }\n}\n\nexport function dashboardImportList() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/plugins/import_list/import_list.html',\n    controller: DashImportListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      plugin: '=',\n      datasource: '=',\n    },\n  };\n}\n\ncoreModule.directive('dashboardImportList', dashboardImportList);\n","import _ from 'lodash';\nimport { DataSource, PluginMeta, NavModel } from 'app/types';\n\nexport function buildNavModel(ds: DataSource, plugin: PluginMeta, currentPage: string): NavModel {\n  let title = 'New';\n  const subTitle = `Type: ${plugin.name}`;\n\n  if (ds.id) {\n    title = ds.name;\n  }\n\n  const main = {\n    img: plugin.info.logos.large,\n    id: 'ds-edit-' + plugin.id,\n    subTitle: subTitle,\n    url: '',\n    text: title,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: currentPage === 'datasource-settings',\n        icon: 'fa fa-fw fa-sliders',\n        id: 'datasource-settings',\n        text: 'Settings',\n        url: `datasources/edit/${ds.id}`,\n      },\n    ],\n  };\n\n  const hasDashboards = _.find(plugin.includes, { type: 'dashboard' }) !== undefined;\n  if (hasDashboards && ds.id) {\n    main.children.push({\n      active: currentPage === 'datasource-dashboards',\n      icon: 'fa fa-fw fa-th-large',\n      id: 'datasource-dashboards',\n      text: 'Dashboards',\n      url: `datasources/edit/${ds.id}/dashboards`,\n    });\n  }\n\n  return {\n    main: main,\n    node: _.find(main.children, { active: true }),\n  };\n}\n","import _ from 'lodash';\nimport config from 'app/core/config';\nimport { coreModule, appEvents } from 'app/core/core';\nimport { store } from 'app/store/configureStore';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { buildNavModel } from './state/navModel';\n\nlet datasourceTypes = [];\n\nconst defaults = {\n  name: '',\n  type: 'graphite',\n  url: '',\n  access: 'proxy',\n  jsonData: {},\n  secureJsonFields: {},\n  secureJsonData: {},\n};\n\nlet datasourceCreated = false;\n\nexport class DataSourceEditCtrl {\n  isNew: boolean;\n  datasources: any[];\n  current: any;\n  types: any;\n  testing: any;\n  datasourceMeta: any;\n  editForm: any;\n  gettingStarted: boolean;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv, private $routeParams, private $location, private datasourceSrv) {\n    const state = store.getState();\n    this.navModel = getNavModel(state.navIndex, 'datasources');\n    this.datasources = [];\n\n    this.loadDatasourceTypes().then(() => {\n      if (this.$routeParams.id) {\n        this.getDatasourceById(this.$routeParams.id);\n      } else {\n        this.initNewDatasourceModel();\n      }\n    });\n  }\n\n  initNewDatasourceModel() {\n    this.isNew = true;\n    this.current = _.cloneDeep(defaults);\n\n    // We are coming from getting started\n    if (this.$location.search().gettingstarted) {\n      this.gettingStarted = true;\n      this.current.isDefault = true;\n    }\n\n    this.typeChanged();\n  }\n\n  loadDatasourceTypes() {\n    if (datasourceTypes.length > 0) {\n      this.types = datasourceTypes;\n      return this.$q.when(null);\n    }\n\n    return this.backendSrv.get('/api/plugins', { enabled: 1, type: 'datasource' }).then(plugins => {\n      datasourceTypes = plugins;\n      this.types = plugins;\n    });\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv.get('/api/datasources/' + id).then(ds => {\n      this.isNew = false;\n      this.current = ds;\n\n      if (datasourceCreated) {\n        datasourceCreated = false;\n        this.testDatasource();\n      }\n\n      return this.typeChanged();\n    });\n  }\n\n  userChangedType() {\n    // reset model but keep name & default flag\n    this.current = _.defaults(\n      {\n        id: this.current.id,\n        name: this.current.name,\n        isDefault: this.current.isDefault,\n        type: this.current.type,\n      },\n      _.cloneDeep(defaults)\n    );\n    this.typeChanged();\n  }\n\n  updateNav() {\n    this.navModel = buildNavModel(this.current, this.datasourceMeta, 'datasource-settings');\n  }\n\n  typeChanged() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n\n  updateFrontendSettings() {\n    return this.backendSrv.get('/api/frontend/settings').then(settings => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      this.datasourceSrv.init();\n    });\n  }\n\n  testDatasource() {\n    this.datasourceSrv.get(this.current.name).then(datasource => {\n      if (!datasource.testDatasource) {\n        return;\n      }\n\n      this.testing = { done: false, status: 'error' };\n\n      // make test call in no backend cache context\n      this.backendSrv\n        .withNoBackendCache(() => {\n          return datasource\n            .testDatasource()\n            .then(result => {\n              this.testing.message = result.message;\n              this.testing.status = result.status;\n            })\n            .catch(err => {\n              if (err.statusText) {\n                this.testing.message = 'HTTP Error ' + err.statusText;\n              } else {\n                this.testing.message = err.message;\n              }\n            });\n        })\n        .finally(() => {\n          this.testing.done = true;\n        });\n    });\n  }\n\n  saveChanges() {\n    if (!this.editForm.$valid) {\n      return;\n    }\n\n    if (this.current.readOnly) {\n      return;\n    }\n\n    if (this.current.id) {\n      return this.backendSrv.put('/api/datasources/' + this.current.id, this.current).then(result => {\n        this.current = result.datasource;\n        this.updateNav();\n        this.updateFrontendSettings().then(() => {\n          this.testDatasource();\n        });\n      });\n    } else {\n      return this.backendSrv.post('/api/datasources', this.current).then(result => {\n        this.current = result.datasource;\n        this.updateFrontendSettings();\n\n        datasourceCreated = true;\n        this.$location.path('datasources/edit/' + result.id);\n      });\n    }\n  }\n\n  confirmDelete() {\n    this.backendSrv.delete('/api/datasources/' + this.current.id).then(() => {\n      this.$location.path('datasources');\n    });\n  }\n\n  delete(s) {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this datasource?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  }\n}\n\ncoreModule.controller('DataSourceEditCtrl', DataSourceEditCtrl);\n\ncoreModule.directive('datasourceHttpSettings', () => {\n  return {\n    scope: {\n      current: '=',\n      suggestUrl: '@',\n      noDirectAccess: '@',\n    },\n    templateUrl: 'public/app/features/plugins/partials/ds_http_settings.html',\n    link: {\n      pre: ($scope, elem, attrs) => {\n        // do not show access option if direct access is disabled\n        $scope.showAccessOption = $scope.noDirectAccess !== 'true';\n        $scope.showAccessHelp = false;\n        $scope.toggleAccessHelp = () => {\n          $scope.showAccessHelp = !$scope.showAccessHelp;\n        };\n\n        $scope.getSuggestUrls = () => {\n          return [$scope.suggestUrl];\n        };\n      },\n    },\n  };\n});\n","import { coreModule } from 'app/core/core';\nimport { store } from 'app/store/configureStore';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { buildNavModel } from './state/navModel';\n\nexport class DataSourceDashboardsCtrl {\n  datasourceMeta: any;\n  navModel: any;\n  current: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams) {\n    const state = store.getState();\n    this.navModel = getNavModel(state.navIndex, 'datasources');\n\n    if (this.$routeParams.id) {\n      this.getDatasourceById(this.$routeParams.id);\n    }\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv\n      .get('/api/datasources/' + id)\n      .then(ds => {\n        this.current = ds;\n      })\n      .then(this.getPluginInfo.bind(this));\n  }\n\n  updateNav() {\n    this.navModel = buildNavModel(this.current, this.datasourceMeta, 'datasource-dashboards');\n  }\n\n  getPluginInfo() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n}\n\ncoreModule.controller('DataSourceDashboardsCtrl', DataSourceDashboardsCtrl);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { appEvents, profiler } from 'app/core/core';\nimport { PanelModel } from 'app/features/dashboard/panel_model';\nimport Remarkable from 'remarkable';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport store from 'app/core/store';\n\nconst TITLE_HEIGHT = 27;\nconst PANEL_BORDER = 2;\n\nimport { Emitter } from 'app/core/core';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  dashboard: any;\n  editorTabIndex: number;\n  pluginName: string;\n  pluginId: string;\n  editorTabs: any;\n  $scope: any;\n  $injector: any;\n  $location: any;\n  $timeout: any;\n  fullscreen: boolean;\n  inspector: any;\n  editModeInitiated: boolean;\n  editMode: any;\n  height: any;\n  containerHeight: any;\n  events: Emitter;\n  timing: any;\n  loading: boolean;\n\n  constructor($scope, $injector) {\n    this.$injector = $injector;\n    this.$location = $injector.get('$location');\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabIndex = 0;\n    this.events = this.panel.events;\n    this.timing = {};\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on('refresh', () => this.refresh());\n    $scope.$on('component-did-mount', () => this.panelDidMount());\n\n    $scope.$on('$destroy', () => {\n      this.events.emit('panel-teardown');\n      this.events.removeAllListeners();\n    });\n  }\n\n  init() {\n    this.events.emit('panel-initialized');\n    this.publishAppEvent('panel-initialized', { scope: this.$scope });\n  }\n\n  panelDidMount() {\n    this.events.emit('component-did-mount');\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted(this.panel.id, this.timing);\n  }\n\n  refresh() {\n    this.events.emit('refresh', null);\n  }\n\n  publishAppEvent(evtName, evt) {\n    this.$scope.$root.appEvent(evtName, evt);\n  }\n\n  changeView(fullscreen, edit) {\n    this.publishAppEvent('panel-change-view', {\n      fullscreen: fullscreen,\n      edit: edit,\n      panelId: this.panel.id,\n    });\n  }\n\n  viewPanel() {\n    this.changeView(true, false);\n  }\n\n  editPanel() {\n    this.changeView(true, true);\n  }\n\n  exitFullscreen() {\n    this.changeView(false, false);\n  }\n\n  initEditMode() {\n    this.editorTabs = [];\n    this.addEditorTab('General', 'public/app/partials/panelgeneral.html');\n    this.editModeInitiated = true;\n    this.events.emit('init-edit-mode', null);\n\n    const urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();\n    if (urlTab) {\n      this.editorTabs.forEach((tab, i) => {\n        if (tab.title.toLowerCase() === urlTab) {\n          this.editorTabIndex = i;\n        }\n      });\n    }\n  }\n\n  changeTab(newIndex) {\n    this.editorTabIndex = newIndex;\n    const route = this.$injector.get('$route');\n    route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();\n    route.updateParams();\n  }\n\n  addEditorTab(title, directiveFn, index?) {\n    const editorTab = { title, directiveFn };\n\n    if (_.isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getMenu() {\n    const menu = [];\n    menu.push({\n      text: 'View',\n      click: 'ctrl.viewPanel();',\n      icon: 'fa fa-fw fa-eye',\n      shortcut: 'v',\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({\n        text: 'Edit',\n        click: 'ctrl.editPanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-edit',\n        shortcut: 'e',\n      });\n    }\n\n    menu.push({\n      text: 'Share',\n      click: 'ctrl.sharePanel();',\n      icon: 'fa fa-fw fa-share',\n      shortcut: 'p s',\n    });\n\n    // Additional items from sub-class\n    menu.push(...this.getAdditionalMenuItems());\n\n    const extendedMenu = this.getExtendedMenu();\n    menu.push({\n      text: 'More ...',\n      click: '',\n      icon: 'fa fa-fw fa-cube',\n      submenu: extendedMenu,\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({ divider: true, role: 'Editor' });\n      menu.push({\n        text: 'Remove',\n        click: 'ctrl.removePanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-trash',\n        shortcut: 'p r',\n      });\n    }\n\n    return menu;\n  }\n\n  getExtendedMenu() {\n    const menu = [];\n    if (!this.fullscreen && this.dashboard.meta.canEdit) {\n      menu.push({\n        text: 'Duplicate',\n        click: 'ctrl.duplicate()',\n        role: 'Editor',\n        shortcut: 'p d',\n      });\n\n      menu.push({\n        text: 'Copy',\n        click: 'ctrl.copyPanel()',\n        role: 'Editor',\n      });\n    }\n\n    menu.push({\n      text: 'Panel JSON',\n      click: 'ctrl.editPanelJson(); dismiss();',\n    });\n\n    this.events.emit('init-panel-actions', menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  getAdditionalMenuItems() {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.meta.fullscreen && !this.fullscreen;\n  }\n\n  calculatePanelHeight() {\n    if (this.fullscreen) {\n      const docHeight = $(window).height();\n      const editHeight = Math.floor(docHeight * 0.4);\n      const fullscreenHeight = Math.floor(docHeight * 0.8);\n      this.containerHeight = this.editMode ? editHeight : fullscreenHeight;\n    } else {\n      this.containerHeight = this.panel.gridPos.h * GRID_CELL_HEIGHT + (this.panel.gridPos.h - 1) * GRID_CELL_VMARGIN;\n    }\n\n    if (this.panel.soloMode) {\n      this.containerHeight = $(window).height();\n    }\n\n    this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);\n  }\n\n  render(payload?) {\n    this.timing.renderStart = new Date().getTime();\n    this.events.emit('render', payload);\n  }\n\n  duplicate() {\n    this.dashboard.duplicatePanel(this.panel);\n    this.$timeout(() => {\n      this.$scope.$root.$broadcast('render');\n    });\n  }\n\n  removePanel() {\n    this.publishAppEvent('panel-remove', {\n      panelId: this.panel.id,\n    });\n  }\n\n  editPanelJson() {\n    const editScope = this.$scope.$root.$new();\n    editScope.object = this.panel.getSaveModel();\n    editScope.updateHandler = this.replacePanel.bind(this);\n    editScope.enableCopy = true;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  copyPanel() {\n    store.set(LS_PANEL_COPY_KEY, JSON.stringify(this.panel.getSaveModel()));\n    appEvents.emit('alert-success', ['Panel copied. Open Add Panel to paste']);\n  }\n\n  replacePanel(newPanel, oldPanel) {\n    const dashboard = this.dashboard;\n    const index = _.findIndex(dashboard.panels, panel => {\n      return panel.id === oldPanel.id;\n    });\n\n    const deletedPanel = dashboard.panels.splice(index, 1);\n    this.dashboard.events.emit('panel-removed', deletedPanel);\n\n    newPanel = new PanelModel(newPanel);\n    newPanel.id = oldPanel.id;\n\n    dashboard.panels.splice(index, 0, newPanel);\n    dashboard.sortPanelsByGridPos();\n    dashboard.events.emit('panel-added', newPanel);\n  }\n\n  sharePanel() {\n    const shareScope = this.$scope.$new();\n    shareScope.panel = this.panel;\n    shareScope.dashboard = this.dashboard;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: shareScope,\n    });\n  }\n\n  getInfoMode() {\n    if (this.error) {\n      return 'error';\n    }\n    if (!!this.panel.description) {\n      return 'info';\n    }\n    if (this.panel.links && this.panel.links.length) {\n      return 'links';\n    }\n    return '';\n  }\n\n  getInfoContent(options) {\n    let markdown = this.panel.description;\n\n    if (options.mode === 'tooltip') {\n      markdown = this.error || this.panel.description;\n    }\n\n    const linkSrv = this.$injector.get('linkSrv');\n    const sanitize = this.$injector.get('$sanitize');\n    const templateSrv = this.$injector.get('templateSrv');\n    const interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);\n    let html = '<div class=\"markdown-html\">';\n\n    html += new Remarkable().render(interpolatedMarkdown);\n\n    if (this.panel.links && this.panel.links.length > 0) {\n      html += '<ul>';\n      for (const link of this.panel.links) {\n        const info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);\n        html +=\n          '<li><a class=\"panel-menu-link\" href=\"' +\n          info.href +\n          '\" target=\"' +\n          info.target +\n          '\">' +\n          info.title +\n          '</a></li>';\n      }\n      html += '</ul>';\n    }\n\n    html += '</div>';\n    return sanitize(html);\n  }\n\n  openInspector() {\n    const modalScope = this.$scope.$new();\n    modalScope.panel = this.panel;\n    modalScope.dashboard = this.dashboard;\n    modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });\n\n    modalScope.inspector = $.extend(true, {}, this.inspector);\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/inspector.html',\n      scope: modalScope,\n    });\n  }\n}\n","import { DashboardModel } from '../dashboard/dashboard_model';\nimport Remarkable from 'remarkable';\n\nexport class MetricsTabCtrl {\n  dsName: string;\n  panel: any;\n  panelCtrl: any;\n  datasources: any[];\n  datasourceInstance: any;\n  nextRefId: string;\n  dashboard: DashboardModel;\n  panelDsValue: any;\n  addQueryDropdown: any;\n  queryTroubleshooterOpen: boolean;\n  helpOpen: boolean;\n  optionsOpen: boolean;\n  hasQueryHelp: boolean;\n  helpHtml: string;\n  queryOptions: any;\n\n  /** @ngInject */\n  constructor($scope, private $sce, datasourceSrv, private backendSrv) {\n    this.panelCtrl = $scope.ctrl;\n    $scope.ctrl = this;\n\n    this.panel = this.panelCtrl.panel;\n    this.dashboard = this.panelCtrl.dashboard;\n    this.datasources = datasourceSrv.getMetricSources();\n    this.panelDsValue = this.panelCtrl.panel.datasource;\n\n    for (const ds of this.datasources) {\n      if (ds.value === this.panelDsValue) {\n        this.datasourceInstance = ds;\n      }\n    }\n\n    this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };\n\n    // update next ref id\n    this.panelCtrl.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.updateDatasourceOptions();\n  }\n\n  updateDatasourceOptions() {\n    if (this.datasourceInstance) {\n      this.hasQueryHelp = this.datasourceInstance.meta.hasQueryHelp;\n      this.queryOptions = this.datasourceInstance.meta.queryOptions;\n    }\n  }\n\n  getOptions(includeBuiltin) {\n    return Promise.resolve(\n      this.datasources\n        .filter(value => {\n          return includeBuiltin || !value.meta.builtIn;\n        })\n        .map(ds => {\n          return { value: ds.value, text: ds.name, datasource: ds };\n        })\n    );\n  }\n\n  datasourceChanged(option) {\n    if (!option) {\n      return;\n    }\n\n    this.datasourceInstance = option.datasource;\n    this.panelCtrl.setDatasource(option.datasource);\n    this.updateDatasourceOptions();\n  }\n\n  addMixedQuery(option) {\n    if (!option) {\n      return;\n    }\n\n    this.panelCtrl.addQuery({\n      isNew: true,\n      datasource: option.datasource.name,\n    });\n    this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };\n  }\n\n  addQuery() {\n    this.panelCtrl.addQuery({ isNew: true });\n  }\n\n  toggleHelp() {\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.helpOpen = !this.helpOpen;\n\n    this.backendSrv.get(`/api/plugins/${this.datasourceInstance.meta.id}/markdown/query_help`).then(res => {\n      const md = new Remarkable();\n      this.helpHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  toggleOptions() {\n    this.helpOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.optionsOpen = !this.optionsOpen;\n  }\n\n  toggleQueryTroubleshooter() {\n    this.helpOpen = false;\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = !this.queryTroubleshooterOpen;\n  }\n}\n\n/** @ngInject */\nexport function metricsTabDirective() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/panel/partials/metrics_tab.html',\n    controller: MetricsTabCtrl,\n  };\n}\n","import $ from 'jquery';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport kbn from 'app/core/utils/kbn';\nimport { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { getExploreUrl } from 'app/core/utils/explore';\n\nimport { metricsTabDirective } from './metrics_tab';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  scope: any;\n  datasource: any;\n  datasourceName: any;\n  $q: any;\n  $timeout: any;\n  contextSrv: any;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  timing: any;\n  range: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo: any;\n  skipDataOnInit: boolean;\n  dataStream: any;\n  dataSubscription: any;\n  dataList: any;\n  nextRefId: string;\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // make metrics tab the default\n    this.editorTabIndex = 1;\n    this.$q = $injector.get('$q');\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.scope = $scope;\n    this.panel.datasource = this.panel.datasource || null;\n\n    if (!this.panel.targets) {\n      this.panel.targets = [{}];\n    }\n\n    this.events.on('refresh', this.onMetricsPanelRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitMetricsPanelEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTearDown.bind(this));\n  }\n\n  private onPanelTearDown() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n      this.dataSubscription = null;\n    }\n  }\n\n  private onInitMetricsPanelEditMode() {\n    this.addEditorTab('Metrics', metricsTabDirective);\n    this.addEditorTab('Time range', 'public/app/features/panel/partials/panelTime.html');\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!_.isArray(data)) {\n        data = data.data;\n      }\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit('data-snapshot-load', data);\n      });\n    }\n\n    // // ignore if we have data stream\n    if (this.dataStream) {\n      return;\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    this.setTimeQueryStart();\n    this.datasourceSrv\n      .get(this.panel.datasource)\n      .then(this.updateTimeRange.bind(this))\n      .then(this.issueQueries.bind(this))\n      .then(this.handleQueryResult.bind(this))\n      .catch(err => {\n        // if cancelled  keep loading set to true\n        if (err.cancelled) {\n          console.log('Panel request cancelled', err);\n          return;\n        }\n\n        this.loading = false;\n        this.error = err.message || 'Request Error';\n        this.inspector = { error: err };\n\n        if (err.data) {\n          if (err.data.message) {\n            this.error = err.data.message;\n          }\n          if (err.data.error) {\n            this.error = err.data.error;\n          }\n        }\n\n        this.events.emit('data-error', err);\n        console.log('Panel data error:', err);\n      });\n  }\n\n  setTimeQueryStart() {\n    this.timing.queryStart = new Date().getTime();\n  }\n\n  setTimeQueryEnd() {\n    this.timing.queryEnd = new Date().getTime();\n  }\n\n  updateTimeRange(datasource?) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    this.applyPanelTimeOverrides();\n\n    if (this.panel.maxDataPoints) {\n      this.resolution = this.panel.maxDataPoints;\n    } else {\n      this.resolution = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\n    }\n\n    this.calculateInterval();\n\n    return this.datasource;\n  }\n\n  calculateInterval() {\n    let intervalOverride = this.panel.interval;\n\n    // if no panel interval check datasource\n    if (intervalOverride) {\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\n    } else if (this.datasource && this.datasource.interval) {\n      intervalOverride = this.datasource.interval;\n    }\n\n    const res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\n    this.interval = res.interval;\n    this.intervalMs = res.intervalMs;\n  }\n\n  applyPanelTimeOverrides() {\n    this.timeInfo = '';\n\n    // check panel time overrrides\n    if (this.panel.timeFrom) {\n      const timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\n      const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n      if (timeFromInfo.invalid) {\n        this.timeInfo = 'invalid time override';\n        return;\n      }\n\n      if (_.isString(this.range.raw.from)) {\n        const timeFromDate = dateMath.parse(timeFromInfo.from);\n        this.timeInfo = timeFromInfo.display;\n        this.range.from = timeFromDate;\n        this.range.to = dateMath.parse(timeFromInfo.to);\n        this.range.raw.from = timeFromInfo.from;\n        this.range.raw.to = timeFromInfo.to;\n      }\n    }\n\n    if (this.panel.timeShift) {\n      const timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\n      const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n      if (timeShiftInfo.invalid) {\n        this.timeInfo = 'invalid timeshift';\n        return;\n      }\n\n      const timeShift = '-' + timeShiftInterpolated;\n      this.timeInfo += ' timeshift ' + timeShift;\n      this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\n      this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\n      this.range.raw = { from: this.range.from, to: this.range.to };\n    }\n\n    if (this.panel.hideTimeOverride) {\n      this.timeInfo = '';\n    }\n  }\n\n  issueQueries(datasource) {\n    this.datasource = datasource;\n\n    if (!this.panel.targets || this.panel.targets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    // make shallow copy of scoped vars,\n    // and add built in variables interval and interval_ms\n    const scopedVars = Object.assign({}, this.panel.scopedVars, {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: this.intervalMs, value: this.intervalMs },\n    });\n\n    const metricsQuery = {\n      timezone: this.dashboard.getTimezone(),\n      panelId: this.panel.id,\n      dashboardId: this.dashboard.id,\n      range: this.range,\n      rangeRaw: this.range.raw,\n      interval: this.interval,\n      intervalMs: this.intervalMs,\n      targets: this.panel.targets,\n      maxDataPoints: this.resolution,\n      scopedVars: scopedVars,\n      cacheTimeout: this.panel.cacheTimeout,\n    };\n\n    return datasource.query(metricsQuery);\n  }\n\n  handleQueryResult(result) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    this.events.emit('data-received', result.data);\n  }\n\n  handleDataStream(stream) {\n    // if we already have a connection\n    if (this.dataStream) {\n      console.log('two stream observables!');\n      return;\n    }\n\n    this.dataStream = stream;\n    this.dataSubscription = stream.subscribe({\n      next: data => {\n        console.log('dataSubject next!');\n        if (data.range) {\n          this.range = data.range;\n        }\n        this.events.emit('data-received', data.data);\n      },\n      error: error => {\n        this.events.emit('data-error', error);\n        console.log('panel: observer got error');\n      },\n      complete: () => {\n        console.log('panel: observer got complete');\n        this.dataStream = null;\n      },\n    });\n  }\n\n  setDatasource(datasource) {\n    // switching to mixed\n    if (datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        target.datasource = this.panel.datasource;\n        if (!target.datasource) {\n          target.datasource = config.defaultDatasource;\n        }\n      });\n    } else if (this.datasource && this.datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        delete target.datasource;\n      });\n    }\n\n    this.panel.datasource = datasource.value;\n    this.datasourceName = datasource.name;\n    this.datasource = null;\n    this.refresh();\n  }\n\n  getAdditionalMenuItems() {\n    const items = [];\n    if (\n      config.exploreEnabled &&\n      this.contextSrv.isEditor &&\n      this.datasource &&\n      (this.datasource.meta.explore || this.datasource.meta.id === 'mixed')\n    ) {\n      items.push({\n        text: 'Explore',\n        click: 'ctrl.explore();',\n        icon: 'fa fa-fw fa-rocket',\n        shortcut: 'x',\n      });\n    }\n    return items;\n  }\n\n  async explore() {\n    const url = await getExploreUrl(this.panel, this.panel.targets, this.datasource, this.datasourceSrv, this.timeSrv);\n    if (url) {\n      this.$timeout(() => this.$location.url(url));\n    }\n  }\n\n  addQuery(target) {\n    target.refId = this.dashboard.getNextQueryLetter(this.panel);\n\n    this.panel.targets.push(target);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n  }\n\n  removeQuery(target) {\n    const index = _.indexOf(this.panel.targets, target);\n    this.panel.targets.splice(index, 1);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.refresh();\n  }\n\n  moveQuery(target, direction) {\n    const index = _.indexOf(this.panel.targets, target);\n    _.move(this.panel.targets, index, index + direction);\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import _ from 'lodash';\n\nexport class QueryCtrl {\n  target: any;\n  datasource: any;\n  panelCtrl: any;\n  panel: any;\n  hasRawMode: boolean;\n  error: string;\n  isLastQuery: boolean;\n\n  constructor(public $scope, public $injector) {\n    this.panel = this.panelCtrl.panel;\n    this.isLastQuery = _.indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","export class ThresholdMapper {\n  static alertToGraphThresholds(panel) {\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds = (panel.thresholds = []);\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt' });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt' });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          } else {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          } else {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = true;\n      t.line = true;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import _ from 'lodash';\nimport { ThresholdMapper } from './state/ThresholdMapper';\nimport { QueryPart } from 'app/core/components/query_part/query_part';\nimport alertDef from './state/alertDef';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nexport class AlertTabCtrl {\n  panel: any;\n  panelCtrl: any;\n  testing: boolean;\n  testResult: any;\n  subTabIndex: number;\n  conditionTypes: any;\n  alert: any;\n  conditionModels: any;\n  evalFunctions: any;\n  evalOperators: any;\n  noDataModes: any;\n  executionErrorModes: any;\n  addNotificationSegment;\n  notifications;\n  alertNotifications;\n  error: string;\n  appSubUrl: string;\n  alertHistory: any;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private backendSrv,\n    private dashboardSrv,\n    private uiSegmentSrv,\n    private $q,\n    private datasourceSrv\n  ) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.subTabIndex = 0;\n    this.evalFunctions = alertDef.evalFunctions;\n    this.evalOperators = alertDef.evalOperators;\n    this.conditionTypes = alertDef.conditionTypes;\n    this.noDataModes = alertDef.noDataModes;\n    this.executionErrorModes = alertDef.executionErrorModes;\n    this.appSubUrl = config.appSubUrl;\n  }\n\n  $onInit() {\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();\n\n    // subscribe to graph threshold handle changes\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\n    this.panelCtrl.events.on('threshold-changed', thresholdChangedEventHandler);\n\n    // set panel alert edit mode\n    this.$scope.$on('$destroy', () => {\n      this.panelCtrl.events.off('threshold-changed', thresholdChangedEventHandler);\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n    });\n\n    // build notification model\n    this.notifications = [];\n    this.alertNotifications = [];\n    this.alertHistory = [];\n\n    return this.backendSrv.get('/api/alert-notifications').then(res => {\n      this.notifications = res;\n\n      this.initModel();\n      this.validateModel();\n    });\n  }\n\n  getAlertHistory() {\n    this.backendSrv\n      .get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`)\n      .then(res => {\n        this.alertHistory = _.map(res, ah => {\n          ah.time = this.dashboardSrv.getCurrent().formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\n          ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\n          ah.info = alertDef.getAlertAnnotationInfo(ah);\n          return ah;\n        });\n      });\n  }\n\n  getNotificationIcon(type): string {\n    switch (type) {\n      case 'email':\n        return 'fa fa-envelope';\n      case 'slack':\n        return 'fa fa-slack';\n      case 'victorops':\n        return 'fa fa-pagelines';\n      case 'webhook':\n        return 'fa fa-cubes';\n      case 'pagerduty':\n        return 'fa fa-bullhorn';\n      case 'opsgenie':\n        return 'fa fa-bell';\n      case 'hipchat':\n        return 'fa fa-mail-forward';\n      case 'pushover':\n        return 'fa fa-mobile';\n      case 'kafka':\n        return 'fa fa-random';\n      case 'teams':\n        return 'fa fa-windows';\n    }\n    return 'fa fa-bell';\n  }\n\n  getNotifications() {\n    return Promise.resolve(\n      this.notifications.map(item => {\n        return this.uiSegmentSrv.newSegment(item.name);\n      })\n    );\n  }\n\n  changeTabIndex(newTabIndex) {\n    this.subTabIndex = newTabIndex;\n\n    if (this.subTabIndex === 2) {\n      this.getAlertHistory();\n    }\n  }\n\n  notificationAdded() {\n    const model = _.find(this.notifications, {\n      name: this.addNotificationSegment.value,\n    });\n    if (!model) {\n      return;\n    }\n\n    this.alertNotifications.push({\n      name: model.name,\n      iconClass: this.getNotificationIcon(model.type),\n      isDefault: false,\n    });\n    this.alert.notifications.push({ id: model.id });\n\n    // reset plus button\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\n  }\n\n  removeNotification(index) {\n    this.alert.notifications.splice(index, 1);\n    this.alertNotifications.splice(index, 1);\n  }\n\n  initModel() {\n    const alert = (this.alert = this.panel.alert);\n    if (!alert) {\n      return;\n    }\n\n    alert.conditions = alert.conditions || [];\n    if (alert.conditions.length === 0) {\n      alert.conditions.push(this.buildDefaultCondition());\n    }\n\n    alert.noDataState = alert.noDataState || config.alertingNoDataOrNullValues;\n    alert.executionErrorState = alert.executionErrorState || config.alertingErrorOrTimeout;\n    alert.frequency = alert.frequency || '60s';\n    alert.handler = alert.handler || 1;\n    alert.notifications = alert.notifications || [];\n\n    const defaultName = this.panel.title + ' alert';\n    alert.name = alert.name || defaultName;\n\n    this.conditionModels = _.reduce(\n      alert.conditions,\n      (memo, value) => {\n        memo.push(this.buildConditionModel(value));\n        return memo;\n      },\n      []\n    );\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const addedNotification of alert.notifications) {\n      const model = _.find(this.notifications, { id: addedNotification.id });\n      if (model && model.isDefault === false) {\n        model.iconClass = this.getNotificationIcon(model.type);\n        this.alertNotifications.push(model);\n      }\n    }\n\n    for (const notification of this.notifications) {\n      if (notification.isDefault) {\n        notification.iconClass = this.getNotificationIcon(notification.type);\n        notification.bgColor = '#00678b';\n        this.alertNotifications.push(notification);\n      }\n    }\n\n    this.panelCtrl.editingThresholds = true;\n    this.panelCtrl.render();\n  }\n\n  graphThresholdChanged(evt) {\n    for (const condition of this.alert.conditions) {\n      if (condition.type === 'query') {\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\n        this.evaluatorParamsChanged();\n        break;\n      }\n    }\n  }\n\n  buildDefaultCondition() {\n    return {\n      type: 'query',\n      query: { params: ['A', '5m', 'now'] },\n      reducer: { type: 'avg', params: [] },\n      evaluator: { type: 'gt', params: [null] },\n      operator: { type: 'and' },\n    };\n  }\n\n  validateModel() {\n    if (!this.alert) {\n      return;\n    }\n\n    let firstTarget;\n    let foundTarget = null;\n\n    for (const condition of this.alert.conditions) {\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      for (const target of this.panel.targets) {\n        if (!firstTarget) {\n          firstTarget = target;\n        }\n        if (condition.query.params[0] === target.refId) {\n          foundTarget = target;\n          break;\n        }\n      }\n\n      if (!foundTarget) {\n        if (firstTarget) {\n          condition.query.params[0] = firstTarget.refId;\n          foundTarget = firstTarget;\n        } else {\n          this.error = 'Could not find any metric queries';\n        }\n      }\n\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\n      this.datasourceSrv.get(datasourceName).then(ds => {\n        if (!ds.meta.alerting) {\n          this.error = 'The datasource does not support alerting queries';\n        } else if (ds.targetContainsTemplate(foundTarget)) {\n          this.error = 'Template variables are not supported in alert queries';\n        } else {\n          this.error = '';\n        }\n      });\n    }\n  }\n\n  buildConditionModel(source) {\n    const cm: any = { source: source, type: source.type };\n\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\n    cm.evaluator = source.evaluator;\n    cm.operator = source.operator;\n\n    return cm;\n  }\n\n  handleQueryPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action-remove-part': {\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([]);\n      }\n      case 'part-param-changed': {\n        this.validateModel();\n      }\n      case 'get-param-options': {\n        const result = this.panel.targets.map(target => {\n          return this.uiSegmentSrv.newSegment({ value: target.refId });\n        });\n\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  handleReducerPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action': {\n        conditionModel.source.reducer.type = evt.action.value;\n        conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\n        break;\n      }\n      case 'get-part-actions': {\n        const result = [];\n        for (const type of alertDef.reducerTypes) {\n          if (type.value !== conditionModel.source.reducer.type) {\n            result.push(type);\n          }\n        }\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  addCondition(type) {\n    const condition = this.buildDefaultCondition();\n    // add to persited model\n    this.alert.conditions.push(condition);\n    // add to view model\n    this.conditionModels.push(this.buildConditionModel(condition));\n  }\n\n  removeCondition(index) {\n    this.alert.conditions.splice(index, 1);\n    this.conditionModels.splice(index, 1);\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete Alert',\n      text: 'Are you sure you want to delete this alert rule?',\n      text2: 'You need to save dashboard for the delete to take effect',\n      icon: 'fa-trash',\n      yesText: 'Delete',\n      onConfirm: () => {\n        delete this.panel.alert;\n        this.alert = null;\n        this.panel.thresholds = [];\n        this.conditionModels = [];\n        this.panelCtrl.alertState = null;\n        this.panelCtrl.render();\n      },\n    });\n  }\n\n  enable() {\n    this.panel.alert = {};\n    this.initModel();\n  }\n\n  evaluatorParamsChanged() {\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n    this.panelCtrl.render();\n  }\n\n  evaluatorTypeChanged(evaluator) {\n    // ensure params array is correct length\n    switch (evaluator.type) {\n      case 'lt':\n      case 'gt': {\n        evaluator.params = [evaluator.params[0]];\n        break;\n      }\n      case 'within_range':\n      case 'outside_range': {\n        evaluator.params = [evaluator.params[0], evaluator.params[1]];\n        break;\n      }\n      case 'no_value': {\n        evaluator.params = [];\n      }\n    }\n\n    this.evaluatorParamsChanged();\n  }\n\n  clearHistory() {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete Alert History',\n      text: 'Are you sure you want to remove all history & annotations for this alert?',\n      icon: 'fa-trash',\n      yesText: 'Yes',\n      onConfirm: () => {\n        this.backendSrv\n          .post('/api/annotations/mass-delete', {\n            dashboardId: this.panelCtrl.dashboard.id,\n            panelId: this.panel.id,\n          })\n          .then(res => {\n            this.alertHistory = [];\n            this.panelCtrl.refresh();\n          });\n      },\n    });\n  }\n\n  test() {\n    this.testing = true;\n    this.testResult = false;\n\n    const payload = {\n      dashboard: this.dashboardSrv.getCurrent().getSaveModelClone(),\n      panelId: this.panelCtrl.panel.id,\n    };\n\n    return this.backendSrv.post('/api/alerts/test', payload).then(res => {\n      this.testResult = res;\n      this.testing = false;\n    });\n  }\n}\n\n/** @ngInject */\nexport function alertTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\n    controller: AlertTabCtrl,\n  };\n}\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport { MetricsPanelCtrl } from 'app/features/panel/metrics_panel_ctrl';\nimport { QueryCtrl } from 'app/features/panel/query_ctrl';\nimport { alertTab } from 'app/features/alerting/AlertTabCtrl';\nimport { loadPluginCss } from 'app/features/plugins/plugin_loader';\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, alertTab, loadPluginCss };\n","import { isBoolean, isNumber, sortedUniq, sortedIndexOf, unescape as htmlUnescaped } from 'lodash';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport { isNullOrUndefined } from 'util';\n\nconst DEFAULT_DATETIME_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';\nconst POINT_TIME_INDEX = 1;\nconst POINT_VALUE_INDEX = 0;\n\nconst END_COLUMN = ';';\nconst END_ROW = '\\r\\n';\nconst QUOTE = '\"';\nconst EXPORT_FILENAME = 'grafana_data_export.csv';\n\nfunction csvEscaped(text) {\n  if (!text) {\n    return text;\n  }\n\n  return text.split(QUOTE).join(QUOTE + QUOTE);\n}\n\nconst domParser = new DOMParser();\nfunction htmlDecoded(text) {\n  if (!text) {\n    return text;\n  }\n\n  const regexp = /&[^;]+;/g;\n  function htmlDecoded(value) {\n    const parsedDom = domParser.parseFromString(value, 'text/html');\n    return parsedDom.body.textContent;\n  }\n  return text.replace(regexp, htmlDecoded).replace(regexp, htmlDecoded);\n}\n\nfunction formatSpecialHeader(useExcelHeader) {\n  return useExcelHeader ? `sep=${END_COLUMN}${END_ROW}` : '';\n}\n\nfunction formatRow(row, addEndRowDelimiter = true) {\n  let text = '';\n  for (let i = 0; i < row.length; i += 1) {\n    if (isBoolean(row[i]) || isNullOrUndefined(row[i])) {\n      text += row[i];\n    } else if (isNumber(row[i])) {\n      text += row[i].toLocaleString();\n    } else {\n      text += `${QUOTE}${csvEscaped(htmlUnescaped(htmlDecoded(row[i])))}${QUOTE}`;\n    }\n\n    if (i < row.length - 1) {\n      text += END_COLUMN;\n    }\n  }\n  return addEndRowDelimiter ? text + END_ROW : text;\n}\n\nexport function convertSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  let text = formatSpecialHeader(excel) + formatRow(['Series', 'Time', 'Value']);\n  for (let seriesIndex = 0; seriesIndex < seriesList.length; seriesIndex += 1) {\n    for (let i = 0; i < seriesList[seriesIndex].datapoints.length; i += 1) {\n      text += formatRow(\n        [\n          seriesList[seriesIndex].alias,\n          moment(seriesList[seriesIndex].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat),\n          seriesList[seriesIndex].datapoints[i][POINT_VALUE_INDEX],\n        ],\n        i < seriesList[seriesIndex].datapoints.length - 1 || seriesIndex < seriesList.length - 1\n      );\n    }\n  }\n  return text;\n}\n\nexport function exportSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsv(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  // add header\n  let text =\n    formatSpecialHeader(excel) +\n    formatRow(\n      ['Time'].concat(\n        seriesList.map(val => {\n          return val.alias;\n        })\n      )\n    );\n  // process data\n  seriesList = mergeSeriesByTime(seriesList);\n\n  // make text\n  for (let i = 0; i < seriesList[0].datapoints.length; i += 1) {\n    const timestamp = moment(seriesList[0].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat);\n    text += formatRow(\n      [timestamp].concat(\n        seriesList.map(series => {\n          return series.datapoints[i][POINT_VALUE_INDEX];\n        })\n      ),\n      i < seriesList[0].datapoints.length - 1\n    );\n  }\n\n  return text;\n}\n\n/**\n * Collect all unique timestamps from series list and use it to fill\n * missing points by null.\n */\nfunction mergeSeriesByTime(seriesList) {\n  let timestamps = [];\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    for (let j = 0; j < seriesPoints.length; j++) {\n      timestamps.push(seriesPoints[j][POINT_TIME_INDEX]);\n    }\n  }\n  timestamps = sortedUniq(timestamps.sort());\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    const seriesTimestamps = seriesPoints.map(p => p[POINT_TIME_INDEX]);\n    const extendedSeries = [];\n    let pointIndex;\n    for (let j = 0; j < timestamps.length; j++) {\n      pointIndex = sortedIndexOf(seriesTimestamps, timestamps[j]);\n      if (pointIndex !== -1) {\n        extendedSeries.push(seriesPoints[pointIndex]);\n      } else {\n        extendedSeries.push([null, timestamps[j]]);\n      }\n    }\n    seriesList[i].datapoints = extendedSeries;\n  }\n  return seriesList;\n}\n\nexport function exportSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertTableDataToCsv(table, excel = false) {\n  let text = formatSpecialHeader(excel);\n  // add headline\n  text += formatRow(table.columns.map(val => val.title || val.text));\n  // process data\n  for (let i = 0; i < table.rows.length; i += 1) {\n    text += formatRow(table.rows[i], i < table.rows.length - 1);\n  }\n  return text;\n}\n\nexport function exportTableDataToCsv(table, excel = false) {\n  const text = convertTableDataToCsv(table, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function saveSaveBlob(payload, fname) {\n  const blob = new Blob([payload], { type: 'text/csv;charset=utf-8;header=present;' });\n  saveAs(blob, fname);\n}\n","// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\nexport default function flatten(target, opts): any {\n  opts = opts || {};\n\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach(key => {\n      const value = object[key];\n      const isarray = opts.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!opts.maxDepth) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n\n  return output;\n}\n","import _ from 'lodash';\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport class SemVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  meta: string;\n\n  constructor(version: string) {\n    const match = versionPattern.exec(version);\n    if (match) {\n      this.major = Number(match[1]);\n      this.minor = Number(match[2] || 0);\n      this.patch = Number(match[3] || 0);\n      this.meta = match[4];\n    }\n  }\n\n  isGtOrEq(version: string): boolean {\n    const compared = new SemVersion(version);\n    return !(this.major < compared.major || this.minor < compared.minor || this.patch < compared.patch);\n  }\n\n  isValid(): boolean {\n    return _.isNumber(this.major);\n  }\n}\n\nexport function isVersionGtOrEq(a: string, b: string): boolean {\n  const aSemver = new SemVersion(a);\n  return aSemver.isGtOrEq(b);\n}\n","import _ from 'lodash';\nimport { isVersionGtOrEq } from 'app/core/utils/version';\n\nconst index = {};\n\nfunction addFuncDef(funcDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  index[funcDef.name] = funcDef;\n  if (funcDef.shortName) {\n    index[funcDef.shortName] = funcDef;\n  }\n}\n\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\n\naddFuncDef({\n  name: 'scaleToSeconds',\n  category: 'Transform',\n  params: [{ name: 'seconds', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'perSecond',\n  category: 'Transform',\n  params: [{ name: 'max value', type: 'int', optional: true }],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'holtWintersForecast',\n  category: 'Calculate',\n});\n\naddFuncDef({\n  name: 'holtWintersConfidenceBands',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'holtWintersAberration',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'nPercentile',\n  category: 'Calculate',\n  params: [{ name: 'Nth percentile', type: 'int' }],\n  defaultParams: [95],\n});\n\naddFuncDef({\n  name: 'diffSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'stddevSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'divideSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'multiplySeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'asPercent',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'group',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A', '#B'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'sumSeries',\n  shortName: 'sum',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'averageSeries',\n  shortName: 'avg',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'rangeOfSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'percentileOfSeries',\n  category: 'Combine',\n  params: [{ name: 'n', type: 'int' }, { name: 'interpolate', type: 'boolean', options: ['true', 'false'] }],\n  defaultParams: [95, 'false'],\n});\n\naddFuncDef({\n  name: 'sumSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'maxSeries',\n  shortName: 'max',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'minSeries',\n  shortName: 'min',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'averageSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'alias',\n  category: 'Alias',\n  params: [{ name: 'alias', type: 'string' }],\n  defaultParams: ['alias'],\n});\n\naddFuncDef({\n  name: 'aliasSub',\n  category: 'Alias',\n  params: [{ name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: ['', '\\\\1'],\n});\n\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'average', 'min', 'max'],\n    },\n  ],\n  defaultParams: ['max'],\n});\n\naddFuncDef({\n  name: 'cumulative',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'groupByNode',\n  category: 'Combine',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n  ],\n  defaultParams: [3, 'sum'],\n});\n\naddFuncDef({\n  name: 'aliasByNode',\n  category: 'Alias',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'substr',\n  category: 'Special',\n  params: [\n    {\n      name: 'start',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'stop',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: [0, 0],\n});\n\naddFuncDef({\n  name: 'sortByName',\n  category: 'Sorting',\n  params: [\n    {\n      name: 'natural',\n      type: 'boolean',\n      options: ['true', 'false'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['false'],\n});\n\naddFuncDef({\n  name: 'sortByMaxima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByMinima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByTotal',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'aliasByMetric',\n  category: 'Alias',\n});\n\naddFuncDef({\n  name: 'randomWalk',\n  fake: true,\n  category: 'Special',\n  params: [{ name: 'name', type: 'string' }],\n  defaultParams: ['randomWalk'],\n});\n\naddFuncDef({\n  name: 'countSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'constantLine',\n  category: 'Special',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'cactiStyle',\n  category: 'Special',\n});\n\naddFuncDef({\n  name: 'keepLastValue',\n  category: 'Transform',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'changed',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'integral',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'derivative',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'nonNegativeDerivative',\n  category: 'Transform',\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Transform',\n  params: [\n    {\n      name: 'amount',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n});\n\naddFuncDef({\n  name: 'timeStack',\n  category: 'Transform',\n  params: [\n    {\n      name: 'timeShiftUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n    { name: 'timeShiftStart', type: 'int' },\n    { name: 'timeShiftEnd', type: 'int' },\n  ],\n  defaultParams: ['1d', 0, 7],\n});\n\naddFuncDef({\n  name: 'summarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n    {\n      name: 'alignToFrom',\n      type: 'boolean',\n      optional: true,\n      options: ['false', 'true'],\n    },\n  ],\n  defaultParams: ['1h', 'sum', 'false'],\n});\n\naddFuncDef({\n  name: 'smartSummarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['1h', 'sum'],\n});\n\naddFuncDef({\n  name: 'absolute',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'hitcount',\n  category: 'Transform',\n  params: [{ name: 'interval', type: 'string' }],\n  defaultParams: ['10s'],\n});\n\naddFuncDef({\n  name: 'log',\n  category: 'Transform',\n  params: [{ name: 'base', type: 'int' }],\n  defaultParams: ['10'],\n});\n\naddFuncDef({\n  name: 'averageAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'averageBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'maximumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'maximumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'limit',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'mostDeviant',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exclude',\n  category: 'Filter Series',\n  params: [{ name: 'exclude', type: 'string' }],\n  defaultParams: ['exclude'],\n});\n\naddFuncDef({\n  name: 'highestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'highestMax',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'movingMedian',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: ['5'],\n});\n\naddFuncDef({\n  name: 'stdev',\n  category: 'Calculate',\n  params: [{ name: 'n', type: 'int' }, { name: 'tolerance', type: 'int' }],\n  defaultParams: [5, 0.1],\n});\n\naddFuncDef({\n  name: 'highestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAbovePercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowPercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'useSeriesAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }, { name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: [0, 'search', 'replace'],\n});\n\n////////////////////\n// Graphite 1.0.x //\n////////////////////\n\naddFuncDef({\n  name: 'aggregateLine',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'averageOutsidePercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'delay',\n  category: 'Transform',\n  params: [{ name: 'steps', type: 'int' }],\n  defaultParams: [1],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'fallbackSeries',\n  category: 'Special',\n  params: [{ name: 'fallback', type: 'string' }],\n  defaultParams: ['constantLine(0)'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'grep',\n  category: 'Filter Series',\n  params: [{ name: 'grep', type: 'string' }],\n  defaultParams: ['grep'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'groupByNodes',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: ['sum', 3],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'integralByInterval',\n  category: 'Transform',\n  params: [\n    {\n      name: 'intervalUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'interpolate',\n  category: 'Transform',\n  params: [{ name: 'limit', type: 'int', optional: true }],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'invert',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'isNonNull',\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'linearRegression',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'startSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n    {\n      name: 'endSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'mapSeries',\n  shortName: 'map',\n  params: [{ name: 'node', type: 'int' }],\n  defaultParams: [3],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMin',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMax',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingSum',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'multiplySeriesWithWildcards',\n  category: 'Combine',\n  params: [\n    {\n      name: 'position',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [2],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'offsetToZero',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'pow',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'powSeries',\n  category: 'Transform',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'reduceSeries',\n  shortName: 'reduce',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\n    },\n    {\n      name: 'reduceNode',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    },\n    { name: 'reduceMatchers', type: 'string', multiple: true },\n  ],\n  defaultParams: ['asPercent', 2, 'used_bytes'],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeBetweenPercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeEmptySeries',\n  category: 'Filter Series',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'squareRoot',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'timeSlice',\n  category: 'Transform',\n  params: [\n    {\n      name: 'startSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n    },\n    {\n      name: 'endSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['-1h'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'weightedAverage',\n  category: 'Combine',\n  params: [\n    { name: 'other', type: 'value_or_series', optional: true },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: ['#A', 4],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'seriesByTag',\n  category: 'Special',\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'groupByTags',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    { name: 'tag', type: 'string', multiple: true },\n  ],\n  defaultParams: ['sum', 'tag'],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'aliasByTags',\n  category: 'Alias',\n  params: [{ name: 'tag', type: 'string', multiple: true }],\n  defaultParams: ['tag'],\n  version: '1.1',\n});\n\nfunction isVersionRelatedFunction(obj, graphiteVersion) {\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\n}\n\nexport class FuncInstance {\n  def: any;\n  params: any;\n  text: any;\n  added: boolean;\n\n  constructor(funcDef, options) {\n    this.def = funcDef;\n    this.params = [];\n\n    if (options && options.withDefaultParams) {\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  render(metricExp) {\n    const str = this.def.name + '(';\n\n    const parameters = _.map(this.params, (value, index) => {\n      let paramType;\n      if (index < this.def.params.length) {\n        paramType = this.def.params[index].type;\n      } else if (_.get(_.last(this.def.params), 'multiple')) {\n        paramType = _.get(_.last(this.def.params), 'type');\n      }\n      // param types that should never be quoted\n      if (_.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {\n        return value;\n      }\n      // param types that might be quoted\n      if (_.includes(['int_or_interval', 'node_or_tag'], paramType) && _.isFinite(+value)) {\n        return _.toString(+value);\n      }\n      return \"'\" + value + \"'\";\n    });\n\n    // don't send any blank parameters to graphite\n    while (parameters[parameters.length - 1] === '') {\n      parameters.pop();\n    }\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue, index) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\n      return true;\n    }\n\n    if (index + 1 >= this.def.params.length && _.get(_.last(this.def.params), 'multiple')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      _.each(strValue.split(','), (partVal, idx) => {\n        this.updateParam(partVal.trim(), index + idx);\n      });\n      return;\n    }\n\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    let text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nfunction createFuncInstance(funcDef, options?, idx?) {\n  if (_.isString(funcDef)) {\n    funcDef = getFuncDef(funcDef, idx);\n  }\n  return new FuncInstance(funcDef, options);\n}\n\nfunction getFuncDef(name, idx?) {\n  if (!(idx || index)[name]) {\n    throw { message: 'Method not found ' + name };\n  }\n  return (idx || index)[name];\n}\n\nfunction getFuncDefs(graphiteVersion, idx?) {\n  const funcs = {};\n  _.forEach(idx || index, funcDef => {\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\n      funcs[funcDef.name] = _.assign({}, funcDef, {\n        params: _.filter(funcDef.params, param => {\n          return isVersionRelatedFunction(param, graphiteVersion);\n        }),\n      });\n    }\n  });\n  return funcs;\n}\n\n// parse response from graphite /functions endpoint into internal format\nfunction parseFuncDefs(rawDefs) {\n  const funcDefs = {};\n\n  _.forEach(rawDefs || {}, (funcDef, funcName) => {\n    // skip graphite graph functions\n    if (funcDef.group === 'Graph') {\n      return;\n    }\n\n    let description = funcDef.description;\n    if (description) {\n      // tidy up some pydoc syntax that rst2html can't handle\n      description = description\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\n        .replace(/.. seealso:: /g, 'See also: ')\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\n    }\n\n    const func = {\n      name: funcDef.name,\n      description: description,\n      category: funcDef.group,\n      params: [],\n      defaultParams: [],\n      fake: false,\n    };\n\n    // get rid of the first \"seriesList\" param\n    if (/^seriesLists?$/.test(_.get(funcDef, 'params[0].type', ''))) {\n      // handle functions that accept multiple seriesLists\n      // we leave the param in place but mark it optional, so users can add more series if they wish\n      if (funcDef.params[0].multiple) {\n        funcDef.params[0].required = false;\n        // otherwise chop off the first param, it'll be handled separately\n      } else {\n        funcDef.params.shift();\n      }\n      // tag function as fake\n    } else {\n      func.fake = true;\n    }\n\n    _.forEach(funcDef.params, rawParam => {\n      const param = {\n        name: rawParam.name,\n        type: 'string',\n        optional: !rawParam.required,\n        multiple: !!rawParam.multiple,\n        options: undefined,\n      };\n\n      if (rawParam.default !== undefined) {\n        func.defaultParams.push(_.toString(rawParam.default));\n      } else if (rawParam.suggestions) {\n        func.defaultParams.push(_.toString(rawParam.suggestions[0]));\n      } else {\n        func.defaultParams.push('');\n      }\n\n      if (rawParam.type === 'boolean') {\n        param.type = 'boolean';\n        param.options = ['true', 'false'];\n      } else if (rawParam.type === 'integer') {\n        param.type = 'int';\n      } else if (rawParam.type === 'float') {\n        param.type = 'float';\n      } else if (rawParam.type === 'node') {\n        param.type = 'node';\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'nodeOrTag') {\n        param.type = 'node_or_tag';\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'intOrInterval') {\n        param.type = 'int_or_interval';\n      } else if (rawParam.type === 'seriesList') {\n        param.type = 'value_or_series';\n      }\n\n      if (rawParam.options) {\n        param.options = _.map(rawParam.options, _.toString);\n      } else if (rawParam.suggestions) {\n        param.options = _.map(rawParam.suggestions, _.toString);\n      }\n\n      func.params.push(param);\n    });\n\n    funcDefs[funcName] = func;\n  });\n\n  return funcDefs;\n}\n\nexport default {\n  createFuncInstance: createFuncInstance,\n  getFuncDef: getFuncDef,\n  getFuncDefs: getFuncDefs,\n  parseFuncDefs: parseFuncDefs,\n};\n","import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\nimport gfunc from './gfunc';\n\n/** @ngInject */\nexport function GraphiteDatasource(this: any, instanceSettings, $q, backendSrv, templateSrv) {\n  this.basicAuth = instanceSettings.basicAuth;\n  this.url = instanceSettings.url;\n  this.name = instanceSettings.name;\n  this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';\n  this.supportsTags = supportsTags(this.graphiteVersion);\n  this.cacheTimeout = instanceSettings.cacheTimeout;\n  this.withCredentials = instanceSettings.withCredentials;\n  this.render_method = instanceSettings.render_method || 'POST';\n  this.funcDefs = null;\n  this.funcDefsPromise = null;\n\n  this.getQueryOptionsInfo = () => {\n    return {\n      maxDataPoints: true,\n      cacheTimeout: true,\n      links: [\n        {\n          text: 'Help',\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\n        },\n      ],\n    };\n  };\n\n  this.query = function(options) {\n    const graphOptions = {\n      from: this.translateTime(options.rangeRaw.from, false),\n      until: this.translateTime(options.rangeRaw.to, true),\n      targets: options.targets,\n      format: options.format,\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\n      maxDataPoints: options.maxDataPoints,\n    };\n\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\n    if (params.length === 0) {\n      return $q.when({ data: [] });\n    }\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/render',\n      data: params.join('&'),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    };\n\n    this.addTracingHeaders(httpOptions, options);\n\n    if (options.panelId) {\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(this.convertDataPointsToMs);\n  };\n\n  this.addTracingHeaders = function(httpOptions, options) {\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  };\n\n  this.convertDataPointsToMs = result => {\n    if (!result || !result.data) {\n      return [];\n    }\n    for (let i = 0; i < result.data.length; i++) {\n      const series = result.data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        series.datapoints[y][1] *= 1000;\n      }\n    }\n    return result;\n  };\n\n  this.parseTags = tagString => {\n    let tags = [];\n    tags = tagString.split(',');\n    if (tags.length === 1) {\n      tags = tagString.split(' ');\n      if (tags[0] === '') {\n        tags = [];\n      }\n    }\n    return tags;\n  };\n\n  this.annotationQuery = function(options) {\n    // Graphite metric as annotation\n    if (options.annotation.target) {\n      const target = templateSrv.replace(options.annotation.target, {}, 'glob');\n      const graphiteQuery = {\n        rangeRaw: options.rangeRaw,\n        targets: [{ target: target }],\n        format: 'json',\n        maxDataPoints: 100,\n      };\n\n      return this.query(graphiteQuery).then(result => {\n        const list = [];\n\n        for (let i = 0; i < result.data.length; i++) {\n          const target = result.data[i];\n\n          for (let y = 0; y < target.datapoints.length; y++) {\n            const datapoint = target.datapoints[y];\n            if (!datapoint[0]) {\n              continue;\n            }\n\n            list.push({\n              annotation: options.annotation,\n              time: datapoint[1],\n              title: target.target,\n            });\n          }\n        }\n\n        return list;\n      });\n    } else {\n      // Graphite event as annotation\n      const tags = templateSrv.replace(options.annotation.tags);\n      return this.events({ range: options.rangeRaw, tags: tags }).then(results => {\n        const list = [];\n        for (let i = 0; i < results.data.length; i++) {\n          const e = results.data[i];\n\n          let tags = e.tags;\n          if (_.isString(e.tags)) {\n            tags = this.parseTags(e.tags);\n          }\n\n          list.push({\n            annotation: options.annotation,\n            time: e.when * 1000,\n            title: e.what,\n            tags: tags,\n            text: e.data,\n          });\n        }\n\n        return list;\n      });\n    }\n  };\n\n  this.events = function(options) {\n    try {\n      let tags = '';\n      if (options.tags) {\n        tags = '&tags=' + options.tags;\n      }\n      return this.doGraphiteRequest({\n        method: 'GET',\n        url:\n          '/events/get_data?from=' +\n          this.translateTime(options.range.from, false) +\n          '&until=' +\n          this.translateTime(options.range.to, true) +\n          tags,\n      });\n    } catch (err) {\n      return $q.reject(err);\n    }\n  };\n\n  this.targetContainsTemplate = target => {\n    return templateSrv.variableExists(target.target);\n  };\n\n  this.translateTime = (date, roundUp) => {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\n        date = date.substring(3);\n        date = date.replace('m', 'min');\n        date = date.replace('M', 'mon');\n        return date;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    // graphite' s from filter is exclusive\n    // here we step back one minute in order\n    // to guarantee that we get all the data that\n    // exists for the specified range\n    if (roundUp) {\n      if (date.get('s')) {\n        date.add(1, 'm');\n      }\n    } else if (roundUp === false) {\n      if (date.get('s')) {\n        date.subtract(1, 'm');\n      }\n    }\n\n    return date.unix();\n  };\n\n  this.metricFindQuery = function(query, optionalOptions) {\n    const options = optionalOptions || {};\n    const interpolatedQuery = templateSrv.replace(query);\n\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\n    let matches = interpolatedQuery.match(/^tag_values\\(([^,]+)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      const exprRegex = /, *([^,]+)/g;\n      let match = exprRegex.exec(matches[2]);\n      while (match !== null) {\n        expressions.push(match[1]);\n        match = exprRegex.exec(matches[2]);\n      }\n      options.limit = 10000;\n      return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);\n    }\n\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\n    matches = interpolatedQuery.match(/^tags\\(([^,]*)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      if (matches[1]) {\n        expressions.push(matches[1]);\n        const exprRegex = /, *([^,]+)/g;\n        let match = exprRegex.exec(matches[2]);\n        while (match !== null) {\n          expressions.push(match[1]);\n          match = exprRegex.exec(matches[2]);\n        }\n      }\n      options.limit = 10000;\n      return this.getTagsAutoComplete(expressions, undefined, options);\n    }\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/metrics/find',\n      params: {\n        query: interpolatedQuery,\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, metric => {\n        return {\n          text: metric.text,\n          expandable: metric.expandable ? true : false,\n        };\n      });\n    });\n  };\n\n  this.getTags = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags',\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, tag => {\n        return {\n          text: tag.tag,\n          id: tag.id,\n        };\n      });\n    });\n  };\n\n  this.getTagValues = function(tag, optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/' + templateSrv.replace(tag),\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data && results.data.values) {\n        return _.map(results.data.values, value => {\n          return {\n            text: value.value,\n            id: value.id,\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagsAutoComplete = (expressions, tagPrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/tags',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (tagPrefix) {\n      httpOptions.params.tagPrefix = tagPrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, tag => {\n          return { text: tag };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagValuesAutoComplete = (expressions, tag, valuePrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/values',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n        tag: templateSrv.replace((tag || '').trim()),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (valuePrefix) {\n      httpOptions.params.valuePrefix = valuePrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, value => {\n          return { text: value };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getVersion = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/version',\n      requestId: options.requestId,\n    };\n\n    return this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.data) {\n          const semver = new SemVersion(results.data);\n          return semver.isValid() ? results.data : '';\n        }\n        return '';\n      })\n      .catch(() => {\n        return '';\n      });\n  };\n\n  this.createFuncInstance = function(funcDef, options?) {\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\n  };\n\n  this.getFuncDef = function(name) {\n    return gfunc.getFuncDef(name, this.funcDefs);\n  };\n\n  this.waitForFuncDefsLoaded = function() {\n    return this.getFuncDefs();\n  };\n\n  this.getFuncDefs = function() {\n    if (this.funcDefsPromise !== null) {\n      return this.funcDefsPromise;\n    }\n\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\n      return this.funcDefsPromise;\n    }\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/functions',\n    };\n\n    this.funcDefsPromise = this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.status !== 200 || typeof results.data !== 'object') {\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        } else {\n          this.funcDefs = gfunc.parseFuncDefs(results.data);\n        }\n        return this.funcDefs;\n      })\n      .catch(err => {\n        console.log('Fetching graphite functions error', err);\n        this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        return this.funcDefs;\n      });\n\n    return this.funcDefsPromise;\n  };\n\n  this.testDatasource = function() {\n    const query = {\n      panelId: 3,\n      rangeRaw: { from: 'now-1h', to: 'now' },\n      targets: [{ target: 'constantLine(100)' }],\n      maxDataPoints: 300,\n    };\n    return this.query(query).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  };\n\n  this.doGraphiteRequest = function(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    options.inspect = { type: 'graphite' };\n\n    return backendSrv.datasourceRequest(options);\n  };\n\n  this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  this.buildGraphiteParams = function(options, scopedVars) {\n    const graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\n    const cleanOptions = [],\n      targets = {};\n    let target, targetValue, i;\n    const regex = /\\#([A-Z])/g;\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\n    let hasTargets = false;\n\n    options['format'] = 'json';\n\n    function fixIntervalFormat(match) {\n      return match.replace('m', 'min').replace('M', 'mon');\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      if (!target.refId) {\n        target.refId = this._seriesRefLetters[i];\n      }\n\n      targetValue = templateSrv.replace(target.target, scopedVars);\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\n      targets[target.refId] = targetValue;\n    }\n\n    function nestedSeriesRegexReplacer(match, g1) {\n      return targets[g1] || match;\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      targetValue = targets[target.refId];\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\n      targets[target.refId] = targetValue;\n\n      if (!target.hide) {\n        hasTargets = true;\n        cleanOptions.push('target=' + encodeURIComponent(targetValue));\n      }\n    }\n\n    _.each(options, (value, key) => {\n      if (_.indexOf(graphiteOptions, key) === -1) {\n        return;\n      }\n      if (value) {\n        cleanOptions.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (!hasTargets) {\n      return [];\n    }\n\n    return cleanOptions;\n  };\n}\n\nfunction supportsTags(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction supportsFunctionIndex(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function graphiteAddFunc($compile) {\n  const inputTemplate =\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const buttonTemplate =\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n    '<i class=\"fa fa-plus\"></i></a>';\n\n  return {\n    link: function($scope, elem) {\n      const ctrl = $scope.ctrl;\n\n      const $input = $(inputTemplate);\n      const $button = $(buttonTemplate);\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      ctrl.datasource.getFuncDefs().then(funcDefs => {\n        const allFunctions = _.map(funcDefs, 'name').sort();\n\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: value => {\n            let funcDef = ctrl.datasource.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, funcName => {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) {\n                return '';\n              }\n            }\n\n            $scope.$apply(() => {\n              ctrl.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          },\n        });\n\n        $button.click(() => {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(() => {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(() => {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(() => {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      });\n\n      let drop;\n      const cleanUpDrop = () => {\n        if (drop) {\n          drop.destroy();\n          drop = null;\n        }\n      };\n\n      $(elem)\n        .on('mouseenter', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n\n          let funcDef;\n          try {\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\n          } catch (e) {\n            // ignore\n          }\n\n          if (funcDef && funcDef.description) {\n            let shortDesc = funcDef.description;\n            if (shortDesc.length > 500) {\n              shortDesc = shortDesc.substring(0, 497) + '...';\n            }\n\n            const contentElement = document.createElement('div');\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\n\n            drop = new Drop({\n              target: this,\n              content: contentElement,\n              classes: 'drop-popover',\n              openOn: 'always',\n              tetherOptions: {\n                attachment: 'bottom left',\n                targetAttachment: 'bottom right',\n              },\n            });\n          }\n        })\n        .on('mouseout', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n        });\n\n      $scope.$on('$destroy', cleanUpDrop);\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);\n\nfunction createFunctionDropDownMenu(funcDefs) {\n  const categories = {};\n\n  _.forEach(funcDefs, funcDef => {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = [];\n    }\n    categories[funcDef.category].push({\n      text: funcDef.name,\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\n    });\n  });\n\n  return _.sortBy(\n    _.map(categories, (submenu, category) => {\n      return {\n        text: category,\n        submenu: _.sortBy(submenu, 'text'),\n      };\n    }),\n    'text'\n  );\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\n\n/** @ngInject */\nexport function graphiteFuncEditor($compile, templateSrv, popoverSrv) {\n  const funcSpanTemplate = '<a ng-click=\"\">{{func.def.name}}</a><span>(</span>';\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  const funcControlsTemplate = `\n    <div class=\"tight-form-func-controls\">\n      <span class=\"pointer fa fa-arrow-left\"></span>\n      <span class=\"pointer fa fa-question-circle\"></span>\n      <span class=\"pointer fa fa-remove\" ></span>\n      <span class=\"pointer fa fa-arrow-right\"></span>\n    </div>`;\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope, elem) {\n      const $funcLink = $(funcSpanTemplate);\n      const $funcControls = $(funcControlsTemplate);\n      const ctrl = $scope.ctrl;\n      const func = $scope.func;\n      let scheduledRelink = false;\n      let paramCountAtLink = 0;\n      let cancelBlur = null;\n\n      function clickFuncParam(this: any, paramIndex) {\n        /*jshint validthis:true */\n\n        const $link = $(this);\n        const $comma = $link.prev('.comma');\n        const $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(() => {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if (_.last(func.def.params).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem, paramIndex) {\n        /*jshint validthis:true */\n        const $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        const $link = $input.prev();\n        const $comma = $link.prev('.comma');\n        const newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(() => {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(this: any, paramIndex) {\n        /*jshint validthis:true */\n        const inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(() => {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(this: any, paramIndex, e) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown(this: any) {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input, paramIndex) {\n        $input.attr('data-provide', 'typeahead');\n\n        let options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int') {\n          options = _.map(options, val => {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: value => {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        const typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function toggleFuncControls() {\n        const targetDiv = elem.closest('.tight-form');\n\n        if (elem.hasClass('show-function-controls')) {\n          elem.removeClass('show-function-controls');\n          targetDiv.removeClass('has-open-function');\n          $funcControls.hide();\n          return;\n        }\n\n        elem.addClass('show-function-controls');\n        targetDiv.addClass('has-open-function');\n\n        $funcControls.show();\n      }\n\n      function addElementsAndCompile() {\n        $funcControls.appendTo(elem);\n        $funcLink.appendTo(elem);\n\n        const defParams = _.clone(func.def.params);\n        const lastParam = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, (param, index) => {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n\n          const last = index >= func.params.length - 1 && param.optional && !paramValue;\n          if (last && param.multiple) {\n            paramValue = '+';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          const $paramLink = $(\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\n              (last ? ' query-part__last' : '') +\n              '\">' +\n              (paramValue || '&nbsp;') +\n              '</a>'\n          );\n          const $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(() => {\n            elem\n              .find('.graphite-func-param-link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function registerFuncControlsToggle() {\n        $funcLink.click(toggleFuncControls);\n      }\n\n      function registerFuncControlsActions() {\n        $funcControls.click(e => {\n          const $target = $(e.target);\n          if ($target.hasClass('fa-remove')) {\n            toggleFuncControls();\n            $scope.$apply(() => {\n              ctrl.removeFunction($scope.func);\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-left')) {\n            $scope.$apply(() => {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-right')) {\n            $scope.$apply(() => {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-question-circle')) {\n            const funcDef = ctrl.datasource.getFuncDef(func.def.name);\n            if (funcDef && funcDef.description) {\n              popoverSrv.show({\n                element: e.target,\n                position: 'bottom left',\n                classNames: 'drop-popover drop-function-def',\n                template: `\n                  <div style=\"overflow:auto;max-height:30rem;\">\n                    <h4> ${funcDef.name} </h4>\n                    ${rst2html(funcDef.description)}\n                  </div>`,\n                openOn: 'click',\n              });\n            } else {\n              window.open(\n                'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name,\n                '_blank'\n              );\n            }\n            return;\n          }\n        });\n      }\n\n      function relink() {\n        elem.children().remove();\n\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n        registerFuncControlsToggle();\n        registerFuncControlsActions();\n      }\n\n      relink();\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);\n","import _ from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nconst unicodeLetterTable = [\n  170,\n  170,\n  181,\n  181,\n  186,\n  186,\n  192,\n  214,\n  216,\n  246,\n  248,\n  705,\n  710,\n  721,\n  736,\n  740,\n  748,\n  748,\n  750,\n  750,\n  880,\n  884,\n  886,\n  887,\n  890,\n  893,\n  902,\n  902,\n  904,\n  906,\n  908,\n  908,\n  910,\n  929,\n  931,\n  1013,\n  1015,\n  1153,\n  1162,\n  1319,\n  1329,\n  1366,\n  1369,\n  1369,\n  1377,\n  1415,\n  1488,\n  1514,\n  1520,\n  1522,\n  1568,\n  1610,\n  1646,\n  1647,\n  1649,\n  1747,\n  1749,\n  1749,\n  1765,\n  1766,\n  1774,\n  1775,\n  1786,\n  1788,\n  1791,\n  1791,\n  1808,\n  1808,\n  1810,\n  1839,\n  1869,\n  1957,\n  1969,\n  1969,\n  1994,\n  2026,\n  2036,\n  2037,\n  2042,\n  2042,\n  2048,\n  2069,\n  2074,\n  2074,\n  2084,\n  2084,\n  2088,\n  2088,\n  2112,\n  2136,\n  2308,\n  2361,\n  2365,\n  2365,\n  2384,\n  2384,\n  2392,\n  2401,\n  2417,\n  2423,\n  2425,\n  2431,\n  2437,\n  2444,\n  2447,\n  2448,\n  2451,\n  2472,\n  2474,\n  2480,\n  2482,\n  2482,\n  2486,\n  2489,\n  2493,\n  2493,\n  2510,\n  2510,\n  2524,\n  2525,\n  2527,\n  2529,\n  2544,\n  2545,\n  2565,\n  2570,\n  2575,\n  2576,\n  2579,\n  2600,\n  2602,\n  2608,\n  2610,\n  2611,\n  2613,\n  2614,\n  2616,\n  2617,\n  2649,\n  2652,\n  2654,\n  2654,\n  2674,\n  2676,\n  2693,\n  2701,\n  2703,\n  2705,\n  2707,\n  2728,\n  2730,\n  2736,\n  2738,\n  2739,\n  2741,\n  2745,\n  2749,\n  2749,\n  2768,\n  2768,\n  2784,\n  2785,\n  2821,\n  2828,\n  2831,\n  2832,\n  2835,\n  2856,\n  2858,\n  2864,\n  2866,\n  2867,\n  2869,\n  2873,\n  2877,\n  2877,\n  2908,\n  2909,\n  2911,\n  2913,\n  2929,\n  2929,\n  2947,\n  2947,\n  2949,\n  2954,\n  2958,\n  2960,\n  2962,\n  2965,\n  2969,\n  2970,\n  2972,\n  2972,\n  2974,\n  2975,\n  2979,\n  2980,\n  2984,\n  2986,\n  2990,\n  3001,\n  3024,\n  3024,\n  3077,\n  3084,\n  3086,\n  3088,\n  3090,\n  3112,\n  3114,\n  3123,\n  3125,\n  3129,\n  3133,\n  3133,\n  3160,\n  3161,\n  3168,\n  3169,\n  3205,\n  3212,\n  3214,\n  3216,\n  3218,\n  3240,\n  3242,\n  3251,\n  3253,\n  3257,\n  3261,\n  3261,\n  3294,\n  3294,\n  3296,\n  3297,\n  3313,\n  3314,\n  3333,\n  3340,\n  3342,\n  3344,\n  3346,\n  3386,\n  3389,\n  3389,\n  3406,\n  3406,\n  3424,\n  3425,\n  3450,\n  3455,\n  3461,\n  3478,\n  3482,\n  3505,\n  3507,\n  3515,\n  3517,\n  3517,\n  3520,\n  3526,\n  3585,\n  3632,\n  3634,\n  3635,\n  3648,\n  3654,\n  3713,\n  3714,\n  3716,\n  3716,\n  3719,\n  3720,\n  3722,\n  3722,\n  3725,\n  3725,\n  3732,\n  3735,\n  3737,\n  3743,\n  3745,\n  3747,\n  3749,\n  3749,\n  3751,\n  3751,\n  3754,\n  3755,\n  3757,\n  3760,\n  3762,\n  3763,\n  3773,\n  3773,\n  3776,\n  3780,\n  3782,\n  3782,\n  3804,\n  3805,\n  3840,\n  3840,\n  3904,\n  3911,\n  3913,\n  3948,\n  3976,\n  3980,\n  4096,\n  4138,\n  4159,\n  4159,\n  4176,\n  4181,\n  4186,\n  4189,\n  4193,\n  4193,\n  4197,\n  4198,\n  4206,\n  4208,\n  4213,\n  4225,\n  4238,\n  4238,\n  4256,\n  4293,\n  4304,\n  4346,\n  4348,\n  4348,\n  4352,\n  4680,\n  4682,\n  4685,\n  4688,\n  4694,\n  4696,\n  4696,\n  4698,\n  4701,\n  4704,\n  4744,\n  4746,\n  4749,\n  4752,\n  4784,\n  4786,\n  4789,\n  4792,\n  4798,\n  4800,\n  4800,\n  4802,\n  4805,\n  4808,\n  4822,\n  4824,\n  4880,\n  4882,\n  4885,\n  4888,\n  4954,\n  4992,\n  5007,\n  5024,\n  5108,\n  5121,\n  5740,\n  5743,\n  5759,\n  5761,\n  5786,\n  5792,\n  5866,\n  5870,\n  5872,\n  5888,\n  5900,\n  5902,\n  5905,\n  5920,\n  5937,\n  5952,\n  5969,\n  5984,\n  5996,\n  5998,\n  6000,\n  6016,\n  6067,\n  6103,\n  6103,\n  6108,\n  6108,\n  6176,\n  6263,\n  6272,\n  6312,\n  6314,\n  6314,\n  6320,\n  6389,\n  6400,\n  6428,\n  6480,\n  6509,\n  6512,\n  6516,\n  6528,\n  6571,\n  6593,\n  6599,\n  6656,\n  6678,\n  6688,\n  6740,\n  6823,\n  6823,\n  6917,\n  6963,\n  6981,\n  6987,\n  7043,\n  7072,\n  7086,\n  7087,\n  7104,\n  7141,\n  7168,\n  7203,\n  7245,\n  7247,\n  7258,\n  7293,\n  7401,\n  7404,\n  7406,\n  7409,\n  7424,\n  7615,\n  7680,\n  7957,\n  7960,\n  7965,\n  7968,\n  8005,\n  8008,\n  8013,\n  8016,\n  8023,\n  8025,\n  8025,\n  8027,\n  8027,\n  8029,\n  8029,\n  8031,\n  8061,\n  8064,\n  8116,\n  8118,\n  8124,\n  8126,\n  8126,\n  8130,\n  8132,\n  8134,\n  8140,\n  8144,\n  8147,\n  8150,\n  8155,\n  8160,\n  8172,\n  8178,\n  8180,\n  8182,\n  8188,\n  8305,\n  8305,\n  8319,\n  8319,\n  8336,\n  8348,\n  8450,\n  8450,\n  8455,\n  8455,\n  8458,\n  8467,\n  8469,\n  8469,\n  8473,\n  8477,\n  8484,\n  8484,\n  8486,\n  8486,\n  8488,\n  8488,\n  8490,\n  8493,\n  8495,\n  8505,\n  8508,\n  8511,\n  8517,\n  8521,\n  8526,\n  8526,\n  8544,\n  8584,\n  11264,\n  11310,\n  11312,\n  11358,\n  11360,\n  11492,\n  11499,\n  11502,\n  11520,\n  11557,\n  11568,\n  11621,\n  11631,\n  11631,\n  11648,\n  11670,\n  11680,\n  11686,\n  11688,\n  11694,\n  11696,\n  11702,\n  11704,\n  11710,\n  11712,\n  11718,\n  11720,\n  11726,\n  11728,\n  11734,\n  11736,\n  11742,\n  11823,\n  11823,\n  12293,\n  12295,\n  12321,\n  12329,\n  12337,\n  12341,\n  12344,\n  12348,\n  12353,\n  12438,\n  12445,\n  12447,\n  12449,\n  12538,\n  12540,\n  12543,\n  12549,\n  12589,\n  12593,\n  12686,\n  12704,\n  12730,\n  12784,\n  12799,\n  13312,\n  13312,\n  19893,\n  19893,\n  19968,\n  19968,\n  40907,\n  40907,\n  40960,\n  42124,\n  42192,\n  42237,\n  42240,\n  42508,\n  42512,\n  42527,\n  42538,\n  42539,\n  42560,\n  42606,\n  42623,\n  42647,\n  42656,\n  42735,\n  42775,\n  42783,\n  42786,\n  42888,\n  42891,\n  42894,\n  42896,\n  42897,\n  42912,\n  42921,\n  43002,\n  43009,\n  43011,\n  43013,\n  43015,\n  43018,\n  43020,\n  43042,\n  43072,\n  43123,\n  43138,\n  43187,\n  43250,\n  43255,\n  43259,\n  43259,\n  43274,\n  43301,\n  43312,\n  43334,\n  43360,\n  43388,\n  43396,\n  43442,\n  43471,\n  43471,\n  43520,\n  43560,\n  43584,\n  43586,\n  43588,\n  43595,\n  43616,\n  43638,\n  43642,\n  43642,\n  43648,\n  43695,\n  43697,\n  43697,\n  43701,\n  43702,\n  43705,\n  43709,\n  43712,\n  43712,\n  43714,\n  43714,\n  43739,\n  43741,\n  43777,\n  43782,\n  43785,\n  43790,\n  43793,\n  43798,\n  43808,\n  43814,\n  43816,\n  43822,\n  43968,\n  44002,\n  44032,\n  44032,\n  55203,\n  55203,\n  55216,\n  55238,\n  55243,\n  55291,\n  63744,\n  64045,\n  64048,\n  64109,\n  64112,\n  64217,\n  64256,\n  64262,\n  64275,\n  64279,\n  64285,\n  64285,\n  64287,\n  64296,\n  64298,\n  64310,\n  64312,\n  64316,\n  64318,\n  64318,\n  64320,\n  64321,\n  64323,\n  64324,\n  64326,\n  64433,\n  64467,\n  64829,\n  64848,\n  64911,\n  64914,\n  64967,\n  65008,\n  65019,\n  65136,\n  65140,\n  65142,\n  65276,\n  65313,\n  65338,\n  65345,\n  65370,\n  65382,\n  65470,\n  65474,\n  65479,\n  65482,\n  65487,\n  65490,\n  65495,\n  65498,\n  65500,\n  65536,\n  65547,\n  65549,\n  65574,\n  65576,\n  65594,\n  65596,\n  65597,\n  65599,\n  65613,\n  65616,\n  65629,\n  65664,\n  65786,\n  65856,\n  65908,\n  66176,\n  66204,\n  66208,\n  66256,\n  66304,\n  66334,\n  66352,\n  66378,\n  66432,\n  66461,\n  66464,\n  66499,\n  66504,\n  66511,\n  66513,\n  66517,\n  66560,\n  66717,\n  67584,\n  67589,\n  67592,\n  67592,\n  67594,\n  67637,\n  67639,\n  67640,\n  67644,\n  67644,\n  67647,\n  67669,\n  67840,\n  67861,\n  67872,\n  67897,\n  68096,\n  68096,\n  68112,\n  68115,\n  68117,\n  68119,\n  68121,\n  68147,\n  68192,\n  68220,\n  68352,\n  68405,\n  68416,\n  68437,\n  68448,\n  68466,\n  68608,\n  68680,\n  69635,\n  69687,\n  69763,\n  69807,\n  73728,\n  74606,\n  74752,\n  74850,\n  77824,\n  78894,\n  92160,\n  92728,\n  110592,\n  110593,\n  119808,\n  119892,\n  119894,\n  119964,\n  119966,\n  119967,\n  119970,\n  119970,\n  119973,\n  119974,\n  119977,\n  119980,\n  119982,\n  119993,\n  119995,\n  119995,\n  119997,\n  120003,\n  120005,\n  120069,\n  120071,\n  120074,\n  120077,\n  120084,\n  120086,\n  120092,\n  120094,\n  120121,\n  120123,\n  120126,\n  120128,\n  120132,\n  120134,\n  120134,\n  120138,\n  120144,\n  120146,\n  120485,\n  120488,\n  120512,\n  120514,\n  120538,\n  120540,\n  120570,\n  120572,\n  120596,\n  120598,\n  120628,\n  120630,\n  120654,\n  120656,\n  120686,\n  120688,\n  120712,\n  120714,\n  120744,\n  120746,\n  120770,\n  120772,\n  120779,\n  131072,\n  131072,\n  173782,\n  173782,\n  173824,\n  173824,\n  177972,\n  177972,\n  177984,\n  177984,\n  178205,\n  178205,\n  194560,\n  195101,\n];\n\nconst identifierStartTable = [];\n\nfor (let i = 0; i < 128; i++) {\n  identifierStartTable[i] =\n    (i >= 48 && i <= 57) || // 0-9\n    i === 36 || // $\n    i === 126 || // ~\n    i === 124 || // |\n    (i >= 65 && i <= 90) || // A-Z\n    i === 95 || // _\n    i === 45 || // -\n    i === 42 || // *\n    i === 58 || // :\n    i === 91 || // templateStart [\n    i === 93 || // templateEnd ]\n    i === 63 || // ?\n    i === 37 || // %\n    i === 35 || // #\n    i === 61 || // =\n    (i >= 97 && i <= 122); // a-z\n}\n\nconst identifierPartTable = identifierStartTable;\n\nexport function Lexer(this: any, expression) {\n  this.input = expression;\n  this.char = 1;\n  this.from = 1;\n}\n\nLexer.prototype = {\n  peek: function(i) {\n    return this.input.charAt(i || 0);\n  },\n\n  skip: function(i) {\n    i = i || 1;\n    this.char += i;\n    this.input = this.input.slice(i);\n  },\n\n  tokenize: function() {\n    const list = [];\n    let token = this.next();\n    while (token) {\n      list.push(token);\n      token = this.next();\n    }\n    return list;\n  },\n\n  next: function() {\n    this.from = this.char;\n\n    // Move to the next non-space character.\n    if (/\\s/.test(this.peek())) {\n      while (/\\s/.test(this.peek())) {\n        this.from += 1;\n        this.skip();\n      }\n\n      if (this.peek() === '') {\n        // EOL\n        return null;\n      }\n    }\n\n    let match = this.scanStringLiteral();\n    if (match) {\n      return match;\n    }\n\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\n\n    if (match) {\n      this.skip(match.value.length);\n      return match;\n    }\n\n    // No token could be matched, give up.\n    return null;\n  },\n\n  scanTemplateSequence: function() {\n    if (this.peek() === '[' && this.peek(1) === '[') {\n      return {\n        type: 'templateStart',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    if (this.peek() === ']' && this.peek(1) === ']') {\n      return {\n        type: 'templateEnd',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a JavaScript identifier out of the next sequence of\n   * characters or return 'null' if its not possible. In addition,\n   * to Identifier this method can also produce BooleanLiteral\n   * (true/false) and NullLiteral (null).\n   */\n  scanIdentifier: function() {\n    let id = '';\n    let index = 0;\n    let type, char;\n\n    // Detects any character in the Unicode categories \"Uppercase\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n    // \"Letter number (Nl)\".\n    //\n    // Both approach and unicodeLetterTable were borrowed from\n    // Google's Traceur.\n\n    function isUnicodeLetter(code) {\n      for (let i = 0; i < unicodeLetterTable.length; ) {\n        if (code < unicodeLetterTable[i++]) {\n          return false;\n        }\n\n        if (code <= unicodeLetterTable[i++]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    const readUnicodeEscapeSequence = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      index += 1;\n\n      if (this.peek(index) !== 'u') {\n        return null;\n      }\n\n      const ch1 = this.peek(index + 1);\n      const ch2 = this.peek(index + 2);\n      const ch3 = this.peek(index + 3);\n      const ch4 = this.peek(index + 4);\n      let code;\n\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n        if (isUnicodeLetter(code)) {\n          index += 5;\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\n        }\n\n        return null;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierStart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (chr === '*') {\n        index += 1;\n        return chr;\n      }\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierStartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierPart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierPartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    char = getIdentifierStart();\n    if (char === null) {\n      return null;\n    }\n\n    id = char;\n    for (;;) {\n      char = getIdentifierPart();\n\n      if (char === null) {\n        break;\n      }\n\n      id += char;\n    }\n\n    switch (id) {\n      case 'true': {\n        type = 'bool';\n        break;\n      }\n      case 'false': {\n        type = 'bool';\n        break;\n      }\n      default:\n        type = 'identifier';\n    }\n\n    return {\n      type: type,\n      value: id,\n      pos: this.char,\n    };\n  },\n\n  /*\n   * Extract a numeric literal out of the next sequence of\n   * characters or return 'null' if its not possible. This method\n   * supports all numeric literals described in section 7.8.3\n   * of the EcmaScript 5 specification.\n   *\n   * This method's implementation was heavily influenced by the\n   * scanNumericLiteral function in the Esprima parser's source code.\n   */\n  scanNumericLiteral: function(): any {\n    let index = 0;\n    let value = '';\n    const length = this.input.length;\n    let char = this.peek(index);\n    let bad;\n\n    function isDecimalDigit(str) {\n      return /^[0-9]$/.test(str);\n    }\n\n    function isOctalDigit(str) {\n      return /^[0-7]$/.test(str);\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    function isIdentifierStart(ch) {\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    // handle negative num literals\n    if (char === '-') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n    }\n\n    // Numbers must start either with a decimal digit or a point.\n    if (char !== '.' && !isDecimalDigit(char)) {\n      return null;\n    }\n\n    if (char !== '.') {\n      value += this.peek(index);\n      index += 1;\n      char = this.peek(index);\n\n      if (value === '0') {\n        // Base-16 numbers.\n        if (char === 'x' || char === 'X') {\n          index += 1;\n          value += char;\n\n          while (index < length) {\n            char = this.peek(index);\n            if (!isHexDigit(char)) {\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (value.length <= 2) {\n            // 0x\n            return {\n              type: 'number',\n              value: value,\n              isMalformed: true,\n              pos: this.char,\n            };\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 16,\n            isMalformed: false,\n            pos: this.char,\n          };\n        }\n\n        // Base-8 numbers.\n        if (isOctalDigit(char)) {\n          index += 1;\n          value += char;\n          bad = false;\n\n          while (index < length) {\n            char = this.peek(index);\n\n            // Numbers like '019' (note the 9) are not valid octals\n            // but we still parse them and mark as malformed.\n\n            if (isDecimalDigit(char)) {\n              bad = true;\n            }\n            if (!isOctalDigit(char)) {\n              // if the char is a non punctuator then its not a valid number\n              if (!this.isPunctuator(char)) {\n                return null;\n              }\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 8,\n            isMalformed: bad,\n          };\n        }\n\n        // Decimal numbers that start with '0' such as '09' are illegal\n        // but we still parse them and return as malformed.\n\n        if (isDecimalDigit(char)) {\n          index += 1;\n          value += char;\n        }\n      }\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Decimal digits.\n\n    if (char === '.') {\n      value += char;\n      index += 1;\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Exponent part.\n\n    if (char === 'e' || char === 'E') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n\n      if (char === '+' || char === '-') {\n        value += this.peek(index);\n        index += 1;\n      }\n\n      char = this.peek(index);\n      if (isDecimalDigit(char)) {\n        value += char;\n        index += 1;\n\n        while (index < length) {\n          char = this.peek(index);\n          if (!isDecimalDigit(char)) {\n            break;\n          }\n          value += char;\n          index += 1;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (index < length) {\n      char = this.peek(index);\n      if (!this.isPunctuator(char)) {\n        return null;\n      }\n    }\n\n    return {\n      type: 'number',\n      value: value,\n      base: 10,\n      pos: this.char,\n      isMalformed: !isFinite(+value),\n    };\n  },\n\n  isPunctuator: ch1 => {\n    switch (ch1) {\n      case '.':\n      case '(':\n      case ')':\n      case ',':\n      case '{':\n      case '}':\n        return true;\n    }\n\n    return false;\n  },\n\n  scanPunctuator: function() {\n    const ch1 = this.peek();\n\n    if (this.isPunctuator(ch1)) {\n      return {\n        type: ch1,\n        value: ch1,\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a string out of the next sequence of characters and/or\n   * lines or return 'null' if its not possible. Since strings can\n   * span across multiple lines this method has to move the char\n   * pointer.\n   *\n   * This method recognizes pseudo-multiline JavaScript strings:\n   *\n   *   var str = \"hello\\\n   *   world\";\n   */\n  scanStringLiteral: function() {\n    /*jshint loopfunc:true */\n    const quote = this.peek();\n\n    // String must start with a quote.\n    if (quote !== '\"' && quote !== \"'\") {\n      return null;\n    }\n\n    let value = '';\n\n    this.skip();\n\n    while (this.peek() !== quote) {\n      if (this.peek() === '') {\n        // End Of Line\n        return {\n          type: 'string',\n          value: value,\n          isUnclosed: true,\n          quote: quote,\n          pos: this.char,\n        };\n      }\n\n      const char = this.peek();\n      const jump = 1; // A length of a jump, after we're done\n      // parsing this character.\n\n      value += char;\n      this.skip(jump);\n    }\n\n    this.skip();\n    return {\n      type: 'string',\n      value: value,\n      isUnclosed: false,\n      quote: quote,\n      pos: this.char,\n    };\n  },\n};\n","import { Lexer } from './lexer';\n\nexport function Parser(this: any, expression) {\n  this.expression = expression;\n  this.lexer = new Lexer(expression);\n  this.tokens = this.lexer.tokenize();\n  this.index = 0;\n}\n\nParser.prototype = {\n  getAst: function() {\n    return this.start();\n  },\n\n  start: function() {\n    try {\n      return this.functionCall() || this.metricExpression();\n    } catch (e) {\n      return {\n        type: 'error',\n        message: e.message,\n        pos: e.pos,\n      };\n    }\n  },\n\n  curlyBraceSegment: function() {\n    if (this.match('identifier', '{') || this.match('{')) {\n      let curlySegment = '';\n\n      while (!this.match('') && !this.match('}')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      if (!this.match('}')) {\n        this.errorMark(\"Expected closing '}'\");\n      }\n\n      curlySegment += this.consumeToken().value;\n\n      // if curly segment is directly followed by identifier\n      // include it in the segment\n      if (this.match('identifier')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      return {\n        type: 'segment',\n        value: curlySegment,\n      };\n    } else {\n      return null;\n    }\n  },\n\n  metricSegment: function() {\n    const curly = this.curlyBraceSegment();\n    if (curly) {\n      return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n      // hack to handle float numbers in metric segments\n      const parts = this.consumeToken().value.split('.');\n      if (parts.length === 2) {\n        this.tokens.splice(this.index, 0, { type: '.' });\n        this.tokens.splice(this.index + 1, 0, {\n          type: 'number',\n          value: parts[1],\n        });\n      }\n\n      return {\n        type: 'segment',\n        value: parts[0],\n      };\n    }\n\n    if (!this.match('templateStart')) {\n      this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n      this.errorMark('Expected identifier after templateStart');\n    }\n\n    const node = {\n      type: 'template',\n      value: this.consumeToken().value,\n    };\n\n    if (!this.match('templateEnd')) {\n      this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n  },\n\n  metricExpression: function() {\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\n      return null;\n    }\n\n    const node = {\n      type: 'metric',\n      segments: [],\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n      this.consumeToken();\n\n      const segment = this.metricSegment();\n      if (!segment) {\n        this.errorMark('Expected metric identifier');\n      }\n\n      node.segments.push(segment);\n    }\n\n    return node;\n  },\n\n  functionCall: function() {\n    if (!this.match('identifier', '(')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'function',\n      name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n      this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n  },\n\n  boolExpression: function() {\n    if (!this.match('bool')) {\n      return null;\n    }\n\n    return {\n      type: 'bool',\n      value: this.consumeToken().value === 'true',\n    };\n  },\n\n  functionParameters: function() {\n    if (this.match(')') || this.match('')) {\n      return [];\n    }\n\n    const param =\n      this.functionCall() ||\n      this.numericLiteral() ||\n      this.seriesRefExpression() ||\n      this.boolExpression() ||\n      this.metricExpression() ||\n      this.stringLiteral();\n\n    if (!this.match(',')) {\n      return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n  },\n\n  seriesRefExpression: function() {\n    if (!this.match('identifier')) {\n      return null;\n    }\n\n    const value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n\n    return {\n      type: 'series-ref',\n      value: token.value,\n    };\n  },\n\n  numericLiteral: function() {\n    if (!this.match('number')) {\n      return null;\n    }\n\n    return {\n      type: 'number',\n      value: parseFloat(this.consumeToken().value),\n    };\n  },\n\n  stringLiteral: function() {\n    if (!this.match('string')) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n    if (token.isUnclosed) {\n      throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n      type: 'string',\n      value: token.value,\n    };\n  },\n\n  errorMark: function(text) {\n    const currentToken = this.tokens[this.index];\n    const type = currentToken ? currentToken.type : 'end of string';\n    throw {\n      message: text + ' instead found ' + type,\n      pos: currentToken ? currentToken.pos : this.lexer.char,\n    };\n  },\n\n  // returns token value and incre\n  consumeToken: function() {\n    this.index++;\n    return this.tokens[this.index - 1];\n  },\n\n  matchToken: function(type, index) {\n    const token = this.tokens[this.index + index];\n    return (token === undefined && type === '') || (token && token.type === type);\n  },\n\n  match: function(token1, token2) {\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\n  },\n};\n","import _ from 'lodash';\nimport { Parser } from './parser';\n\nexport default class GraphiteQuery {\n  datasource: any;\n  target: any;\n  functions: any[];\n  segments: any[];\n  tags: any[];\n  error: any;\n  seriesByTagUsed: boolean;\n  checkOtherSegmentsIndex: number;\n  removeTagValue: string;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(datasource, target, templateSrv?, scopedVars?) {\n    this.datasource = datasource;\n    this.target = target;\n    this.parseTarget();\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.functions = [];\n    this.segments = [];\n    this.tags = [];\n    this.error = null;\n\n    if (this.target.textEditor) {\n      return;\n    }\n\n    const parser = new Parser(this.target.target);\n    const astNode = parser.getAst();\n    if (astNode === null) {\n      this.checkOtherSegmentsIndex = 0;\n      return;\n    }\n\n    if (astNode.type === 'error') {\n      this.error = astNode.message + ' at position: ' + astNode.pos;\n      this.target.textEditor = true;\n      return;\n    }\n\n    try {\n      this.parseTargetRecursive(astNode, null);\n    } catch (err) {\n      console.log('error parsing target:', err.message);\n      this.error = err.message;\n      this.target.textEditor = true;\n    }\n\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\n    this.checkForSeriesByTag();\n  }\n\n  checkForSeriesByTag() {\n    const seriesByTagFunc = _.find(this.functions, func => func.def.name === 'seriesByTag');\n    if (seriesByTagFunc) {\n      this.seriesByTagUsed = true;\n      seriesByTagFunc.hidden = true;\n      const tags = this.splitSeriesByTagParams(seriesByTagFunc);\n      this.tags = tags;\n    }\n  }\n\n  getSegmentPathUpTo(index) {\n    const arr = this.segments.slice(0, index);\n\n    return _.reduce(\n      arr,\n      (result, segment) => {\n        return result ? result + '.' + segment.value : segment.value;\n      },\n      ''\n    );\n  }\n\n  parseTargetRecursive(astNode, func) {\n    if (astNode === null) {\n      return null;\n    }\n\n    switch (astNode.type) {\n      case 'function':\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\n          withDefaultParams: false,\n        });\n        _.each(astNode.params, param => {\n          this.parseTargetRecursive(param, innerFunc);\n        });\n\n        innerFunc.updateText();\n        this.functions.push(innerFunc);\n        break;\n      case 'series-ref':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, astNode.value);\n        } else {\n          this.segments.push(astNode);\n        }\n        break;\n      case 'bool':\n      case 'string':\n      case 'number':\n        this.addFunctionParameter(func, astNode.value);\n        break;\n      case 'metric':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, _.join(_.map(astNode.segments, 'value'), '.'));\n        } else {\n          this.segments = astNode.segments;\n        }\n        break;\n    }\n  }\n\n  updateSegmentValue(segment, index) {\n    this.segments[index].value = segment.value;\n  }\n\n  addSelectMetricSegment() {\n    this.segments.push({ value: 'select metric' });\n  }\n\n  addFunction(newFunc) {\n    this.functions.push(newFunc);\n    this.moveAliasFuncLast();\n  }\n\n  moveAliasFuncLast() {\n    const aliasFunc = _.find(this.functions, func => {\n      return func.def.name.startsWith('alias');\n    });\n\n    if (aliasFunc) {\n      this.functions = _.without(this.functions, aliasFunc);\n      this.functions.push(aliasFunc);\n    }\n  }\n\n  addFunctionParameter(func, value) {\n    if (func.params.length >= func.def.params.length && !_.get(_.last(func.def.params), 'multiple', false)) {\n      throw { message: 'too many parameters for function ' + func.def.name };\n    }\n    func.params.push(value);\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n  }\n\n  updateModelTarget(targets) {\n    // render query\n    if (!this.target.textEditor) {\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.select metric$/, '');\n      this.target.target = _.reduce(this.functions, wrapFunction, metricPath);\n    }\n\n    this.updateRenderedTarget(this.target, targets);\n\n    // loop through other queries and update targetFull as needed\n    for (const target of targets || []) {\n      if (target.refId !== this.target.refId) {\n        this.updateRenderedTarget(target, targets);\n      }\n    }\n  }\n\n  updateRenderedTarget(target, targets) {\n    // render nested query\n    const targetsByRefId = _.keyBy(targets, 'refId');\n\n    // no references to self\n    delete targetsByRefId[target.refId];\n\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\n    let targetWithNestedQueries = target.target;\n\n    // Use ref count to track circular references\n    function countTargetRefs(targetsByRefId, refId) {\n      let refCount = 0;\n      _.each(targetsByRefId, (t, id) => {\n        if (id !== refId) {\n          const match = nestedSeriesRefRegex.exec(t.target);\n          const count = match && match.length ? match.length - 1 : 0;\n          refCount += count;\n        }\n      });\n      targetsByRefId[refId].refCount = refCount;\n    }\n    _.each(targetsByRefId, (t, id) => {\n      countTargetRefs(targetsByRefId, id);\n    });\n\n    // Keep interpolating until there are no query references\n    // The reason for the loop is that the referenced query might contain another reference to another query\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match, g1) => {\n        const t = targetsByRefId[g1];\n        if (!t) {\n          return match;\n        }\n\n        // no circular references\n        if (t.refCount === 0) {\n          delete targetsByRefId[g1];\n        }\n        t.refCount--;\n\n        return t.target;\n      });\n\n      if (updated === targetWithNestedQueries) {\n        break;\n      }\n\n      targetWithNestedQueries = updated;\n    }\n\n    delete target.targetFull;\n    if (target.target !== targetWithNestedQueries) {\n      target.targetFull = targetWithNestedQueries;\n    }\n  }\n\n  splitSeriesByTagParams(func) {\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\n    return _.flatten(\n      _.map(func.params, (param: string) => {\n        const matches = tagPattern.exec(param);\n        if (matches) {\n          const tag = matches.slice(1);\n          if (tag.length === 3) {\n            return {\n              key: tag[0],\n              operator: tag[1],\n              value: tag[2],\n            };\n          }\n        }\n        return [];\n      })\n    );\n  }\n\n  getSeriesByTagFuncIndex() {\n    return _.findIndex(this.functions, func => func.def.name === 'seriesByTag');\n  }\n\n  getSeriesByTagFunc() {\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\n    if (seriesByTagFuncIndex >= 0) {\n      return this.functions[seriesByTagFuncIndex];\n    } else {\n      return undefined;\n    }\n  }\n\n  addTag(tag) {\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params.push(newTagParam);\n    this.tags.push(tag);\n  }\n\n  removeTag(index) {\n    this.getSeriesByTagFunc().params.splice(index, 1);\n    this.tags.splice(index, 1);\n  }\n\n  updateTag(tag, tagIndex) {\n    this.error = null;\n\n    if (tag.key === this.removeTagValue) {\n      this.removeTag(tagIndex);\n      return;\n    }\n\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params[tagIndex] = newTagParam;\n    this.tags[tagIndex] = tag;\n  }\n\n  renderTagExpressions(excludeIndex = -1) {\n    return _.compact(\n      _.map(this.tags, (tagExpr, index) => {\n        // Don't render tag that we want to lookup\n        if (index !== excludeIndex) {\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\n        }\n      })\n    );\n  }\n}\n\nfunction wrapFunction(target, func) {\n  return func.render(target);\n}\n\nfunction renderTagString(tag) {\n  return tag.key + tag.operator + tag.value;\n}\n","import './add_graphite_func';\nimport './func_editor';\n\nimport _ from 'lodash';\nimport GraphiteQuery from './graphite_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport appEvents from 'app/core/app_events';\n\nconst GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];\nconst TAG_PREFIX = 'tag: ';\n\nexport class GraphiteQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: GraphiteQuery;\n  segments: any[];\n  addTagSegments: any[];\n  removeTagValue: string;\n  supportsTags: boolean;\n  paused: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector, private uiSegmentSrv, private templateSrv, $timeout) {\n    super($scope, $injector);\n    this.supportsTags = this.datasource.supportsTags;\n    this.paused = false;\n    this.target.target = this.target.target || '';\n\n    this.datasource.waitForFuncDefsLoaded().then(() => {\n      this.queryModel = new GraphiteQuery(this.datasource, this.target, templateSrv);\n      this.buildSegments();\n    });\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.queryModel.parseTarget();\n    this.buildSegments();\n  }\n\n  toggleEditorMode() {\n    this.target.textEditor = !this.target.textEditor;\n    this.parseTarget();\n  }\n\n  buildSegments() {\n    this.segments = _.map(this.queryModel.segments, segment => {\n      return this.uiSegmentSrv.newSegment(segment);\n    });\n\n    const checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;\n    this.checkOtherSegments(checkOtherSegmentsIndex);\n\n    if (this.queryModel.seriesByTagUsed) {\n      this.fixTagSegments();\n    }\n  }\n\n  addSelectMetricSegment() {\n    this.queryModel.addSelectMetricSegment();\n    this.segments.push(this.uiSegmentSrv.newSelectMetric());\n  }\n\n  checkOtherSegments(fromIndex) {\n    if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {\n      return;\n    }\n\n    if (fromIndex === 0) {\n      this.addSelectMetricSegment();\n      return;\n    }\n\n    const path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);\n    if (path === '') {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .metricFindQuery(path)\n      .then(segments => {\n        if (segments.length === 0) {\n          if (path !== '') {\n            this.queryModel.segments = this.queryModel.segments.splice(0, fromIndex);\n            this.segments = this.segments.splice(0, fromIndex);\n            this.addSelectMetricSegment();\n          }\n        } else if (segments[0].expandable) {\n          if (this.segments.length === fromIndex) {\n            this.addSelectMetricSegment();\n          } else {\n            return this.checkOtherSegments(fromIndex + 1);\n          }\n        }\n      })\n      .catch(err => {\n        appEvents.emit('alert-error', ['Error', err]);\n      });\n  }\n\n  setSegmentFocus(segmentIndex) {\n    _.each(this.segments, (segment, index) => {\n      segment.focus = segmentIndex === index;\n    });\n  }\n\n  getAltSegments(index, prefix) {\n    let query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';\n    if (index > 0) {\n      query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;\n    }\n    const options = {\n      range: this.panelCtrl.range,\n      requestId: 'get-alt-segments',\n    };\n\n    return this.datasource\n      .metricFindQuery(query, options)\n      .then(segments => {\n        const altSegments = _.map(segments, segment => {\n          return this.uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (index > 0 && altSegments.length === 0) {\n          return altSegments;\n        }\n\n        // add query references\n        if (index === 0) {\n          _.eachRight(this.panelCtrl.panel.targets, target => {\n            if (target.refId === this.queryModel.target.refId) {\n              return;\n            }\n\n            altSegments.unshift(\n              this.uiSegmentSrv.newSegment({\n                type: 'series-ref',\n                value: '#' + target.refId,\n                expandable: false,\n              })\n            );\n          });\n        }\n\n        // add template variables\n        _.eachRight(this.templateSrv.variables, variable => {\n          altSegments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: '$' + variable.name,\n              expandable: true,\n            })\n          );\n        });\n\n        // add wildcard option\n        altSegments.unshift(this.uiSegmentSrv.newSegment('*'));\n\n        if (this.supportsTags && index === 0) {\n          this.removeTaggedEntry(altSegments);\n          return this.addAltTagSegments(prefix, altSegments);\n        } else {\n          return altSegments;\n        }\n      })\n      .catch(err => {\n        return [];\n      });\n  }\n\n  addAltTagSegments(prefix, altSegments) {\n    return this.getTagsAsSegments(prefix).then(tagSegments => {\n      tagSegments = _.map(tagSegments, segment => {\n        segment.value = TAG_PREFIX + segment.value;\n        return segment;\n      });\n      return altSegments.concat(...tagSegments);\n    });\n  }\n\n  removeTaggedEntry(altSegments) {\n    altSegments = _.remove(altSegments, s => s.value === '_tagged');\n  }\n\n  segmentValueChanged(segment, segmentIndex) {\n    this.error = null;\n    this.queryModel.updateSegmentValue(segment, segmentIndex);\n\n    if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {\n      this.queryModel.functions = [];\n    }\n\n    if (segment.type === 'tag') {\n      const tag = removeTagPrefix(segment.value);\n      this.pause();\n      this.addSeriesByTagFunc(tag);\n      return;\n    }\n\n    if (segment.expandable) {\n      return this.checkOtherSegments(segmentIndex + 1).then(() => {\n        this.setSegmentFocus(segmentIndex + 1);\n        this.targetChanged();\n      });\n    } else {\n      this.spliceSegments(segmentIndex + 1);\n    }\n\n    this.setSegmentFocus(segmentIndex + 1);\n    this.targetChanged();\n  }\n\n  spliceSegments(index) {\n    this.segments = this.segments.splice(0, index);\n    this.queryModel.segments = this.queryModel.segments.splice(0, index);\n  }\n\n  emptySegments() {\n    this.queryModel.segments = [];\n    this.segments = [];\n  }\n\n  targetTextChanged() {\n    this.updateModelTarget();\n    this.refresh();\n  }\n\n  updateModelTarget() {\n    this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);\n  }\n\n  targetChanged() {\n    if (this.queryModel.error) {\n      return;\n    }\n\n    const oldTarget = this.queryModel.target.target;\n    this.updateModelTarget();\n\n    if (this.queryModel.target !== oldTarget && !this.paused) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  addFunction(funcDef) {\n    const newFunc = this.datasource.createFuncInstance(funcDef, {\n      withDefaultParams: true,\n    });\n    newFunc.added = true;\n    this.queryModel.addFunction(newFunc);\n    this.smartlyHandleNewAliasByNode(newFunc);\n\n    if (this.segments.length === 1 && this.segments[0].fake) {\n      this.emptySegments();\n    }\n\n    if (!newFunc.params.length && newFunc.added) {\n      this.targetChanged();\n    }\n\n    if (newFunc.def.name === 'seriesByTag') {\n      this.parseTarget();\n    }\n  }\n\n  removeFunction(func) {\n    this.queryModel.removeFunction(func);\n    this.targetChanged();\n  }\n\n  addSeriesByTagFunc(tag) {\n    const newFunc = this.datasource.createFuncInstance('seriesByTag', {\n      withDefaultParams: false,\n    });\n    const tagParam = `${tag}=`;\n    newFunc.params = [tagParam];\n    this.queryModel.addFunction(newFunc);\n    newFunc.added = true;\n\n    this.emptySegments();\n    this.targetChanged();\n    this.parseTarget();\n  }\n\n  smartlyHandleNewAliasByNode(func) {\n    if (func.def.name !== 'aliasByNode') {\n      return;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i].value.indexOf('*') >= 0) {\n        func.params[0] = i;\n        func.added = false;\n        this.targetChanged();\n        return;\n      }\n    }\n  }\n\n  getAllTags() {\n    return this.datasource.getTags().then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTags(index, tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTagsAsSegments(tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions();\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      return _.map(values, val => {\n        return this.uiSegmentSrv.newSegment({\n          value: val.text,\n          type: 'tag',\n          expandable: false,\n        });\n      });\n    });\n  }\n\n  getTagOperators() {\n    return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);\n  }\n\n  getAllTagValues(tag) {\n    const tagKey = tag.key;\n    return this.datasource.getTagValues(tagKey).then(values => {\n      const altValues = _.map(values, 'text');\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  getTagValues(tag, index, valuePrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    const tagKey = tag.key;\n    return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then(values => {\n      const altValues = _.map(values, 'text');\n      // Add template variables as additional values\n      _.eachRight(this.templateSrv.variables, variable => {\n        altValues.push('${' + variable.name + ':regex}');\n      });\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  tagChanged(tag, tagIndex) {\n    this.queryModel.updateTag(tag, tagIndex);\n    this.targetChanged();\n  }\n\n  addNewTag(segment) {\n    const newTagKey = segment.value;\n    const newTag = { key: newTagKey, operator: '=', value: '' };\n    this.queryModel.addTag(newTag);\n    this.targetChanged();\n    this.fixTagSegments();\n  }\n\n  removeTag(index) {\n    this.queryModel.removeTag(index);\n    this.targetChanged();\n  }\n\n  fixTagSegments() {\n    // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)\n    this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];\n  }\n\n  showDelimiter(index) {\n    return index !== this.queryModel.tags.length - 1;\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  unpause() {\n    this.paused = false;\n    this.panelCtrl.refresh();\n  }\n}\n\nfunction mapToDropdownOptions(results) {\n  return _.map(results, value => {\n    return { text: value, value: value };\n  });\n}\n\nfunction removeTagPrefix(value: string): string {\n  return value.replace(TAG_PREFIX, '');\n}\n","export class GraphiteConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/graphite/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.graphiteVersion = this.current.jsonData.graphiteVersion || '0.9';\n    this.autoDetectGraphiteVersion();\n  }\n\n  autoDetectGraphiteVersion() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv\n      .loadDatasource(this.current.name)\n      .then(ds => {\n        return ds.getVersion();\n      })\n      .then(version => {\n        this.graphiteVersions.push({ name: version, value: version });\n        this.current.jsonData.graphiteVersion = version;\n      });\n  }\n\n  graphiteVersions = [\n    { name: '0.9.x', value: '0.9' },\n    { name: '1.0.x', value: '1.0' },\n    { name: '1.1.x', value: '1.1' },\n  ];\n}\n","import { GraphiteDatasource } from './datasource';\nimport { GraphiteQueryCtrl } from './query_ctrl';\nimport { GraphiteConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GraphiteDatasource as Datasource,\n  GraphiteQueryCtrl as QueryCtrl,\n  GraphiteConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class CloudWatchQueryParameter {\n  constructor() {\n    return {\n      templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n      controller: 'CloudWatchQueryParameterCtrl',\n      restrict: 'E',\n      scope: {\n        target: '=',\n        datasource: '=',\n        onChange: '&',\n      },\n    };\n  }\n}\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n      target.returnData = target.returnData || false;\n      target.highResolution = target.highResolution || false;\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return $q.when(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment, index) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = segments => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment, $index) => {\n      if (segment.type === 'operator') {\n        return $q.when([]);\n      }\n\n      const target = $scope.target;\n      let query = $q.when([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment, index) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then(results => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = addTemplateVars => {\n      return results => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').directive('cloudwatchQueryParameter', CloudWatchQueryParameter);\nangular.module('grafana.controllers').controller('CloudWatchQueryParameterCtrl', CloudWatchQueryParameterCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport kbn from 'app/core/utils/kbn';\nimport * as templatingVariable from 'app/features/templating/variable';\n// import * as moment from 'moment';\n\nexport default class CloudWatchDatasource {\n  type: any;\n  name: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  instanceSettings: any;\n  standardStatistics: any;\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.type = 'cloudwatch';\n    this.name = instanceSettings.name;\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.instanceSettings = instanceSettings;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n  }\n\n  query(options) {\n    options = angular.copy(options);\n    options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n      item.namespace = this.templateSrv.replace(item.namespace, options.scopedVars);\n      item.metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n      item.returnData = typeof item.hide === 'undefined' ? true : !item.hide;\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        return s.indexOf('p') === 0 && !/p\\d{2}\\.\\d{2}/.test(s);\n      });\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.instanceSettings.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request);\n  }\n\n  getPeriod(target, options, now?) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    const end = this.convertToCloudWatchTime(options.range.to, true);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const range = end - start;\n\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    let periodUnit = 60;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          periodUnit = period = 300;\n        } else {\n          periodUnit = period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        periodUnit = period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        periodUnit = period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        periodUnit = period = 60 * 60;\n      }\n    } else {\n      if (/^\\d+$/.test(target.period)) {\n        period = parseInt(target.period, 10);\n      } else {\n        period = kbn.interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n    if (!target.highResolution && range / period >= 1440) {\n      period = Math.ceil(range / 1440 / periodUnit) * periodUnit;\n    }\n\n    return period;\n  }\n\n  performTimeSeriesQuery(request) {\n    return this.awsRequest('/api/tsdb/query', request).then(res => {\n      const data = [];\n\n      if (res.results) {\n        _.forEach(res.results, queryRes => {\n          _.forEach(queryRes.series, series => {\n            data.push({ target: series.name, datapoints: series.points, unit: queryRes.meta.unit || 'none' });\n          });\n        });\n      }\n\n      return { data: data };\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  getMetrics(namespace, region) {\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionKeys(namespace, region) {\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionValues(region, namespace, metricName, dimensionKey, filterDimensions) {\n    return this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n  }\n\n  getEbsVolumeIds(region, instanceId) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region, attributeName, filters) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  metricFindQuery(query) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    /* use billing metrics for test */\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(\n      () => {\n        return { status: 'success', message: 'Data source is working' };\n      },\n      err => {\n        return { status: 'error', message: err.message };\n      }\n    );\n  }\n\n  awsRequest(url, data) {\n    const options = {\n      method: 'POST',\n      url: url,\n      data: data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then(result => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  getExpandedVariables(target, dimensionKey, variable, templateSrv) {\n    /* if the all checkbox is marked we should add all values to the targets */\n    const allSelected = _.find(variable.options, { selected: true, text: 'All' });\n    const selectedVariables = _.filter(variable.options, v => {\n      if (allSelected) {\n        return v.text !== 'All';\n      } else {\n        return v.selected;\n      }\n    });\n    const currentVariables = !_.isArray(variable.current.value)\n      ? [variable.current]\n      : variable.current.value.map(v => {\n          return {\n            text: v,\n            value: v,\n          };\n        });\n    const useSelectedVariables =\n      selectedVariables.some(s => {\n        return s.value === currentVariables[0].value;\n      }) || currentVariables[0].value === '$__all';\n    return (useSelectedVariables ? selectedVariables : currentVariables).map(v => {\n      const t = angular.copy(target);\n      const scopedVar = {};\n      scopedVar[variable.name] = v;\n      t.refId = target.refId + '_' + v.value;\n      t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);\n      if (variable.multi && target.id) {\n        t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id\n      } else {\n        t.id = target.id;\n      }\n      return t;\n    });\n  }\n\n  expandTemplateVariable(targets, scopedVars, templateSrv) {\n    // Datasource and template srv logic uber-complected. This should be cleaned up.\n    return _.chain(targets)\n      .map(target => {\n        const dimensionKey = _.findKey(target.dimensions, v => {\n          return templateSrv.variableExists(v) && !_.has(scopedVars, templateSrv.getVariableName(v));\n        });\n\n        if (dimensionKey) {\n          const multiVariable = _.find(templateSrv.variables, variable => {\n            return (\n              templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name) && variable.multi\n            );\n          });\n          const variable = _.find(templateSrv.variables, variable => {\n            return templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name);\n          });\n          return this.getExpandedVariables(target, dimensionKey, multiVariable || variable, templateSrv);\n        } else {\n          return [target];\n        }\n      })\n      .flatten()\n      .value();\n  }\n\n  convertToCloudWatchTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions, scopedVars) {\n    const convertedDimensions = {};\n    _.each(dimensions, (value, key) => {\n      convertedDimensions[this.templateSrv.replace(key, scopedVars)] = this.templateSrv.replace(value, scopedVars);\n    });\n    return convertedDimensions;\n  }\n}\n","export class CloudWatchConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  accessKeyExist = false;\n  secretKeyExist = false;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n\n  authTypes = [\n    { name: 'Access & secret key', value: 'keys' },\n    { name: 'Credentials file', value: 'credentials' },\n    { name: 'ARN', value: 'arn' },\n  ];\n\n  indexPatternTypes = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n}\n","import './query_parameter_ctrl';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class CloudWatchQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  aliasSyntax: string;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';\n  }\n}\n","import './query_parameter_ctrl';\n\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchQueryCtrl } from './query_ctrl';\nimport { CloudWatchConfigCtrl } from './config_ctrl';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  CloudWatchDatasource as Datasource,\n  CloudWatchQueryCtrl as QueryCtrl,\n  CloudWatchConfigCtrl as ConfigCtrl,\n  CloudWatchAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport const metricAggTypes = [\n  { text: 'Count', value: 'count', requiresField: false },\n  {\n    text: 'Average',\n    value: 'avg',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Sum',\n    value: 'sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Max',\n    value: 'max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Min',\n    value: 'min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Extended Stats',\n    value: 'extended_stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Percentiles',\n    value: 'percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Unique Count',\n    value: 'cardinality',\n    requiresField: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Moving Average',\n    value: 'moving_avg',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Derivative',\n    value: 'derivative',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  { text: 'Raw Document', value: 'raw_document', requiresField: false },\n];\n\nexport const bucketAggTypes = [\n  { text: 'Terms', value: 'terms', requiresField: true },\n  { text: 'Filters', value: 'filters' },\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\n  { text: 'Histogram', value: 'histogram', requiresField: true },\n];\n\nexport const orderByOptions = [{ text: 'Doc Count', value: '_count' }, { text: 'Term value', value: '_term' }];\n\nexport const orderOptions = [{ text: 'Top', value: 'desc' }, { text: 'Bottom', value: 'asc' }];\n\nexport const sizeOptions = [\n  { text: 'No limit', value: '0' },\n  { text: '1', value: '1' },\n  { text: '2', value: '2' },\n  { text: '3', value: '3' },\n  { text: '5', value: '5' },\n  { text: '10', value: '10' },\n  { text: '15', value: '15' },\n  { text: '20', value: '20' },\n];\n\nexport const extendedStats = [\n  { text: 'Avg', value: 'avg' },\n  { text: 'Min', value: 'min' },\n  { text: 'Max', value: 'max' },\n  { text: 'Sum', value: 'sum' },\n  { text: 'Count', value: 'count' },\n  { text: 'Std Dev', value: 'std_deviation' },\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const intervalOptions = [\n  { text: 'auto', value: 'auto' },\n  { text: '10s', value: '10s' },\n  { text: '1m', value: '1m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '20m', value: '20m' },\n  { text: '1h', value: '1h' },\n  { text: '1d', value: '1d' },\n];\n\nexport const movingAvgModelOptions = [\n  { text: 'Simple', value: 'simple' },\n  { text: 'Linear', value: 'linear' },\n  { text: 'Exponentially Weighted', value: 'ewma' },\n  { text: 'Holt Linear', value: 'holt' },\n  { text: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const pipelineOptions = {\n  moving_avg: [\n    { text: 'window', default: 5 },\n    { text: 'model', default: 'simple' },\n    { text: 'predict', default: undefined },\n    { text: 'minimize', default: false },\n  ],\n  derivative: [{ text: 'unit', default: undefined }],\n};\n\nexport const movingAvgModelSettings = {\n  simple: [],\n  linear: [],\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\n  holt: [{ text: 'Alpha', value: 'alpha', default: undefined }, { text: 'Beta', value: 'beta', default: undefined }],\n  holt_winters: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n    { text: 'Gamma', value: 'gamma', default: undefined },\n    { text: 'Period', value: 'period', default: undefined },\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\n  ],\n};\n\nexport function getMetricAggTypes(esVersion) {\n  return _.filter(metricAggTypes, f => {\n    if (f.minVersion) {\n      return f.minVersion <= esVersion;\n    } else {\n      return true;\n    }\n  });\n}\n\nexport function getPipelineOptions(metric) {\n  if (!isPipelineAgg(metric.type)) {\n    return [];\n  }\n\n  return pipelineOptions[metric.type];\n}\n\nexport function isPipelineAgg(metricType) {\n  if (metricType) {\n    const po = pipelineOptions[metricType];\n    return po !== null && po !== undefined;\n  }\n\n  return false;\n}\n\nexport function getPipelineAggOptions(targets) {\n  const result = [];\n  _.each(targets.metrics, metric => {\n    if (!isPipelineAgg(metric.type)) {\n      result.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return result;\n}\n\nexport function getMovingAvgSettings(model, filtered) {\n  const filteredResult = [];\n  if (filtered) {\n    _.each(movingAvgModelSettings[model], setting => {\n      if (!setting.isCheckbox) {\n        filteredResult.push(setting);\n      }\n    });\n    return filteredResult;\n  }\n  return movingAvgModelSettings[model];\n}\n\nexport function getOrderByOptions(target) {\n  const metricRefs = [];\n  _.each(target.metrics, metric => {\n    if (metric.type !== 'count') {\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return orderByOptions.concat(metricRefs);\n}\n\nexport function describeOrder(order) {\n  const def = _.find(orderOptions, { value: order });\n  return def.text;\n}\n\nexport function describeMetric(metric) {\n  const def = _.find(metricAggTypes, { value: metric.type });\n  return def.text + ' ' + metric.field;\n}\n\nexport function describeOrderBy(orderBy, target) {\n  const def = _.find(orderByOptions, { value: orderBy });\n  if (def) {\n    return def.text;\n  }\n  const metric = _.find(target.metrics, { id: orderBy });\n  if (metric) {\n    return describeMetric(metric);\n  } else {\n    return 'metric not found';\n  }\n}\n","import * as queryDef from './query_def';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef, queryNode, target) {\n    let metricRef, metric, y;\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n\n      // if metric ref, look it up and add it to this agg level\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\n      if (!isNaN(metricRef)) {\n        for (y = 0; y < target.metrics.length; y++) {\n          metric = target.metrics[y];\n          if (metric.id === aggDef.settings.orderBy) {\n            queryNode.aggs = {};\n            queryNode.aggs[metric.id] = {};\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef) {\n    const filterObj = {};\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\n      const query = aggDef.settings.filters[i].query;\n      let label = aggDef.settings.filters[i].label;\n      label = label === '' || label === undefined ? query : label;\n      filterObj[label] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query, size) {\n    query.size = size;\n    query.sort = {};\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    if (this.esVersion < 5) {\n      query.fielddata_fields = [this.timeField];\n    } else {\n      query.docvalue_fields = [this.timeField];\n    }\n    return query;\n  }\n\n  addAdhocFilters(query, adhocFilters) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition, queryCondition;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target, adhocFilters?, queryString?) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [{ type: 'count', id: '1' }];\n    target.bucketAggs = target.bucketAggs || [{ type: 'date_histogram', id: '2', settings: { interval: 'auto' } }];\n    target.timeField = this.timeField;\n\n    let i, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // handle document query\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        throw { message: 'Invalid query' };\n      }\n\n      const size = (metric.settings && metric.settings.size) || 500;\n      return this.documentQuery(query, size);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef = target.bucketAggs[i];\n      const esAgg = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField = {};\n      let metricAgg = null;\n\n      if (queryDef.isPipelineAgg(metric.type)) {\n        if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\n          metricAgg = { buckets_path: metric.pipelineAgg };\n        } else {\n          continue;\n        }\n      } else {\n        metricAgg = { field: metric.field };\n      }\n\n      for (const prop in metric.settings) {\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\n          metricAgg[prop] = metric.settings[prop];\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {\n            _term: 'asc',\n          },\n        },\n      },\n    };\n    return query;\n  }\n}\n","import moment from 'moment';\n\nconst intervalMap = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  constructor(private pattern, private interval: string | null) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return moment.utc().format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from, to) {\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = moment(from)\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = moment(to)\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import _ from 'lodash';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\n\nexport class ElasticResponse {\n  constructor(private targets, private response) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg, target, seriesList, props) {\n    let metric, y, i, newSeries, bucket, value;\n\n    for (y = 0; y < target.metrics.length; y++) {\n      metric = target.metrics[y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props: props };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n            value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            field: metric.field,\n            props: props,\n          };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n\n            value = bucket[metric.id];\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(esAgg, aggDef, target, table, props) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values, metricName, value) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n\n    for (const bucket of esAgg.buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              metricName += ' ' + metric.field;\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurise down the nested buckets to build series\n  processBuckets(aggs, target, seriesList, table, props, depth) {\n    let bucket, aggDef, esAgg, aggId;\n    const maxDepth = target.bucketAggs.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric) {\n    let metricDef = _.find(queryDef.metricAggTypes, { value: metric });\n    if (!metricDef) {\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\n    }\n\n    return metricDef ? metricDef.text : metric;\n  }\n\n  private getSeriesName(series, target, metricTypeCount) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field;\n        }\n\n        return match;\n      });\n    }\n\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\n      const appliedAgg = _.find(target.metrics, { id: series.field });\n      if (appliedAgg) {\n        metricName += ' ' + queryDef.describeMetric(appliedAgg);\n      } else {\n        metricName = 'Unset';\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList, target) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits, seriesList) {\n    const series = {\n      target: 'docs',\n      type: 'docs',\n      datapoints: [],\n      total: hits.total,\n      filterable: true,\n    };\n    let propName, hit, doc, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations, target) {\n    const histogram = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response, err) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unkown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticResponse } from './elastic_response';\n\nexport class ElasticDatasource {\n  basicAuth: string;\n  withCredentials: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.index;\n    this.timeField = instanceSettings.jsonData.timeField;\n    this.esVersion = instanceSettings.jsonData.esVersion;\n    this.indexPattern = new IndexPattern(instanceSettings.index, instanceSettings.jsonData.interval);\n    this.interval = instanceSettings.jsonData.timeInterval;\n    this.maxConcurrentShardRequests = instanceSettings.jsonData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n  }\n\n  private request(method, url, data?) {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  private get(url) {\n    const range = this.timeSrv.timeRange();\n    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\n    if (_.isArray(indexList) && indexList.length) {\n      return this.request('GET', indexList[0] + url).then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    } else {\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    }\n  }\n\n  private post(url, data) {\n    return this.request('POST', url, data)\n      .then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      })\n      .catch(err => {\n        if (err.data && err.data.error) {\n          throw {\n            message: 'Elasticsearch error: ' + err.data.error.reason,\n            error: err.data.error,\n          };\n        }\n\n        throw err;\n      });\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const range = {};\n    range[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          { range: range },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data = {\n      query: query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\n\n    return this.post('_msearch', payload).then(res => {\n      const list = [];\n      const hits = res.responses[0].hits.hits;\n\n      const getFieldFromSource = (source, fieldName) => {\n        if (!fieldName) {\n          return;\n        }\n\n        const fieldNames = fieldName.split('.');\n        let fieldValue = source;\n\n        for (let i = 0; i < fieldNames.length; i++) {\n          fieldValue = fieldValue[fieldNames[i]];\n          if (!fieldValue) {\n            console.log('could not find field in annotation: ', fieldName);\n            return '';\n          }\n        }\n\n        return fieldValue;\n      };\n\n      for (let i = 0; i < hits.length; i++) {\n        const source = hits[i]._source;\n        let time = getFieldFromSource(source, timeField);\n        if (typeof hits[i].fields !== 'undefined') {\n          const fields = hits[i].fields;\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n            time = fields[timeField];\n          }\n        }\n\n        const event = {\n          annotation: annotation,\n          time: moment.utc(time).valueOf(),\n          text: getFieldFromSource(source, textField),\n          tags: getFieldFromSource(source, tagsField),\n        };\n\n        // legacy support for title tield\n        if (annotation.titleField) {\n          const title = getFieldFromSource(source, annotation.titleField);\n          if (title) {\n            event.text = title + '\\n' + event.text;\n          }\n        }\n\n        if (typeof event.tags === 'string') {\n          event.tags = event.tags.split(',');\n        }\n\n        list.push(event);\n      }\n      return list;\n    });\n  }\n\n  testDatasource() {\n    this.timeSrv.setTime({ from: 'now-1m', to: 'now' }, true);\n    // validate that the index exist and has date field\n    return this.getFields({ type: 'date' }).then(\n      dateFields => {\n        const timeField = _.find(dateFields, { text: this.timeField });\n        if (!timeField) {\n          return {\n            status: 'error',\n            message: 'No date field named ' + this.timeField + ' found',\n          };\n        }\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\n      },\n      err => {\n        console.log(err);\n        if (err.data && err.data.error) {\n          let message = angular.toJson(err.data.error);\n          if (err.data.error.reason) {\n            message = err.data.error.reason;\n          }\n          return { status: 'error', message: message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      }\n    );\n  }\n\n  getQueryHeader(searchType, timeFrom, timeTo) {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n    if (this.esVersion >= 56) {\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n    return angular.toJson(queryHeader);\n  }\n\n  query(options) {\n    let payload = '';\n    let target;\n    const sentTargets = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (let i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (target.hide) {\n        continue;\n      }\n\n      const queryString = this.templateSrv.replace(target.query || '*', options.scopedVars, 'lucene');\n      const queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\n      const esQuery = angular.toJson(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    payload = payload.replace(/\\$timeFrom/g, options.range.from.valueOf());\n    payload = payload.replace(/\\$timeTo/g, options.range.to.valueOf());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    return this.post('_msearch', payload).then(res => {\n      return new ElasticResponse(sentTargets, res).getTimeSeries();\n    });\n  }\n\n  getFields(query) {\n    return this.get('/_mapping').then(result => {\n      const typeMap = {\n        float: 'number',\n        double: 'number',\n        integer: 'number',\n        long: 'number',\n        date: 'date',\n        string: 'string',\n        text: 'string',\n        scaled_float: 'number',\n        nested: 'nested',\n      };\n\n      function shouldAddField(obj, key, query) {\n        if (key[0] === '_') {\n          return false;\n        }\n\n        if (!query.type) {\n          return true;\n        }\n\n        // equal query type filter, or via typemap translation\n        return query.type === obj.type || query.type === typeMap[obj.type];\n      }\n\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n      const fieldNameParts = [];\n      const fields = {};\n\n      function getFieldsRecursively(obj) {\n        for (const key in obj) {\n          const subObj = obj[key];\n\n          // Check mapping field for nested fields\n          if (_.isObject(subObj.properties)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.properties);\n          }\n\n          if (_.isObject(subObj.fields)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.fields);\n          }\n\n          if (_.isString(subObj.type)) {\n            const fieldName = fieldNameParts.concat(key).join('.');\n\n            // Hide meta-fields and check field type\n            if (shouldAddField(subObj, key, query)) {\n              fields[fieldName] = {\n                text: fieldName,\n                type: subObj.type,\n              };\n            }\n          }\n        }\n        fieldNameParts.pop();\n      }\n\n      for (const indexName in result) {\n        const index = result[indexName];\n        if (index && index.mappings) {\n          const mappings = index.mappings;\n          for (const typeName in mappings) {\n            const properties = mappings[typeName].properties;\n            getFieldsRecursively(properties);\n          }\n        }\n      }\n\n      // transform to array\n      return _.map(fields, value => {\n        return value;\n      });\n    });\n  }\n\n  getTerms(queryDef) {\n    const range = this.timeSrv.timeRange();\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    return this.post('_msearch?search_type=' + searchType, esQuery).then(res => {\n      if (!res.responses[0].aggregations) {\n        return [];\n      }\n\n      const buckets = res.responses[0].aggregations['1'].buckets;\n      return _.map(buckets, bucket => {\n        return {\n          text: bucket.key_as_string || bucket.key,\n          value: bucket.key,\n        };\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    query = angular.fromJson(query);\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    if (query.find === 'fields') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      return this.getFields(query);\n    }\n\n    if (query.find === 'terms') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\n      return this.getTerms(query);\n    }\n  }\n\n  getTagKeys() {\n    return this.getFields({});\n  }\n\n  getTagValues(options) {\n    return this.getTerms({ field: options.key, query: '*' });\n  }\n\n  targetContainsTemplate(target) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticBucketAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\n    controller: 'ElasticBucketAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n    },\n  };\n}\n\nexport class ElasticBucketAggCtrl {\n  /** @nginject */\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const bucketAggs = $scope.target.bucketAggs;\n\n    $scope.orderByOptions = [];\n\n    $scope.getBucketAggTypes = () => {\n      return queryDef.bucketAggTypes;\n    };\n\n    $scope.getOrderOptions = () => {\n      return queryDef.orderOptions;\n    };\n\n    $scope.getSizeOptions = () => {\n      return queryDef.sizeOptions;\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      () => {\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.init = () => {\n      $scope.agg = bucketAggs[$scope.index];\n      $scope.validateModel();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.onTypeChanged = () => {\n      $scope.agg.settings = {};\n      $scope.showOptions = false;\n\n      switch ($scope.agg.type) {\n        case 'date_histogram':\n        case 'histogram':\n        case 'terms': {\n          delete $scope.agg.query;\n          $scope.agg.field = 'select field';\n          break;\n        }\n        case 'filters': {\n          delete $scope.agg.field;\n          $scope.agg.query = '*';\n          break;\n        }\n        case 'geohash_grid': {\n          $scope.agg.settings.precision = 3;\n          break;\n        }\n      }\n\n      $scope.validateModel();\n      $scope.onChange();\n    };\n\n    $scope.validateModel = () => {\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\n      $scope.isFirst = $scope.index === 0;\n      $scope.bucketAggCount = bucketAggs.length;\n\n      let settingsLinkText = '';\n      const settings = $scope.agg.settings || {};\n\n      switch ($scope.agg.type) {\n        case 'terms': {\n          settings.order = settings.order || 'desc';\n          settings.size = settings.size || '10';\n          settings.min_doc_count = settings.min_doc_count || 1;\n          settings.orderBy = settings.orderBy || '_term';\n\n          if (settings.size !== '0') {\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\n          }\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\n          }\n\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\n\n          if (settings.size === '0') {\n            settingsLinkText += ' (' + settings.order + ')';\n          }\n\n          break;\n        }\n        case 'filters': {\n          settings.filters = settings.filters || [{ query: '*' }];\n          settingsLinkText = _.reduce(\n            settings.filters,\n            (memo, value, index) => {\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\n              return memo;\n            },\n            ''\n          );\n          if (settingsLinkText.length > 50) {\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\n          }\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\n          break;\n        }\n        case 'date_histogram': {\n          settings.interval = settings.interval || 'auto';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          $scope.agg.field = $scope.target.timeField;\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\n            settings.trimEdges = 0;\n          }\n\n          if (settings.trimEdges && settings.trimEdges > 0) {\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\n          }\n          break;\n        }\n        case 'histogram': {\n          settings.interval = settings.interval || 1000;\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n          break;\n        }\n        case 'geohash_grid': {\n          // limit precision to 7\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\n          settingsLinkText = 'Precision: ' + settings.precision;\n          break;\n        }\n      }\n\n      $scope.settingsLinkText = settingsLinkText;\n      $scope.agg.settings = settings;\n      return true;\n    };\n\n    $scope.addFiltersQuery = () => {\n      $scope.agg.settings.filters.push({ query: '*' });\n    };\n\n    $scope.removeFiltersQuery = filter => {\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n    };\n\n    $scope.getOrderByOptions = () => {\n      return queryDef.getOrderByOptions($scope.target);\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'date_histogram') {\n        return $scope.getFields({ $fieldType: 'date' });\n      } else {\n        return $scope.getFields();\n      }\n    };\n\n    $scope.getIntervalOptions = () => {\n      return $q.when(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\n    };\n\n    $scope.addBucketAgg = () => {\n      // if last is date histogram add it before\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\n      let addIndex = bucketAggs.length - 1;\n\n      if (lastBucket && lastBucket.type === 'date_histogram') {\n        addIndex -= 1;\n      }\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\n      $scope.onChange();\n    };\n\n    $scope.removeBucketAgg = () => {\n      bucketAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticBucketAgg', elasticBucketAgg);\nmodule.controller('ElasticBucketAggCtrl', ElasticBucketAggCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticMetricAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\n    controller: 'ElasticMetricAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n      esVersion: '=',\n    },\n  };\n}\n\nexport class ElasticMetricAggCtrl {\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const metricAggs = $scope.target.metrics;\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\n    $scope.extendedStats = queryDef.extendedStats;\n    $scope.pipelineAggOptions = [];\n    $scope.modelSettingsValues = {};\n\n    $scope.init = () => {\n      $scope.agg = metricAggs[$scope.index];\n      $scope.validateModel();\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.updatePipelineAggOptions = () => {\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      () => {\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\n        $scope.updatePipelineAggOptions();\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.validateModel = () => {\n      $scope.isFirst = $scope.index === 0;\n      $scope.isSingle = metricAggs.length === 1;\n      $scope.settingsLinkText = '';\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\n\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\n        $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\n        $scope.agg.field = $scope.agg.pipelineAgg;\n\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\n        if (pipelineOptions.length > 0) {\n          _.each(pipelineOptions, opt => {\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\n          });\n          $scope.settingsLinkText = 'Options';\n        }\n      } else if (!$scope.agg.field) {\n        $scope.agg.field = 'select field';\n      }\n      switch ($scope.agg.type) {\n        case 'cardinality': {\n          const precisionThreshold = $scope.agg.settings.precision_threshold || '';\n          $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;\n          break;\n        }\n        case 'percentiles': {\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\n          break;\n        }\n        case 'extended_stats': {\n          if (_.keys($scope.agg.meta).length === 0) {\n            $scope.agg.meta.std_deviation_bounds_lower = true;\n            $scope.agg.meta.std_deviation_bounds_upper = true;\n          }\n\n          const stats = _.reduce(\n            $scope.agg.meta,\n            (memo, val, key) => {\n              if (val) {\n                const def = _.find($scope.extendedStats, { value: key });\n                memo.push(def.text);\n              }\n              return memo;\n            },\n            []\n          );\n\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\n          break;\n        }\n        case 'moving_avg': {\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\n          $scope.updateMovingAvgModelSettings();\n          break;\n        }\n        case 'raw_document': {\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\n\n          $scope.target.bucketAggs = [];\n          break;\n        }\n      }\n      if ($scope.aggDef.supportsInlineScript) {\n        // I know this stores the inline script twice\n        // but having it like this simplifes the query_builder\n        const inlineScript = $scope.agg.inlineScript;\n        if (inlineScript) {\n          $scope.agg.settings.script = { inline: inlineScript };\n        } else {\n          delete $scope.agg.settings.script;\n        }\n\n        if ($scope.settingsLinkText === '') {\n          $scope.settingsLinkText = 'Options';\n        }\n      }\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.updateMovingAvgModelSettings = () => {\n      const modelSettingsKeys = [];\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\n      for (let i = 0; i < modelSettings.length; i++) {\n        modelSettingsKeys.push(modelSettings[i].value);\n      }\n\n      for (const key in $scope.agg.settings.settings) {\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\n          delete $scope.agg.settings.settings[key];\n        }\n      }\n    };\n\n    $scope.onChangeClearInternal = () => {\n      delete $scope.agg.settings.minimize;\n      $scope.onChange();\n    };\n\n    $scope.onTypeChange = () => {\n      $scope.agg.settings = {};\n      $scope.agg.meta = {};\n      $scope.showOptions = false;\n      $scope.updatePipelineAggOptions();\n      $scope.onChange();\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'cardinality') {\n        return $scope.getFields();\n      }\n      return $scope.getFields({ $fieldType: 'number' });\n    };\n\n    $scope.addMetricAgg = () => {\n      const addIndex = metricAggs.length;\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\n      $scope.onChange();\n    };\n\n    $scope.removeMetricAgg = () => {\n      metricAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.toggleShowMetric = () => {\n      $scope.agg.hide = !$scope.agg.hide;\n      if (!$scope.agg.hide) {\n        delete $scope.agg.hide;\n      }\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticMetricAgg', elasticMetricAgg);\nmodule.controller('ElasticMetricAggCtrl', ElasticMetricAggCtrl);\n","import './bucket_agg';\nimport './metric_agg';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class ElasticQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  esVersion: any;\n  rawQueryOld: string;\n\n  /** @ngInject */\n  constructor($scope, $injector, private $rootScope, private uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.esVersion = this.datasource.esVersion;\n    this.queryUpdated();\n  }\n\n  getFields(type) {\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\n    return this.datasource\n      .metricFindQuery(jsonStr)\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  queryUpdated() {\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\n      this.refresh();\n    }\n\n    this.rawQueryOld = newJson;\n    this.$rootScope.appEvent('elastic-query-updated');\n  }\n\n  getCollapsedText() {\n    const metricAggs = this.target.metrics;\n    const bucketAggs = this.target.bucketAggs;\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\n    const bucketAggTypes = queryDef.bucketAggTypes;\n    let text = '';\n\n    if (this.target.query) {\n      text += 'Query: ' + this.target.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    _.each(metricAggs, (metric, index) => {\n      const aggDef = _.find(metricAggTypes, { value: metric.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += metric.field;\n      }\n      text += '), ';\n    });\n\n    _.each(bucketAggs, (bucketAgg, index) => {\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      const aggDef = _.find(bucketAggTypes, { value: bucketAgg.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += bucketAgg.field;\n      }\n      text += '), ';\n    });\n\n    if (this.target.alias) {\n      text += 'Alias: ' + this.target.alias;\n    }\n\n    return text;\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport default class OpenTsDatasource {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n\n    _.each(options.targets, target => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = _.compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const groupByTags = {};\n    _.each(queries, query => {\n      if (query.filters && query.filters.length > 0) {\n        _.each(query.filters, val => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        _.each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = _.filter(options.targets, query => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).then(response => {\n      const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n      const result = _.map(response.data, (metricData, index) => {\n        index = metricToTargetMapping[index];\n        if (index === -1) {\n          index = 0;\n        }\n        this._saveTagKeys(metricData);\n\n        return this.transformMetricData(metricData, groupByTags, options.targets[index], options, this.tsdbResolution);\n      });\n      return { data: result };\n    });\n  }\n\n  annotationQuery(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n    const eventList = [];\n\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\n\n    const queries = _.compact(qs);\n\n    return this.performTimeSeriesQuery(queries, start, end).then(results => {\n      if (results.data[0]) {\n        let annotationObject = results.data[0].annotations;\n        if (options.annotation.isGlobal) {\n          annotationObject = results.data[0].globalAnnotations;\n        }\n        if (annotationObject) {\n          _.each(annotationObject, annotation => {\n            const event = {\n              text: annotation.description,\n              time: Math.floor(annotation.startTime) * 1000,\n              annotation: options.annotation,\n            };\n\n            eventList.push(event);\n          });\n        }\n      }\n      return eventList;\n    });\n  }\n\n  targetContainsTemplate(target) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.variableExists(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.variableExists(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries, start, end) {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  suggestTagKeys(metric) {\n    return this.$q.when(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData) {\n    const tagKeys = Object.keys(metricData.tags);\n    _.each(metricData.aggregateTags, tag => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query, type) {\n    return this._get('/api/suggest', { type: type, q: query, max: 1000 }).then(result => {\n      return result.data;\n    });\n  }\n\n  _performMetricKeyValueLookup(metric, keys) {\n    if (!metric || !keys) {\n      return this.$q.when([]);\n    }\n\n    const keysArray = keys.split(',').map(key => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: 3000 }).then(result => {\n      result = result.data.results;\n      const tagvs = [];\n      _.each(result, r => {\n        if (tagvs.indexOf(r.tags[key]) === -1) {\n          tagvs.push(r.tags[key]);\n        }\n      });\n      return tagvs;\n    });\n  }\n\n  _performMetricKeyLookup(metric) {\n    if (!metric) {\n      return this.$q.when([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then(result => {\n      result = result.data.results;\n      const tagks = [];\n      _.each(result, r => {\n        _.each(r.tags, (tagv, tagk) => {\n          if (tagks.indexOf(tagk) === -1) {\n            tagks.push(tagk);\n          }\n        });\n      });\n      return tagks;\n    });\n  }\n\n  _get(relativeUrl, params?) {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  _addCredentialOptions(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return this.$q.reject(err);\n    }\n\n    const responseTransform = result => {\n      return _.map(result, value => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return this._performSuggestQuery(metricsQuery[1], 'metrics').then(responseTransform);\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return this._performMetricKeyLookup(tagNamesQuery[1]).then(responseTransform);\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).then(responseTransform);\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').then(responseTransform);\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').then(responseTransform);\n    }\n\n    return this.$q.when([]);\n  }\n\n  testDatasource() {\n    return this._performSuggestQuery('cpu', 'metrics').then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = this._get('/api/aggregators').then(result => {\n      if (result.data && _.isArray(result.data)) {\n        return result.data.sort();\n      }\n      return [];\n    });\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = this._get('/api/config/filters').then(result => {\n      if (result.data) {\n        return Object.keys(result.data).sort();\n      }\n      return [];\n    });\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md, groupByTags, target, options, tsdbResolution) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use _.pairs(invert()) because it stringifies keys/values\n    _.each(md.dps, (v, k) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(md, target, groupByTags, options) {\n    if (target.alias) {\n      const scopedVars = _.clone(options.scopedVars || {});\n      _.each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData = [];\n\n    if (!_.isEmpty(md.tags)) {\n      _.each(_.toPairs(md.tags), tag => {\n        if (_.has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!_.isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target, options, tsdbVersion) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = angular.copy(target.filters);\n      if (query.filters) {\n        for (const filterKey in query.filters) {\n          query.filters[filterKey].filter = this.templateSrv.replace(\n            query.filters[filterKey].filter,\n            options.scopedVars,\n            'pipe'\n          );\n        }\n      }\n    } else {\n      query.tags = angular.copy(target.tags);\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  mapMetricsToTargets(metrics, options, tsdbVersion) {\n    let interpolatedTagValue, arrTagV;\n    return _.map(metrics, metricData => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return _.findIndex(options.targets, target => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              _.every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return _.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  convertToTSDBTime(date, roundUp) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp);\n    return date.valueOf();\n  }\n}\n","import _ from 'lodash';\n\nexport class ElasticConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/elasticsearch/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.esVersion = this.current.jsonData.esVersion || 5;\n    this.current.jsonData.maxConcurrentShardRequests = this.current.jsonData.maxConcurrentShardRequests || 256;\n  }\n\n  indexPatternTypes = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n\n  esVersions = [{ name: '2.x', value: 2 }, { name: '5.x', value: 5 }, { name: '5.6+', value: 56 }];\n\n  indexPatternTypeChanged() {\n    const def = _.find(this.indexPatternTypes, {\n      value: this.current.jsonData.interval,\n    });\n    this.current.database = def.example || 'es-index-name';\n  }\n}\n","import { ElasticDatasource } from './datasource';\nimport { ElasticQueryCtrl } from './query_ctrl';\nimport { ElasticConfigCtrl } from './config_ctrl';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  ElasticDatasource as Datasource,\n  ElasticQueryCtrl as QueryCtrl,\n  ElasticConfigCtrl as ConfigCtrl,\n  ElasticAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class OpenTsQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  aggregators: any;\n  fillPolicies: any;\n  filterTypes: any;\n  tsdbVersion: any;\n  aggregator: any;\n  downsampleInterval: any;\n  downsampleAggregator: any;\n  downsampleFillPolicy: any;\n  errors: any;\n  suggestMetrics: any;\n  suggestTagKeys: any;\n  suggestTagValues: any;\n  addTagMode: boolean;\n  addFilterMode: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.errors = this.validateTarget();\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\n    this.filterTypes = [\n      'wildcard',\n      'iliteral_or',\n      'not_iliteral_or',\n      'not_literal_or',\n      'iwildcard',\n      'literal_or',\n      'regexp',\n    ];\n\n    this.tsdbVersion = this.datasource.tsdbVersion;\n\n    if (!this.target.aggregator) {\n      this.target.aggregator = 'sum';\n    }\n\n    if (!this.target.downsampleAggregator) {\n      this.target.downsampleAggregator = 'avg';\n    }\n\n    if (!this.target.downsampleFillPolicy) {\n      this.target.downsampleFillPolicy = 'none';\n    }\n\n    this.datasource.getAggregators().then(aggs => {\n      if (aggs.length !== 0) {\n        this.aggregators = aggs;\n      }\n    });\n\n    this.datasource.getFilterTypes().then(filterTypes => {\n      if (filterTypes.length !== 0) {\n        this.filterTypes = filterTypes;\n      }\n    });\n\n    // needs to be defined here as it is called from typeahead\n    this.suggestMetrics = (query, callback) => {\n      this.datasource\n        .metricFindQuery('metrics(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n\n    this.suggestTagKeys = (query, callback) => {\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\n    };\n\n    this.suggestTagValues = (query, callback) => {\n      this.datasource\n        .metricFindQuery('suggest_tagv(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n  }\n\n  targetBlur() {\n    this.errors = this.validateTarget();\n    this.refresh();\n  }\n\n  getTextValues(metricFindResult) {\n    return _.map(metricFindResult, value => {\n      return value.text;\n    });\n  }\n\n  addTag() {\n    if (this.target.filters && this.target.filters.length > 0) {\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addTagMode) {\n      this.addTagMode = true;\n      return;\n    }\n\n    if (!this.target.tags) {\n      this.target.tags = {};\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.tags) {\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\n      this.target.currentTagKey = '';\n      this.target.currentTagValue = '';\n      this.targetBlur();\n    }\n\n    this.addTagMode = false;\n  }\n\n  removeTag(key) {\n    delete this.target.tags[key];\n    this.targetBlur();\n  }\n\n  editTag(key, value) {\n    this.removeTag(key);\n    this.target.currentTagKey = key;\n    this.target.currentTagValue = value;\n    this.addTag();\n  }\n\n  closeAddTagMode() {\n    this.addTagMode = false;\n    return;\n  }\n\n  addFilter() {\n    if (this.target.tags && _.size(this.target.tags) > 0) {\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addFilterMode) {\n      this.addFilterMode = true;\n      return;\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    if (!this.target.currentFilterType) {\n      this.target.currentFilterType = 'iliteral_or';\n    }\n\n    if (!this.target.currentFilterGroupBy) {\n      this.target.currentFilterGroupBy = false;\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.filters) {\n      const currentFilter = {\n        type: this.target.currentFilterType,\n        tagk: this.target.currentFilterKey,\n        filter: this.target.currentFilterValue,\n        groupBy: this.target.currentFilterGroupBy,\n      };\n      this.target.filters.push(currentFilter);\n      this.target.currentFilterType = 'literal_or';\n      this.target.currentFilterKey = '';\n      this.target.currentFilterValue = '';\n      this.target.currentFilterGroupBy = false;\n      this.targetBlur();\n    }\n\n    this.addFilterMode = false;\n  }\n\n  removeFilter(index) {\n    this.target.filters.splice(index, 1);\n    this.targetBlur();\n  }\n\n  editFilter(fil, index) {\n    this.removeFilter(index);\n    this.target.currentFilterKey = fil.tagk;\n    this.target.currentFilterValue = fil.filter;\n    this.target.currentFilterType = fil.type;\n    this.target.currentFilterGroupBy = fil.groupBy;\n    this.addFilter();\n  }\n\n  closeAddFilterMode() {\n    this.addFilterMode = false;\n    return;\n  }\n\n  validateTarget() {\n    const errs: any = {};\n\n    if (this.target.shouldDownsample) {\n      try {\n        if (this.target.downsampleInterval) {\n          kbn.describe_interval(this.target.downsampleInterval);\n        } else {\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\n        }\n      } catch (err) {\n        errs.downsampleInterval = err.message;\n      }\n    }\n\n    if (this.target.tags && _.has(this.target.tags, this.target.currentTagKey)) {\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\n    }\n\n    return errs;\n  }\n}\n","export class OpenTsConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/opentsdb/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.tsdbVersion = this.current.jsonData.tsdbVersion || 1;\n    this.current.jsonData.tsdbResolution = this.current.jsonData.tsdbResolution || 1;\n  }\n\n  tsdbVersions = [{ name: '<=2.1', value: 1 }, { name: '==2.2', value: 2 }, { name: '==2.3', value: 3 }];\n\n  tsdbResolutions = [{ name: 'second', value: 1 }, { name: 'millisecond', value: 2 }];\n}\n","import OpenTsDatasource from './datasource';\nimport { OpenTsQueryCtrl } from './query_ctrl';\nimport { OpenTsConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  OpenTsDatasource as Datasource,\n  OpenTsQueryCtrl as QueryCtrl,\n  OpenTsConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nclass GrafanaDatasource {\n  /** @ngInject */\n  constructor(private backendSrv, private $q, private templateSrv) {}\n\n  query(options) {\n    return this.backendSrv\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options) {\n    return this.$q.when({ data: [] });\n  }\n\n  annotationQuery(options) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n      matchAny: options.annotation.matchAny,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return this.$q.when([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return this.$q.when([]);\n      }\n      const tags = [];\n      for (const t of params.tags) {\n        const renderedValues = this.templateSrv.replace(t, {}, 'pipe');\n        for (const tt of renderedValues.split('|')) {\n          tags.push(tt);\n        }\n      }\n      params.tags = tags;\n    }\n\n    return this.backendSrv.get('/api/annotations', params);\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [{ text: 'Dashboard', value: 'dashboard' }, { text: 'Tags', value: 'tags' }];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport default class InfluxSeries {\n  series: any;\n  alias: any;\n  annotation: any;\n\n  constructor(options) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n  }\n\n  getTimeSeries() {\n    const output = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    _.each(this.series, series => {\n      const columns = series.columns.length;\n      const tags = _.map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({ target: seriesName, datapoints: datapoints });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series, index) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match, g1, g2) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex];\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list = [];\n\n    _.each(this.series, series => {\n      let titleCol = null;\n      let timeCol = null;\n      const tagsCol = [];\n      let textCol = null;\n\n      _.each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (_.includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      _.each(series.values, value => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: _.flatten(\n            tagsCol\n              .filter(t => {\n                return value[t];\n              })\n              .map(t => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable() {\n    const table = new TableModel();\n    let i, j;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    _.each(this.series, (series, seriesIndex) => {\n      if (seriesIndex === 0) {\n        j = 0;\n        // Check that the first column is indeed 'time'\n        if (series.columns[0] === 'time') {\n          // Push this now before the tags and with the right type\n          table.columns.push({ text: 'Time', type: 'time' });\n          j++;\n        }\n        _.each(_.keys(series.tags), key => {\n          table.columns.push({ text: key });\n        });\n        for (; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import _ from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\n\nconst index = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions = [];\n\nfunction aliasRenderer(part, innerExpr) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part, innerExpr) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts, partModel) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts, partModel, query) {\n  // copy all parts\n  const parts = _.map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: _.clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import _ from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class InfluxQuery {\n  target: any;\n  selectModels: any[];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target, templateSrv?, scopedVars?) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];\n    target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'mean', params: [] }]];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, queryPart.create);\n    });\n    this.groupByParts = _.map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectModels, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value) {\n    const stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part, index) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = _.filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = _.map(this.target.select, (s: any) => {\n        return _.filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts, part) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = _.indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts, type) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag, index, interpolate) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\') + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = _.map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = _.map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters) {\n    const conditions = _.map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, false);\n    });\n    return conditions.join(' ');\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  parse(query, results) {\n    if (!results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = {};\n    _.each(influxResults.series, serie => {\n      _.each(serie.values, value => {\n        if (_.isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    return _.map(res, value => {\n      return { text: value.toString() };\n    });\n  }\n}\n\nfunction addUnique(arr, value) {\n  arr[value] = value;\n}\n","import _ from 'lodash';\n\nfunction renderTagCondition(tag, index) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number\n  if (operator !== '=~' && operator !== '!~' && isNaN(+value)) {\n    value = \"'\" + value + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target, private database?) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string) {\n    let query;\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        query += ' WITH MEASUREMENT =~ /' + withMeasurementFilter + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = _.reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        []\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n    return query;\n  }\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport InfluxSeries from './influx_series';\nimport InfluxQuery from './influx_query';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\n\nexport default class InfluxDatasource {\n  type: string;\n  urls: any;\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  responseParser: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'influxdb';\n    this.urls = _.map(instanceSettings.url.split(','), url => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username;\n    this.password = instanceSettings.password;\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n    this.responseParser = new ResponseParser();\n  }\n\n  query(options) {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = _.cloneDeep(options.targets);\n    const queryTargets = [];\n    let queryModel;\n    let i, y;\n\n    let allQueries = _.map(targets, target => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      queryModel = new InfluxQuery(target, this.templateSrv, scopedVars);\n      return queryModel.render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return this.$q.when({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).then((data): any => {\n      if (!data || !data.results) {\n        return [];\n      }\n\n      const seriesList = [];\n      for (i = 0; i < data.results.length; i++) {\n        const result = data.results[i];\n        if (!result || !result.series) {\n          continue;\n        }\n\n        const target = queryTargets[i];\n        let alias = target.alias;\n        if (alias) {\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\n        }\n\n        const influxSeries = new InfluxSeries({\n          series: data.results[i].series,\n          alias: alias,\n        });\n\n        switch (target.resultFormat) {\n          case 'table': {\n            seriesList.push(influxSeries.getTable());\n            break;\n          }\n          default: {\n            const timeSeries = influxSeries.getTimeSeries();\n            for (y = 0; y < timeSeries.length; y++) {\n              seriesList.push(timeSeries[y]);\n            }\n            break;\n          }\n        }\n      }\n\n      return { data: seriesList };\n    });\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.query) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(query, options).then(data => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: options.annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target) {\n    for (const group of target.groupBy) {\n      for (const param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (const i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  metricFindQuery(query: string, options?: any) {\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(interpolated, options).then(_.curry(this.responseParser.parse)(query));\n  }\n\n  getTagKeys(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return this.$q.when({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params) {\n    if (!params) {\n      return '';\n    }\n\n    return _.reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  testDatasource() {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .then(res => {\n        const error = _.get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift();\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (method === 'GET') {\n      _.extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    return this.backendSrv.datasourceRequest(req).then(\n      result => {\n        return result.data;\n      },\n      err => {\n        if (err.status !== 0 || err.status >= 300) {\n          if (err.data && err.data.error) {\n            throw {\n              message: 'InfluxDB Error: ' + err.data.error,\n              data: err.data,\n              config: err.config,\n            };\n          } else {\n            throw {\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n              data: err.data,\n              config: err.config,\n            };\n          }\n        }\n      }\n    );\n  }\n\n  getTimeFilter(options) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false);\n    const until = this.getInfluxTime(options.rangeRaw.to, true);\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (until === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { InfluxQueryBuilder } from './query_builder';\nimport InfluxQuery from './influx_query';\nimport queryPart from './query_part';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class InfluxQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: InfluxQuery;\n  queryBuilder: any;\n  groupBySegment: any;\n  resultFormats: any[];\n  orderByTime: any[];\n  policySegment: any;\n  tagSegments: any[];\n  selectMenu: any;\n  measurementSegment: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new InfluxQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.queryBuilder = new InfluxQueryBuilder(this.target, this.datasource.database);\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.policySegment = uiSegmentSrv.newSegment(this.target.policy);\n\n    if (!this.target.measurement) {\n      this.measurementSegment = uiSegmentSrv.newSelectMeasurement();\n    } else {\n      this.measurementSegment = uiSegmentSrv.newSegment(this.target.measurement);\n    }\n\n    this.tagSegments = [];\n    for (const tag of this.target.tags) {\n      if (!tag.operator) {\n        if (/^\\/.*\\/$/.test(tag.value)) {\n          tag.operator = '=~';\n        } else {\n          tag.operator = '=';\n        }\n      }\n\n      if (tag.condition) {\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n      }\n\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n    }\n\n    this.fixTagSegments();\n    this.buildSelectMenu();\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove tag filter --',\n    });\n  }\n\n  removeOrderByTime() {\n    this.target.orderByTime = 'ASC';\n  }\n\n  buildSelectMenu() {\n    const categories = queryPart.getCategories();\n    this.selectMenu = _.reduce(\n      categories,\n      (memo, cat, key) => {\n        const menu = {\n          text: key,\n          submenu: cat.map(item => {\n            return { text: item.type, value: item.type };\n          }),\n        };\n        memo.push(menu);\n        return memo;\n      },\n      []\n    );\n  }\n\n  getGroupByOptions() {\n    const query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasFill()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\n        }\n        if (!this.target.limit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\n        }\n        if (!this.target.slimit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\n        }\n        if (this.target.orderByTime === 'ASC') {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\n        }\n        if (!this.queryModel.hasGroupByTime()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  groupByAction() {\n    switch (this.groupBySegment.value) {\n      case 'LIMIT': {\n        this.target.limit = 10;\n        break;\n      }\n      case 'SLIMIT': {\n        this.target.slimit = 10;\n        break;\n      }\n      case 'ORDER BY time DESC': {\n        this.target.orderByTime = 'DESC';\n        break;\n      }\n      default: {\n        this.queryModel.addGroupBy(this.groupBySegment.value);\n      }\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.groupBySegment.value = plusButton.value;\n    this.groupBySegment.html = plusButton.html;\n    this.panelCtrl.refresh();\n  }\n\n  addSelectPart(selectParts, cat, subitem) {\n    this.queryModel.addSelectPart(selectParts, subitem.value);\n    this.panelCtrl.refresh();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n        return this.datasource\n          .metricFindQuery(fieldsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupByPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n        return this.datasource\n          .metricFindQuery(tagsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeGroupByPart(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  fixTagSegments() {\n    const count = this.tagSegments.length;\n    const lastSegment = this.tagSegments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  measurementChanged() {\n    this.target.measurement = this.measurementSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  getPolicySegments() {\n    const policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');\n    return this.datasource\n      .metricFindQuery(policiesQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  policyChanged() {\n    this.target.policy = this.policySegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  toggleEditorMode() {\n    try {\n      this.target.query = this.queryModel.render(false);\n    } catch (err) {\n      console.log('query render error');\n    }\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMeasurements(measurementFilter) {\n    const query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(true))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n  transformToSegments(addTemplateVars) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'value',\n              value: '/^$' + variable.name + '$/',\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getTagsOrValues(segment, index) {\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n    }\n    if (segment.type === 'operator') {\n      const nextValue = this.tagSegments[index + 1].value;\n      if (/^\\/.*\\/$/.test(nextValue)) {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\n      } else {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\n      }\n    }\n\n    let query, addTemplateVars;\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n      addTemplateVars = false;\n    } else if (segment.type === 'value') {\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\n      addTemplateVars = true;\n    }\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(addTemplateVars))\n      .then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  getFieldSegments() {\n    const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n    return this.datasource\n      .metricFindQuery(fieldsQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError);\n  }\n\n  tagSegmentUpdated(segment, index) {\n    this.tagSegments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.tagSegments.splice(index, 3);\n      if (this.tagSegments.length === 0) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.tagSegments.length > 2) {\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.tagSegments.length) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.rebuildTargetTagConditions();\n  }\n\n  rebuildTargetTagConditions() {\n    const tags = [];\n    let tagIndex = 0;\n    let tagOperator = '';\n\n    _.each(this.tagSegments, (segment2, index) => {\n      if (segment2.type === 'key') {\n        if (tags.length === 0) {\n          tags.push({});\n        }\n        tags[tagIndex].key = segment2.value;\n      } else if (segment2.type === 'value') {\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\n        if (tagOperator) {\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n          tags[tagIndex].operator = tagOperator;\n        }\n        tags[tagIndex].value = segment2.value;\n      } else if (segment2.type === 'condition') {\n        tags.push({ condition: segment2.value });\n        tagIndex += 1;\n      } else if (segment2.type === 'operator') {\n        tags[tagIndex].operator = segment2.value;\n      }\n    });\n\n    this.target.tags = tags;\n    this.panelCtrl.refresh();\n  }\n\n  getTagValueOperator(tagValue, tagOperator): string {\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\n      return '=~';\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\n      return '=';\n    }\n    return null;\n  }\n\n  getCollapsedText() {\n    return this.queryModel.render(false);\n  }\n}\n","import _ from 'lodash';\nimport moment from 'moment';\n\nimport { LogLevel, LogsModel, LogRow } from 'app/core/logs_model';\n\nexport function getLogLevel(line: string): LogLevel {\n  if (!line) {\n    return undefined;\n  }\n  let level: LogLevel;\n  Object.keys(LogLevel).forEach(key => {\n    if (!level) {\n      const regexp = new RegExp(`\\\\b${key}\\\\b`, 'i');\n      if (regexp.test(line)) {\n        level = LogLevel[key];\n      }\n    }\n  });\n  return level;\n}\n\nexport function getSearchMatches(line: string, search: string) {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!line || !search) {\n    return [];\n  }\n  const regexp = new RegExp(`(?:${search})`, 'g');\n  const matches = [];\n  let match = regexp.exec(line);\n  while (match) {\n    matches.push({\n      text: match[0],\n      start: match.index,\n      length: match[0].length,\n    });\n    match = regexp.exec(line);\n  }\n  return matches;\n}\n\nexport function processEntry(entry: { line: string; timestamp: string }, stream): LogRow {\n  const { line, timestamp } = entry;\n  const { labels } = stream;\n  const key = `EK${timestamp}${labels}`;\n  const time = moment(timestamp);\n  const timeFromNow = time.fromNow();\n  const timeLocal = time.format('YYYY-MM-DD HH:mm:ss');\n  const searchMatches = getSearchMatches(line, stream.search);\n  const logLevel = getLogLevel(line);\n\n  return {\n    key,\n    logLevel,\n    searchMatches,\n    timeFromNow,\n    timeLocal,\n    entry: line,\n    timestamp: timestamp,\n  };\n}\n\nexport function processStreams(streams, limit?: number): LogsModel {\n  const combinedEntries = streams.reduce((acc, stream) => {\n    return [...acc, ...stream.entries.map(entry => processEntry(entry, stream))];\n  }, []);\n  const sortedEntries = _.chain(combinedEntries)\n    .sortBy('timestamp')\n    .reverse()\n    .slice(0, limit || combinedEntries.length)\n    .value();\n  return { rows: sortedEntries };\n}\n","import InfluxDatasource from './datasource';\nimport { InfluxQueryCtrl } from './query_ctrl';\n\nclass InfluxConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  InfluxDatasource as Datasource,\n  InfluxQueryCtrl as QueryCtrl,\n  InfluxConfigCtrl as ConfigCtrl,\n  InfluxAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","export enum LogLevel {\n  crit = 'crit',\n  warn = 'warn',\n  err = 'error',\n  error = 'error',\n  info = 'info',\n  debug = 'debug',\n  trace = 'trace',\n}\n\nexport interface LogSearchMatch {\n  start: number;\n  length: number;\n  text?: string;\n}\n\nexport interface LogRow {\n  key: string;\n  entry: string;\n  logLevel: LogLevel;\n  timestamp: string;\n  timeFromNow: string;\n  timeLocal: string;\n  searchMatches?: LogSearchMatch[];\n}\n\nexport interface LogsModel {\n  rows: LogRow[];\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nimport { processStreams } from './result_transformer';\n\nconst DEFAULT_LIMIT = 100;\n\nconst DEFAULT_QUERY_PARAMS = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_LIMIT,\n  regexp: '',\n  query: '',\n};\n\nconst QUERY_REGEXP = /({\\w+=\"[^\"]+\"})?\\s*(\\w[^{]+)?\\s*({\\w+=\"[^\"]+\"})?/;\nexport function parseQuery(input: string) {\n  const match = input.match(QUERY_REGEXP);\n  let query = '';\n  let regexp = '';\n\n  if (match) {\n    if (match[1]) {\n      query = match[1];\n    }\n    if (match[2]) {\n      regexp = match[2].trim();\n    }\n    if (match[3]) {\n      if (match[1]) {\n        query = `${match[1].slice(0, -1)},${match[3].slice(1)}`;\n      } else {\n        query = match[3];\n      }\n    }\n  }\n\n  return { query, regexp };\n}\n\nfunction serializeParams(data: any) {\n  return Object.keys(data)\n    .map(k => {\n      const v = data[k];\n      return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n    })\n    .join('&');\n}\n\nexport default class LoggingDatasource {\n  /** @ngInject */\n  constructor(private instanceSettings, private backendSrv, private templateSrv) {}\n\n  _request(apiUrl: string, data?, options?: any) {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}?${params}`;\n    const req = {\n      ...options,\n      url,\n    };\n    return this.backendSrv.datasourceRequest(req);\n  }\n\n  prepareQueryTarget(target, options) {\n    const interpolated = this.templateSrv.replace(target.expr);\n    const start = this.getTime(options.range.from, false);\n    const end = this.getTime(options.range.to, true);\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...parseQuery(interpolated),\n      start,\n      end,\n    };\n  }\n\n  query(options) {\n    const queryTargets = options.targets\n      .filter(target => target.expr)\n      .map(target => this.prepareQueryTarget(target, options));\n    if (queryTargets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const queries = queryTargets.map(target => this._request('/api/prom/query', target));\n\n    return Promise.all(queries).then((results: any[]) => {\n      // Flatten streams from multiple queries\n      const allStreams = results.reduce((acc, response, i) => {\n        const streams = response.data.streams || [];\n        // Inject search for match highlighting\n        const search = queryTargets[i].regexp;\n        streams.forEach(s => {\n          s.search = search;\n        });\n        return [...acc, ...streams];\n      }, []);\n      const model = processStreams(allStreams, DEFAULT_LIMIT);\n      return { data: model };\n    });\n  }\n\n  metadataRequest(url) {\n    // HACK to get label values for {job=|}, will be replaced when implementing LoggingQueryField\n    const apiUrl = url.replace('v1', 'prom');\n    return this._request(apiUrl, { silent: true }).then(res => {\n      const data = { data: { data: res.data.values || [] } };\n      return data;\n    });\n  }\n\n  getTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  testDatasource() {\n    return this._request('/api/prom/label')\n      .then(res => {\n        if (res && res.data && res.data.values && res.data.values.length > 0) {\n          return { status: 'success', message: 'Data source connected and labels found.' };\n        }\n        return {\n          status: 'error',\n          message: 'Data source connected, but no labels received. Verify that logging is configured properly.',\n        };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return this.$q.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import Datasource from './datasource';\n\nexport class LoggingConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nexport { Datasource, LoggingConfigCtrl as ConfigCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\n\nclass MixedDatasource {\n  /** @ngInject */\n  constructor(private $q, private datasourceSrv) {}\n\n  query(options) {\n    const sets = _.groupBy(options.targets, 'datasource');\n    const promises = _.map(sets, targets => {\n      const dsName = targets[0].datasource;\n      if (dsName === '-- Mixed --') {\n        return this.$q([]);\n      }\n\n      return this.datasourceSrv.get(dsName).then(ds => {\n        const opt = angular.copy(options);\n        opt.targets = targets;\n        return ds.query(opt);\n      });\n    });\n\n    return this.$q.all(promises).then(results => {\n      return { data: _.flatten(_.map(results, 'data')) };\n    });\n  }\n}\n\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import { MixedDatasource } from './datasource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const data = {\n      queries: [interpolatedQuery],\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MysqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MysqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target, templateSrv?, scopedVars?) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column) {\n    let query = '';\n\n    const columnName = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv, private timeSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser(this.$q);\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, v => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","export class PostgresMetaQuery {\n  constructor(private target, private queryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' AND table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index = [];\n\nfunction createPart(part): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then(result => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.panelCtrl.refresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit('confirm-modal', {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then(result => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then(result => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    this.$q.all([task1, task2]).then(() => {\n      this.panelCtrl.refresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn)).then(result => {\n      if (result.length === 1) {\n        if (this.target.timeColumnType !== result[0].text) {\n          this.target.timeColumnType = result[0].text;\n        }\n        let partModel;\n        if (this.queryModel.hasUnixEpochTimecolumn()) {\n          partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n        } else {\n          partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n        }\n\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n      }\n\n      this.updatePersistedParts();\n      if (refresh !== false) {\n        this.panelCtrl.refresh();\n      }\n    });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts, item, subItem) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.panelCtrl.refresh();\n  }\n\n  removeSelectPart(selectParts, part) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType, value) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part, index) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts, part, evt, index) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return this.$q.when([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return this.$q.when([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return this.$q.when(options);\n  }\n\n  addWhereAction(part, index) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.panelCtrl.refresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.panelCtrl.refresh();\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then(ds => {\n      return ds.getVersion().then(version => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then(version => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n  ];\n}\n","import _ from 'lodash';\n\nexport default class PrometheusMetricFindQuery {\n  datasource: any;\n  query: any;\n  range: any;\n\n  constructor(datasource, query, timeSrv) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = timeSrv.timeRange();\n  }\n\n  process() {\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      if (labelValuesQuery[1]) {\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\n      } else {\n        return this.labelValuesQuery(labelValuesQuery[2], null);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return this.queryResultQuery(queryResultQuery[1]);\n    }\n\n    // if query contains full metric name, return metric name and label list\n    return this.metricNameAndLabelsQuery(this.query);\n  }\n\n  labelValuesQuery(label, metric) {\n    let url;\n\n    if (!metric) {\n      // return label values globally\n      url = '/api/v1/label/' + label + '/values';\n\n      return this.datasource.metadataRequest(url).then(result => {\n        return _.map(result.data.data, value => {\n          return { text: value };\n        });\n      });\n    } else {\n      const start = this.datasource.getPrometheusTime(this.range.from, false);\n      const end = this.datasource.getPrometheusTime(this.range.to, true);\n      url = '/api/v1/series?match[]=' + encodeURIComponent(metric) + '&start=' + start + '&end=' + end;\n\n      return this.datasource.metadataRequest(url).then(result => {\n        const _labels = _.map(result.data.data, metric => {\n          return metric[label] || '';\n        }).filter(label => {\n          return label !== '';\n        });\n\n        return _.uniq(_labels).map(metric => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern) {\n    const url = '/api/v1/label/__name__/values';\n\n    return this.datasource.metadataRequest(url).then(result => {\n      return _.chain(result.data.data)\n        .filter(metricName => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map(matchedMetricName => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query) {\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    return this.datasource.performInstantQuery({ expr: query }, end).then(result => {\n      return _.map(result.data.data.result, metricData => {\n        let text = metricData.metric.__name__ || '';\n        delete metricData.metric.__name__;\n        text +=\n          '{' +\n          _.map(metricData.metric, (v, k) => {\n            return k + '=\"' + v + '\"';\n          }).join(',') +\n          '}';\n        text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n        return {\n          text: text,\n          expandable: true,\n        };\n      });\n    });\n  }\n\n  metricNameAndLabelsQuery(query) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;\n\n    const self = this;\n    return this.datasource.metadataRequest(url).then(result => {\n      return _.map(result.data.data, metric => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport class ResultTransformer {\n  constructor(private templateSrv) {}\n\n  transform(response: any, options: any): any[] {\n    const prometheusResult = response.data.data.result;\n\n    if (options.format === 'table') {\n      return [this.transformMetricDataToTable(prometheusResult, options.responseListLength, options.refId)];\n    } else if (options.format === 'heatmap') {\n      let seriesList = [];\n      prometheusResult.sort(sortSeriesByLabel);\n      for (const metricData of prometheusResult) {\n        seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n      }\n      seriesList = this.transformToHistogramOverTime(seriesList);\n      return seriesList;\n    } else {\n      const seriesList = [];\n      for (const metricData of prometheusResult) {\n        if (response.data.data.resultType === 'matrix') {\n          seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n        } else if (response.data.data.resultType === 'vector') {\n          seriesList.push(this.transformInstantMetricData(metricData, options));\n        }\n      }\n      return seriesList;\n    }\n    return [];\n  }\n\n  transformMetricData(metricData, options, start, end) {\n    const dps = [];\n    let metricLabel = null;\n\n    metricLabel = this.createMetricLabel(metricData.metric, options);\n\n    const stepMs = parseInt(options.step, 10) * 1000;\n    let baseTimestamp = start * 1000;\n\n    if (metricData.values === undefined) {\n      throw new Error('Prometheus heatmap error: data should be a time series');\n    }\n\n    for (const value of metricData.values) {\n      let dpValue = parseFloat(value[1]);\n      if (_.isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = parseFloat(value[0]) * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([null, t]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([dpValue, timestamp]);\n    }\n\n    const endTimestamp = end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([null, t]);\n    }\n\n    return {\n      datapoints: dps,\n      query: options.query,\n      responseIndex: options.responseIndex,\n      target: metricLabel,\n    };\n  }\n\n  transformMetricDataToTable(md, resultCount: number, refId: string) {\n    const table = new TableModel();\n    let i, j;\n    const metricLabels = {};\n\n    if (md.length === 0) {\n      return table;\n    }\n\n    // Collect all labels across all metrics\n    _.each(md, series => {\n      for (const label in series.metric) {\n        if (!metricLabels.hasOwnProperty(label)) {\n          metricLabels[label] = 1;\n        }\n      }\n    });\n\n    // Sort metric labels, create columns for them and record their index\n    const sortedLabels = _.keys(metricLabels).sort();\n    table.columns.push({ text: 'Time', type: 'time' });\n    _.each(sortedLabels, (label, labelIndex) => {\n      metricLabels[label] = labelIndex + 1;\n      table.columns.push({ text: label, filterable: !label.startsWith('__') });\n    });\n    const valueText = resultCount > 1 ? `Value #${refId}` : 'Value';\n    table.columns.push({ text: valueText });\n\n    // Populate rows, set value to empty string when label not present.\n    _.each(md, series => {\n      if (series.value) {\n        series.values = [series.value];\n      }\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered: any = [values[0] * 1000];\n          if (series.metric) {\n            for (j = 0; j < sortedLabels.length; j++) {\n              const label = sortedLabels[j];\n              if (series.metric.hasOwnProperty(label)) {\n                reordered.push(series.metric[label]);\n              } else {\n                reordered.push('');\n              }\n            }\n          }\n          reordered.push(parseFloat(values[1]));\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n\n  transformInstantMetricData(md, options) {\n    const dps = [];\n    let metricLabel = null;\n    metricLabel = this.createMetricLabel(md.metric, options);\n    dps.push([parseFloat(md.value[1]), md.value[0] * 1000]);\n    return { target: metricLabel, datapoints: dps, labels: md.metric };\n  }\n\n  createMetricLabel(labelData, options) {\n    let label = '';\n    if (_.isUndefined(options) || _.isEmpty(options.legendFormat)) {\n      label = this.getOriginalMetricName(labelData);\n    } else {\n      label = this.renderTemplate(this.templateSrv.replace(options.legendFormat), labelData);\n    }\n    if (!label || label === '{}') {\n      label = options.query;\n    }\n    return label;\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, (match, g1) => {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  getOriginalMetricName(labelData) {\n    const metricName = labelData.__name__ || '';\n    delete labelData.__name__;\n    const labelPart = _.map(_.toPairs(labelData), label => {\n      return label[0] + '=\"' + label[1] + '\"';\n    }).join(',');\n    return metricName + '{' + labelPart + '}';\n  }\n\n  transformToHistogramOverTime(seriesList) {\n    /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n    for (let i = seriesList.length - 1; i > 0; i--) {\n      const topSeries = seriesList[i].datapoints;\n      const bottomSeries = seriesList[i - 1].datapoints;\n      if (!topSeries || !bottomSeries) {\n        throw new Error('Prometheus heatmap transform error: data should be a time series');\n      }\n\n      for (let j = 0; j < topSeries.length; j++) {\n        const bottomPoint = bottomSeries[j] || [0];\n        topSeries[j][0] -= bottomPoint[0];\n      }\n    }\n\n    return seriesList;\n  }\n}\n\nfunction sortSeriesByLabel(s1, s2): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseHistogramLabel(s1.metric.le);\n    le2 = parseHistogramLabel(s2.metric.le);\n  } catch (err) {\n    console.log(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(le: string): number {\n  if (le === '+Inf') {\n    return +Infinity;\n  }\n  return Number(le);\n}\n","import _ from 'lodash';\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\nconst metricNameRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\(\\]{=!\",])/g;\nconst selectorRegexp = /{([^{]*)}/g;\n\n// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar=\"baz\"}'\nexport function addLabelToQuery(query: string, key: string, value: string, operator?: string): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // Add empty selectors to bare metric names\n  let previousWord;\n  query = query.replace(metricNameRegexp, (match, word, offset) => {\n    const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n    // Handle \"sum by (key) (metric)\"\n    const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n    previousWord = word;\n    if (!insideSelector && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {\n      return `${word}{}`;\n    }\n    return word;\n  });\n\n  // Adding label to existing selectors\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    const selector = match[1];\n    const selectorWithLabel = addLabelToSelector(selector, key, value, operator);\n    lastIndex = match.index + match[1].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    parts.push(prefix, '{', selectorWithLabel, '}');\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nfunction addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  return _.chain(parsedLabels)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nexport default addLabelToQuery;\n","import _ from 'lodash';\n\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { ResultTransformer } from './result_transformer';\nimport { BackendSrv } from 'app/core/services/backend_srv';\n\nimport addLabelToQuery from './add_label_to_query';\n\nexport function alignRange(start, end, step) {\n  const alignedEnd = Math.ceil(end / step) * step;\n  const alignedStart = Math.floor(start / step) * step;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function determineQueryHints(series: any[], datasource?: any): any[] {\n  const hints = series.map((s, i) => {\n    const query: string = s.query;\n    const index: number = s.responseIndex;\n    if (query === undefined || index === undefined) {\n      return null;\n    }\n\n    // ..._bucket metric needs a histogram_quantile()\n    const histogramMetric = query.trim().match(/^\\w+_bucket$/);\n    if (histogramMetric) {\n      const label = 'Time series has buckets, you probably wanted a histogram.';\n      return {\n        index,\n        label,\n        fix: {\n          label: 'Fix by adding histogram_quantile().',\n          action: {\n            type: 'ADD_HISTOGRAM_QUANTILE',\n            query,\n            index,\n          },\n        },\n      };\n    }\n\n    // Check for monotony\n    const datapoints: number[][] = s.datapoints;\n    if (query.indexOf('rate(') === -1 && datapoints.length > 1) {\n      let increasing = false;\n      const monotonic = datapoints.filter(dp => dp[0] !== null).every((dp, index) => {\n        if (index === 0) {\n          return true;\n        }\n        increasing = increasing || dp[0] > datapoints[index - 1][0];\n        // monotonic?\n        return dp[0] >= datapoints[index - 1][0];\n      });\n      if (increasing && monotonic) {\n        const simpleMetric = query.trim().match(/^\\w+$/);\n        let label = 'Time series is monotonously increasing.';\n        let fix;\n        if (simpleMetric) {\n          fix = {\n            label: 'Fix by adding rate().',\n            action: {\n              type: 'ADD_RATE',\n              query,\n              index,\n            },\n          };\n        } else {\n          label = `${label} Try applying a rate() function.`;\n        }\n        return {\n          label,\n          index,\n          fix,\n        };\n      }\n    }\n\n    // Check for recording rules expansion\n    if (datasource && datasource.ruleMappings) {\n      const mapping = datasource.ruleMappings;\n      const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n        if (query.search(ruleName) > -1) {\n          return {\n            ...acc,\n            [ruleName]: mapping[ruleName],\n          };\n        }\n        return acc;\n      }, {});\n      if (_.size(mappingForQuery) > 0) {\n        const label = 'Query contains recording rules.';\n        return {\n          label,\n          index,\n          fix: {\n            label: 'Expand rules',\n            action: {\n              type: 'EXPAND_RULES',\n              query,\n              index,\n              mapping: mappingForQuery,\n            },\n          },\n        };\n      }\n    }\n\n    // No hint found\n    return null;\n  });\n  return hints;\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules.filter(rule => rule.type === 'recording').reduce(\n        (acc, rule) => ({\n          ...acc,\n          [rule.name]: rule.query,\n        }),\n        mapping\n      ),\n    {}\n  );\n}\n\nexport function prometheusRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function prometheusSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return prometheusRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nexport class PrometheusDatasource {\n  type: string;\n  editorSrc: string;\n  name: string;\n  ruleMappings: { [index: string]: string };\n  url: string;\n  directUrl: string;\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache: any;\n  interval: string;\n  queryTimeout: string;\n  httpMethod: string;\n  resultTransformer: ResultTransformer;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv: BackendSrv, private templateSrv, private timeSrv) {\n    this.type = 'prometheus';\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.directUrl = instanceSettings.directUrl;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.resultTransformer = new ResultTransformer(templateSrv);\n    this.ruleMappings = {};\n  }\n\n  init() {\n    this.loadRules();\n  }\n\n  _request(url, data?, options?: any) {\n    options = _.defaults(options || {}, {\n      url: this.url + url,\n      method: this.httpMethod,\n    });\n\n    if (options.method === 'GET') {\n      if (!_.isEmpty(data)) {\n        options.url =\n          options.url +\n          '?' +\n          _.map(data, (v, k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n          }).join('&');\n      }\n    } else {\n      options.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      };\n      options.transformRequest = data => {\n        return $.param(data);\n      };\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  metadataRequest(url) {\n    return this._request(url, null, { method: 'GET', silent: true });\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = _.map(value, prometheusSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  targetContainsTemplate(target) {\n    return this.templateSrv.variableExists(target.expr);\n  }\n\n  query(options) {\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n\n    const queries = [];\n    const activeTargets = [];\n\n    options = _.clone(options);\n\n    for (const target of options.targets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      activeTargets.push(target);\n      queries.push(this.createQuery(target, options, start, end));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return this.$q.when({ data: [] });\n    }\n\n    const allQueryPromise = _.map(queries, query => {\n      if (!query.instant) {\n        return this.performTimeSeriesQuery(query, query.start, query.end);\n      } else {\n        return this.performInstantQuery(query, end);\n      }\n    });\n\n    return this.$q.all(allQueryPromise).then(responseList => {\n      let result = [];\n      let hints = [];\n\n      _.each(responseList, (response, index) => {\n        if (response.status === 'error') {\n          const error = {\n            index,\n            ...response.error,\n          };\n          throw error;\n        }\n\n        // Keeping original start/end for transformers\n        const transformerOptions = {\n          format: activeTargets[index].format,\n          step: queries[index].step,\n          legendFormat: activeTargets[index].legendFormat,\n          start: queries[index].start,\n          end: queries[index].end,\n          query: queries[index].expr,\n          responseListLength: responseList.length,\n          responseIndex: index,\n          refId: activeTargets[index].refId,\n        };\n        const series = this.resultTransformer.transform(response, transformerOptions);\n        result = [...result, ...series];\n\n        if (queries[index].hinting) {\n          const queryHints = determineQueryHints(series, this);\n          hints = [...hints, ...queryHints];\n        }\n      });\n\n      return { data: result, hints };\n    });\n  }\n\n  createQuery(target, options, start, end) {\n    const query: any = {\n      hinting: target.hinting,\n      instant: target.instant,\n    };\n    const range = Math.ceil(end - start);\n\n    let interval = kbn.interval_to_seconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query. or same as interval otherwise\n    const minInterval = kbn.interval_to_seconds(\n      this.templateSrv.replace(target.interval, options.scopedVars) || options.interval\n    );\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = { ...options.scopedVars, ...this.getRangeScopedVars() };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRangeScopedVars(),\n      });\n    }\n    query.step = interval;\n\n    let expr = target.expr;\n\n    // Apply adhoc filters\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    expr = adhocFilters.reduce((acc, filter) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusSpecialRegexEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr);\n    query.requestId = options.panelId + target.refId;\n\n    // Align query interval with step\n    const adjusted = alignRange(start, end, query.step);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n\n    return query;\n  }\n\n  adjustInterval(interval, minInterval, range, intervalFactor) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    if (interval !== 0 && range / intervalFactor / interval > 11000) {\n      interval = Math.ceil(range / intervalFactor / 11000);\n    }\n    return Math.max(interval * intervalFactor, minInterval, 1);\n  }\n\n  performTimeSeriesQuery(query, start, end) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data = {\n      query: query.expr,\n      start: start,\n      end: end,\n      step: query.step,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performInstantQuery(query, time) {\n    const url = '/api/v1/query';\n    const data = {\n      query: query.expr,\n      time: time,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performSuggestQuery(query, cache = false) {\n    const url = '/api/v1/label/__name__/values';\n\n    if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {\n      return this.$q.when(\n        _.filter(this.metricsNameCache.data, metricName => {\n          return metricName.indexOf(query) !== 1;\n        })\n      );\n    }\n\n    return this.metadataRequest(url).then(result => {\n      this.metricsNameCache = {\n        data: result.data.data,\n        expire: Date.now() + 60 * 1000,\n      };\n      return _.filter(result.data.data, metricName => {\n        return metricName.indexOf(query) !== 1;\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: kbn.interval_to_ms(this.interval), value: kbn.interval_to_ms(this.interval) },\n      ...this.getRangeScopedVars(),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated, this.timeSrv);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars() {\n    const range = this.timeSrv.timeRange();\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    const regularRange = kbn.secondsToHms(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: regularRange, value: regularRange },\n    };\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const expr = annotation.expr || '';\n    let tagKeys = annotation.tagKeys || '';\n    const titleFormat = annotation.titleFormat || '';\n    const textFormat = annotation.textFormat || '';\n\n    if (!expr) {\n      return this.$q.when([]);\n    }\n\n    const step = annotation.step || '60s';\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n    // Unsetting min interval\n    const queryOptions = {\n      ...options,\n      interval: '0s',\n    };\n    const query = this.createQuery({ expr, interval: step }, queryOptions, start, end);\n\n    const self = this;\n    return this.performTimeSeriesQuery(query, query.start, query.end).then(results => {\n      const eventList = [];\n      tagKeys = tagKeys.split(',');\n\n      _.each(results.data.data.result, series => {\n        const tags = _.chain(series.metric)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          })\n          .value();\n\n        for (const value of series.values) {\n          const valueIsTrue = value[1] === '1'; // e.g. ALERTS\n          if (valueIsTrue || annotation.useValueForTime) {\n            const event = {\n              annotation: annotation,\n              title: self.resultTransformer.renderTemplate(titleFormat, series.metric),\n              tags: tags,\n              text: self.resultTransformer.renderTemplate(textFormat, series.metric),\n            };\n\n            if (annotation.useValueForTime) {\n              event['time'] = Math.floor(parseFloat(value[1]));\n            } else {\n              event['time'] = Math.floor(parseFloat(value[0])) * 1000;\n            }\n\n            eventList.push(event);\n          }\n        }\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    const now = new Date().getTime();\n    return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(response => {\n      if (response.data.status === 'success') {\n        return { status: 'success', message: 'Data source is working' };\n      } else {\n        return { status: 'error', message: response.error };\n      }\n    });\n  }\n\n  getExploreState(targets: any[]) {\n    let state = {};\n    if (targets && targets.length > 0) {\n      const queries = targets.map(t => ({\n        query: this.templateSrv.replace(t.expr, {}, this.interpolateQueryExpr),\n        format: t.format,\n      }));\n      state = {\n        ...state,\n        queries,\n        datasource: this.name,\n      };\n    }\n    return state;\n  }\n\n  loadRules() {\n    this.metadataRequest('/api/v1/rules')\n      .then(res => res.data || res.json())\n      .then(body => {\n        const groups = _.get(body, ['data', 'groups']);\n        if (groups) {\n          this.ruleMappings = extractRuleMappingFromGroups(groups);\n        }\n      })\n      .catch(e => {\n        console.log('Rules API is experimental. Ignore next error.');\n        console.error(e);\n      });\n  }\n\n  modifyQuery(query: string, action: any): string {\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        return addLabelToQuery(query, action.key, action.value);\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        return `histogram_quantile(0.95, sum(rate(${query}[5m])) by (le))`;\n      }\n      case 'ADD_RATE': {\n        return `rate(${query}[5m])`;\n      }\n      case 'EXPAND_RULES': {\n        const mapping = action.mapping;\n        if (mapping) {\n          const ruleNames = Object.keys(mapping);\n          const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\()`, 'ig');\n          return query.replace(rulesRegex, (match, pre, name, post) => mapping[name]);\n        }\n      }\n      default:\n        return query;\n    }\n  }\n\n  getPrometheusTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: this.getPrometheusTime(range.from, false),\n      end: this.getPrometheusTime(range.to, true),\n    };\n  }\n\n  getOriginalMetricName(labelData) {\n    return this.resultTransformer.getOriginalMetricName(labelData);\n  }\n}\n","export enum MetricKind {\n  METRIC_KIND_UNSPECIFIED = 'METRIC_KIND_UNSPECIFIED',\n  GAUGE = 'GAUGE',\n  DELTA = 'DELTA',\n  CUMULATIVE = 'CUMULATIVE',\n}\n\nexport enum ValueTypes {\n  VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED',\n  BOOL = 'BOOL',\n  INT64 = 'INT64',\n  DOUBLE = 'DOUBLE',\n  STRING = 'STRING',\n  DISTRIBUTION = 'DISTRIBUTION',\n  MONEY = 'MONEY',\n}\n\nexport const alignOptions = [\n  {\n    text: 'delta',\n    value: 'ALIGN_DELTA',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'rate',\n    value: 'ALIGN_RATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'interpolate',\n    value: 'ALIGN_INTERPOLATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'next older',\n    value: 'ALIGN_NEXT_OLDER',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'min',\n    value: 'ALIGN_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'ALIGN_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'mean',\n    value: 'ALIGN_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'ALIGN_COUNT',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'ALIGN_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'stddev',\n    value: 'ALIGN_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'ALIGN_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'count false',\n    value: 'ALIGN_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'fraction true',\n    value: 'ALIGN_FRACTION_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'percentile 99',\n    value: 'ALIGN_PERCENTILE_99',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 95',\n    value: 'ALIGN_PERCENTILE_95',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 50',\n    value: 'ALIGN_PERCENTILE_50',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 05',\n    value: 'ALIGN_PERCENTILE_05',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percent change',\n    value: 'ALIGN_PERCENT_CHANGE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const aggOptions = [\n  {\n    text: 'none',\n    value: 'REDUCE_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'mean',\n    value: 'REDUCE_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'min',\n    value: 'REDUCE_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'REDUCE_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'REDUCE_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'std. dev.',\n    value: 'REDUCE_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'REDUCE_COUNT',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'REDUCE_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count false',\n    value: 'REDUCE_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '99th percentile',\n    value: 'REDUCE_PERCENTILE_99',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '95th percentile',\n    value: 'REDUCE_PERCENTILE_95',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '50th percentile',\n    value: 'REDUCE_PERCENTILE_50',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '5th percentile',\n    value: 'REDUCE_PERCENTILE_05',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const alignmentPeriods = [\n  { text: 'grafana auto', value: 'grafana-auto' },\n  { text: 'stackdriver auto', value: 'stackdriver-auto' },\n  { text: '1m', value: '+60s' },\n  { text: '5m', value: '+300s' },\n  { text: '30m', value: '+1800s' },\n  { text: '1h', value: '+3600s' },\n  { text: '6h', value: '+21600s' },\n  { text: '1d', value: '+86400s' },\n  { text: '1w', value: '+604800s' },\n];\n\nexport const stackdriverUnitMappings = {\n  bit: 'bits',\n  By: 'bytes',\n  s: 's',\n  min: 'm',\n  h: 'h',\n  d: 'd',\n  us: 'µs',\n  ms: 'ms',\n  ns: 'ns',\n  percent: 'percent',\n  MiBy: 'mbytes',\n  'By/s': 'Bps',\n  GBy: 'decgbytes',\n};\n","import { PrometheusDatasource } from './datasource';\nimport _ from 'lodash';\n\nexport class PromCompleter {\n  labelQueryCache: any;\n  labelNameCache: any;\n  labelValueCache: any;\n  templateVariableCompletions: any;\n\n  identifierRegexps = [/\\[/, /[a-zA-Z0-9_:]/];\n\n  constructor(private datasource: PrometheusDatasource, private templateSrv) {\n    this.labelQueryCache = {};\n    this.labelNameCache = {};\n    this.labelValueCache = {};\n    this.templateVariableCompletions = this.templateSrv.variables.map(variable => {\n      return {\n        caption: '$' + variable.name,\n        value: '$' + variable.name,\n        meta: 'variable',\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  getCompletions(editor, session, pos, prefix, callback) {\n    const wrappedCallback = (err, completions) => {\n      completions = completions.concat(this.templateVariableCompletions);\n      return callback(err, completions);\n    };\n\n    const token = session.getTokenAt(pos.row, pos.column);\n\n    switch (token.type) {\n      case 'entity.name.tag.label-matcher':\n        this.getCompletionsForLabelMatcherName(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'string.quoted.label-matcher':\n        this.getCompletionsForLabelMatcherValue(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'entity.name.tag.label-list-matcher':\n        this.getCompletionsForBinaryOperator(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n    }\n\n    if (token.type === 'paren.lparen' && token.value === '[') {\n      const vectors = [];\n      for (const unit of ['s', 'm', 'h']) {\n        for (const value of [1, 5, 10, 30]) {\n          vectors.push({\n            caption: value + unit,\n            value: '[' + value + unit,\n            meta: 'range vector',\n          });\n        }\n      }\n\n      vectors.unshift({\n        caption: '$__interval_ms',\n        value: '[$__interval_ms',\n        meta: 'range vector',\n      });\n\n      vectors.unshift({\n        caption: '$__interval',\n        value: '[$__interval',\n        meta: 'range vector',\n      });\n\n      wrappedCallback(null, vectors);\n      return;\n    }\n\n    const query = prefix;\n\n    return this.datasource.performSuggestQuery(query, true).then(metricNames => {\n      wrappedCallback(\n        null,\n        metricNames.map(name => {\n          let value = name;\n          if (prefix === '(') {\n            value = '(' + name;\n          }\n\n          return {\n            caption: name,\n            value: value,\n            meta: 'metric',\n          };\n        })\n      );\n    });\n  }\n\n  getCompletionsForLabelMatcherName(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve(this.transformToCompletions(['__name__', 'instance', 'job'], 'label name'));\n    }\n\n    if (this.labelNameCache[metricName]) {\n      return Promise.resolve(this.labelNameCache[metricName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelNames = this.transformToCompletions(\n        _.uniq(\n          _.flatten(\n            result.map(r => {\n              return Object.keys(r);\n            })\n          )\n        ),\n        'label name'\n      );\n      this.labelNameCache[metricName] = labelNames;\n      return Promise.resolve(labelNames);\n    });\n  }\n\n  getCompletionsForLabelMatcherValue(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve([]);\n    }\n\n    const labelNameToken = this.findToken(\n      session,\n      pos.row,\n      pos.column,\n      'entity.name.tag.label-matcher',\n      null,\n      'paren.lparen.label-matcher'\n    );\n    if (!labelNameToken) {\n      return Promise.resolve([]);\n    }\n    const labelName = labelNameToken.value;\n\n    if (this.labelValueCache[metricName] && this.labelValueCache[metricName][labelName]) {\n      return Promise.resolve(this.labelValueCache[metricName][labelName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelValues = this.transformToCompletions(\n        _.uniq(\n          result.map(r => {\n            return r[labelName];\n          })\n        ),\n        'label value'\n      );\n      this.labelValueCache[metricName] = this.labelValueCache[metricName] || {};\n      this.labelValueCache[metricName][labelName] = labelValues;\n      return Promise.resolve(labelValues);\n    });\n  }\n\n  getCompletionsForBinaryOperator(session, pos) {\n    const keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.control', null, 'identifier');\n    if (!keywordOperatorToken) {\n      return Promise.resolve([]);\n    }\n    let rparenToken, expr;\n    switch (keywordOperatorToken.value) {\n      case 'by':\n      case 'without':\n        rparenToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (!rparenToken) {\n          return Promise.resolve([]);\n        }\n        expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n        if (expr === '') {\n          return Promise.resolve([]);\n        }\n        return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n          const labelNames = this.transformToCompletions(\n            _.uniq(\n              _.flatten(\n                result.map(r => {\n                  return Object.keys(r);\n                })\n              )\n            ),\n            'label name'\n          );\n          this.labelNameCache[expr] = labelNames;\n          return labelNames;\n        });\n      case 'on':\n      case 'ignoring':\n      case 'group_left':\n      case 'group_right':\n        const binaryOperatorToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'keyword.operator.binary',\n          null,\n          'identifier'\n        );\n        if (!binaryOperatorToken) {\n          return Promise.resolve([]);\n        }\n        rparenToken = this.findToken(\n          session,\n          binaryOperatorToken.row,\n          binaryOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (rparenToken) {\n          expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n          if (expr === '') {\n            return Promise.resolve([]);\n          }\n          return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[expr] = labelNames;\n            return labelNames;\n          });\n        } else {\n          const metricName = this.findMetricName(session, binaryOperatorToken.row, binaryOperatorToken.column);\n          return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[metricName] = labelNames;\n            return Promise.resolve(labelNames);\n          });\n        }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getLabelNameAndValueForExpression(expr: string, type: string): Promise<any> {\n    if (this.labelQueryCache[expr]) {\n      return Promise.resolve(this.labelQueryCache[expr]);\n    }\n    let query = expr;\n    if (type === 'metricName') {\n      let op = '=~';\n      if (/[a-zA-Z_:][a-zA-Z0-9_:]*/.test(expr)) {\n        op = '=';\n      }\n      query = '{__name__' + op + '\"' + expr + '\"}';\n    }\n    const { start, end } = this.datasource.getTimeRange();\n    const url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;\n    return this.datasource.metadataRequest(url).then(response => {\n      this.labelQueryCache[expr] = response.data.data;\n      return response.data.data;\n    });\n  }\n\n  transformToCompletions(words, meta) {\n    return words.map(name => {\n      return {\n        caption: name,\n        value: name,\n        meta: meta,\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  findMetricName(session, row, column) {\n    let metricName = '';\n\n    let tokens;\n    const nameLabelNameToken = this.findToken(\n      session,\n      row,\n      column,\n      'entity.name.tag.label-matcher',\n      '__name__',\n      'paren.lparen.label-matcher'\n    );\n    if (nameLabelNameToken) {\n      tokens = session.getTokens(nameLabelNameToken.row);\n      const nameLabelValueToken = tokens[nameLabelNameToken.index + 2];\n      if (nameLabelValueToken && nameLabelValueToken.type === 'string.quoted.label-matcher') {\n        metricName = nameLabelValueToken.value.slice(1, -1); // cut begin/end quotation\n      }\n    } else {\n      const metricNameToken = this.findToken(session, row, column, 'identifier', null, null);\n      if (metricNameToken) {\n        tokens = session.getTokens(metricNameToken.row);\n        metricName = metricNameToken.value;\n      }\n    }\n\n    return metricName;\n  }\n\n  findToken(session, row, column, target, value, guard) {\n    let tokens, idx;\n    // find index and get column of previous token\n    for (let r = row; r >= 0; r--) {\n      let c;\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          const nc = c + tokens[idx].value.length;\n          if (nc >= column) {\n            break;\n          }\n          c = nc;\n        }\n      } else {\n        idx = tokens.length - 1;\n        c =\n          _.sum(\n            tokens.map(t => {\n              return t.value.length;\n            })\n          ) - tokens[tokens.length - 1].value.length;\n      }\n\n      for (; idx >= 0; idx--) {\n        if (tokens[idx].type === guard) {\n          return null;\n        }\n\n        if (tokens[idx].type === target && (!value || tokens[idx].value === value)) {\n          tokens[idx].row = r;\n          tokens[idx].column = c;\n          tokens[idx].index = idx;\n          return tokens[idx];\n        }\n        c -= tokens[idx].value.length;\n      }\n    }\n\n    return null;\n  }\n\n  findExpressionMatchedParen(session, row, column) {\n    let tokens, idx;\n    let deep = 1;\n    let expression = ')';\n    for (let r = row; r >= 0; r--) {\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        let c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          c += tokens[idx].value.length;\n          if (c >= column) {\n            break;\n          }\n        }\n      } else {\n        idx = tokens.length - 1;\n      }\n\n      for (; idx >= 0; idx--) {\n        expression = tokens[idx].value + expression;\n        if (tokens[idx].type === 'paren.rparen') {\n          deep++;\n        } else if (tokens[idx].type === 'paren.lparen') {\n          deep--;\n          if (deep === 0) {\n            return expression;\n          }\n        }\n      }\n    }\n\n    return expression;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { PromCompleter } from './completer';\nimport './mode-prometheus';\nimport './snippets/prometheus';\n\nclass PrometheusQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  metric: any;\n  resolutions: any;\n  formats: any;\n  instant: any;\n  oldTarget: any;\n  suggestMetrics: any;\n  getMetricsAutocomplete: any;\n  linkToPrometheus: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv) {\n    super($scope, $injector);\n\n    const target = this.target;\n    target.expr = target.expr || '';\n    target.intervalFactor = target.intervalFactor || 1;\n    target.format = target.format || this.getDefaultFormat();\n\n    this.metric = '';\n    this.resolutions = _.map([1, 2, 3, 4, 5, 10], f => {\n      return { factor: f, label: '1/' + f };\n    });\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n      { text: 'Heatmap', value: 'heatmap' },\n    ];\n\n    this.instant = false;\n\n    this.updateLink();\n  }\n\n  getCompleter(query) {\n    return new PromCompleter(this.datasource, this.templateSrv);\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return 'table';\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return 'heatmap';\n    }\n\n    return 'time_series';\n  }\n\n  refreshMetricData() {\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = angular.copy(this.target);\n      this.panelCtrl.refresh();\n      this.updateLink();\n    }\n  }\n\n  updateLink() {\n    const range = this.panelCtrl.range;\n    if (!range) {\n      return;\n    }\n\n    const rangeDiff = Math.ceil((range.to.valueOf() - range.from.valueOf()) / 1000);\n    const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n    const expr = {\n      'g0.expr': this.templateSrv.replace(\n        this.target.expr,\n        this.panelCtrl.panel.scopedVars,\n        this.datasource.interpolateQueryExpr\n      ),\n      'g0.range_input': rangeDiff + 's',\n      'g0.end_input': endTime,\n      'g0.step_input': this.target.step,\n      'g0.stacked': this.panelCtrl.panel.stack ? 1 : 0,\n      'g0.tab': 0,\n    };\n    const args = _.map(expr, (v, k) => {\n      return k + '=' + encodeURIComponent(v);\n    }).join('&');\n    this.linkToPrometheus = this.datasource.directUrl + '/graph?' + args;\n  }\n\n  getCollapsedText() {\n    return this.target.expr;\n  }\n}\n\nexport { PrometheusQueryCtrl };\n","export class PrometheusConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/prometheus/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.httpMethod = this.current.jsonData.httpMethod || 'GET';\n  }\n}\n","import { PrometheusDatasource } from './datasource';\nimport { PrometheusQueryCtrl } from './query_ctrl';\nimport { PrometheusConfigCtrl } from './config_ctrl';\n\nclass PrometheusAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  PrometheusDatasource as Datasource,\n  PrometheusQueryCtrl as QueryCtrl,\n  PrometheusConfigCtrl as ConfigCtrl,\n  PrometheusAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MssqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [interpolatedQuery],\n        },\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\n\nclass MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MssqlDatasource,\n  MssqlDatasource as Datasource,\n  MssqlQueryCtrl as QueryCtrl,\n  MssqlConfigCtrl as ConfigCtrl,\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MssqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MssqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\nclass TestDataDatasource {\n  id: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q) {\n    this.id = instanceSettings.id;\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        scenarioId: item.scenarioId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        stringInput: item.stringInput,\n        points: item.points,\n        alias: item.alias,\n        datasourceId: this.id,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .post('/api/tsdb/query', {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: queries,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.get('/api/annotations', {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.limit,\n      type: options.type,\n    });\n  }\n}\n\nexport { TestDataDatasource };\n","import _ from 'lodash';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport moment from 'moment';\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = moment();\n    this.selectedPoint = { text: 'Select point', value: null };\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: moment(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return this.backendSrv.get('/api/tsdb/testdata/scenarios').then(res => {\n      this.scenarioList = res;\n      this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    this.refresh();\n  }\n}\n","import { TestDataDatasource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n\n  constructor() {}\n\n  static template = '<h2>test data</h2>';\n}\n\nexport {\n  TestDataDatasource,\n  TestDataDatasource as Datasource,\n  TestDataQueryCtrl as QueryCtrl,\n  TestDataAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import { stackdriverUnitMappings } from './constants';\nimport appEvents from 'app/core/app_events';\n\nexport default class StackdriverDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  projectName: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private templateSrv, private timeSrv) {\n    this.baseUrl = `/stackdriver/`;\n    this.url = instanceSettings.url;\n    this.doRequest = this.doRequest;\n    this.id = instanceSettings.id;\n    this.projectName = instanceSettings.jsonData.defaultProject || '';\n  }\n\n  async getTimeSeries(options) {\n    const queries = options.targets\n      .filter(target => {\n        return !target.hide && target.metricType;\n      })\n      .map(t => {\n        if (!t.hasOwnProperty('aggregation')) {\n          t.aggregation = {\n            crossSeriesReducer: 'REDUCE_MEAN',\n            groupBys: [],\n          };\n        }\n        return {\n          refId: t.refId,\n          intervalMs: options.intervalMs,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(t.metricType, options.scopedVars || {}),\n          primaryAggregation: this.templateSrv.replace(t.aggregation.crossSeriesReducer, options.scopedVars || {}),\n          perSeriesAligner: this.templateSrv.replace(t.aggregation.perSeriesAligner, options.scopedVars || {}),\n          alignmentPeriod: this.templateSrv.replace(t.aggregation.alignmentPeriod, options.scopedVars || {}),\n          groupBys: this.interpolateGroupBys(t.aggregation.groupBys, options.scopedVars),\n          view: t.view || 'FULL',\n          filters: (t.filters || []).map(f => {\n            return this.templateSrv.replace(f, options.scopedVars || {});\n          }),\n          aliasBy: this.templateSrv.replace(t.aliasBy, options.scopedVars || {}),\n          type: 'timeSeriesQuery',\n        };\n      });\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n    return data;\n  }\n\n  async getLabels(metricType, refId) {\n    return await this.getTimeSeries({\n      targets: [\n        {\n          refId: refId,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(metricType),\n          aggregation: {\n            crossSeriesReducer: 'REDUCE_NONE',\n          },\n          view: 'HEADERS',\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    });\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars): string[] {\n    let interpolatedGroupBys = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any[]) {\n    let unit = 'none';\n    if (targets.length > 0 && targets.every(t => t.unit === targets[0].unit)) {\n      if (stackdriverUnitMappings.hasOwnProperty(targets[0].unit)) {\n        unit = stackdriverUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n\n  async query(options) {\n    const result = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object['values'](data.results).forEach(queryRes => {\n        if (!queryRes.series) {\n          return;\n        }\n\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach(series => {\n          result.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n            unit,\n          });\n        });\n      });\n    }\n\n    return { data: result };\n  }\n\n  async annotationQuery(options) {\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        datasourceId: this.id,\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        primaryAggregation: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        view: 'FULL',\n        filters: (annotation.target.filters || []).map(f => {\n          return this.templateSrv.replace(f, options.scopedVars || {});\n        }),\n        type: 'annotationQuery',\n      },\n    ];\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map(v => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      };\n    });\n\n    return results;\n  }\n\n  metricFindQuery(query) {\n    throw new Error('Template variables support is not yet imlemented');\n  }\n\n  testDatasource() {\n    const path = `v3/projects/${this.projectName}/metricDescriptors`;\n    return this.doRequest(`${this.baseUrl}${path}`)\n      .then(response => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Stackdriver API.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch(error => {\n        let message = 'Stackdriver: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code) {\n          // 400, 401\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Stackdriver API';\n        }\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  async getProjects() {\n    const response = await this.doRequest(`/cloudresourcemanager/v1/projects`);\n    return response.data.projects.map(p => ({ id: p.projectId, name: p.name }));\n  }\n\n  async getDefaultProject() {\n    try {\n      const projects = await this.getProjects();\n      if (projects && projects.length > 0) {\n        const test = projects.filter(p => p.id === this.projectName)[0];\n        return test;\n      } else {\n        throw new Error('No projects found');\n      }\n    } catch (error) {\n      let message = 'Projects cannot be fetched: ';\n      message += error.statusText ? error.statusText + ': ' : '';\n      if (error && error.data && error.data.error && error.data.error.message) {\n        if (error.data.error.code === 403) {\n          message += `\n            A list of projects could not be fetched from the Google Cloud Resource Manager API.\n            You might need to enable it first:\n            https://console.developers.google.com/apis/library/cloudresourcemanager.googleapis.com`;\n        } else {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        }\n      } else {\n        message += 'Cannot connect to Stackdriver API';\n      }\n      appEvents.emit('ds-request-error', message);\n    }\n  }\n\n  async getMetricTypes(projectId: string) {\n    try {\n      const metricsApiPath = `v3/projects/${projectId}/metricDescriptors`;\n      const { data } = await this.doRequest(`${this.baseUrl}${metricsApiPath}`);\n\n      const metrics = data.metricDescriptors.map(m => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n        return m;\n      });\n\n      return metrics;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async doRequest(url, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch(error => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as options from './constants';\nimport kbn from 'app/core/utils/kbn';\n\nexport class StackdriverAggregation {\n  constructor() {\n    return {\n      templateUrl: 'public/app/plugins/datasource/stackdriver/partials/query.aggregation.html',\n      controller: 'StackdriverAggregationCtrl',\n      restrict: 'E',\n      scope: {\n        target: '=',\n        alignmentPeriod: '<',\n        refresh: '&',\n      },\n    };\n  }\n}\n\nexport class StackdriverAggregationCtrl {\n  alignmentPeriods: any[];\n  aggOptions: any[];\n  alignOptions: any[];\n  target: any;\n\n  /** @ngInject */\n  constructor(private $scope) {\n    this.$scope.ctrl = this;\n    this.target = $scope.target;\n    this.alignmentPeriods = options.alignmentPeriods;\n    this.aggOptions = options.aggOptions;\n    this.alignOptions = options.alignOptions;\n    this.setAggOptions();\n    this.setAlignOptions();\n    const self = this;\n    $scope.$on('metricTypeChanged', () => {\n      self.setAggOptions();\n      self.setAlignOptions();\n    });\n  }\n\n  setAlignOptions() {\n    this.alignOptions = !this.target.valueType\n      ? []\n      : options.alignOptions.filter(i => {\n          return (\n            i.valueTypes.indexOf(this.target.valueType) !== -1 && i.metricKinds.indexOf(this.target.metricKind) !== -1\n          );\n        });\n    if (!this.alignOptions.find(o => o.value === this.target.aggregation.perSeriesAligner)) {\n      this.target.aggregation.perSeriesAligner = this.alignOptions.length > 0 ? this.alignOptions[0].value : '';\n    }\n  }\n\n  setAggOptions() {\n    this.aggOptions = !this.target.metricKind\n      ? []\n      : options.aggOptions.filter(i => {\n          return (\n            i.valueTypes.indexOf(this.target.valueType) !== -1 && i.metricKinds.indexOf(this.target.metricKind) !== -1\n          );\n        });\n\n    if (!this.aggOptions.find(o => o.value === this.target.aggregation.crossSeriesReducer)) {\n      this.deselectAggregationOption('REDUCE_NONE');\n    }\n\n    if (this.target.aggregation.groupBys.length > 0) {\n      this.aggOptions = this.aggOptions.filter(o => o.value !== 'REDUCE_NONE');\n      this.deselectAggregationOption('REDUCE_NONE');\n    }\n  }\n\n  formatAlignmentText() {\n    const selectedAlignment = this.alignOptions.find(ap => ap.value === this.target.aggregation.perSeriesAligner);\n    return `${kbn.secondsToHms(this.$scope.alignmentPeriod)} interval (${selectedAlignment.text})`;\n  }\n\n  deselectAggregationOption(notValidOptionValue: string) {\n    const newValue = this.aggOptions.find(o => o.value !== notValidOptionValue);\n    this.target.aggregation.crossSeriesReducer = newValue ? newValue.value : '';\n  }\n}\n\nangular.module('grafana.controllers').directive('stackdriverAggregation', StackdriverAggregation);\nangular.module('grafana.controllers').controller('StackdriverAggregationCtrl', StackdriverAggregationCtrl);\n","export const DefaultRemoveFilterValue = '-- remove filter --';\nexport const DefaultFilterValue = 'select value';\n\nexport class FilterSegments {\n  filterSegments: any[];\n  removeSegment: any;\n\n  constructor(private uiSegmentSrv, private target, private getFilterKeysFunc, private getFilterValuesFunc) {}\n\n  buildSegmentModel() {\n    this.removeSegment = this.uiSegmentSrv.newSegment({ fake: true, value: DefaultRemoveFilterValue });\n\n    this.filterSegments = [];\n    this.target.filters.forEach((f, index) => {\n      switch (index % 4) {\n        case 0:\n          this.filterSegments.push(this.uiSegmentSrv.newKey(f));\n          break;\n        case 1:\n          this.filterSegments.push(this.uiSegmentSrv.newOperator(f));\n          break;\n        case 2:\n          this.filterSegments.push(this.uiSegmentSrv.newKeyValue(f));\n          break;\n        case 3:\n          this.filterSegments.push(this.uiSegmentSrv.newCondition(f));\n          break;\n      }\n    });\n    this.ensurePlusButton(this.filterSegments);\n  }\n\n  async getFilters(segment, index, hasNoFilterKeys) {\n    if (segment.type === 'condition') {\n      return [this.uiSegmentSrv.newSegment('AND')];\n    }\n\n    if (segment.type === 'operator') {\n      return this.uiSegmentSrv.newOperators(['=', '!=', '=~', '!=~']);\n    }\n\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      if (hasNoFilterKeys && segment.value && segment.value !== DefaultRemoveFilterValue) {\n        this.removeSegment.value = DefaultRemoveFilterValue;\n        return Promise.resolve([this.removeSegment]);\n      } else {\n        return this.getFilterKeysFunc();\n      }\n    }\n\n    if (segment.type === 'value') {\n      const filterValues = this.getFilterValuesFunc(index);\n\n      if (filterValues.length > 0) {\n        return this.getValuesForFilterKey(filterValues);\n      }\n    }\n\n    return [];\n  }\n\n  getValuesForFilterKey(labels: any[]) {\n    const filterValues = labels.map(l => {\n      return this.uiSegmentSrv.newSegment({\n        value: `${l}`,\n        expandable: false,\n      });\n    });\n\n    return filterValues;\n  }\n\n  addNewFilterSegments(segment, index) {\n    if (index > 2) {\n      this.filterSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n    }\n    segment.type = 'key';\n    this.filterSegments.push(this.uiSegmentSrv.newOperator('='));\n    this.filterSegments.push(this.uiSegmentSrv.newFake(DefaultFilterValue, 'value', 'query-segment-value'));\n  }\n\n  removeFilterSegment(index) {\n    this.filterSegments.splice(index, 3);\n    // remove trailing condition\n    if (index > 2 && this.filterSegments[index - 1].type === 'condition') {\n      this.filterSegments.splice(index - 1, 1);\n    }\n\n    // remove condition if it is first segment\n    if (index === 0 && this.filterSegments.length > 0 && this.filterSegments[0].type === 'condition') {\n      this.filterSegments.splice(0, 1);\n    }\n  }\n\n  ensurePlusButton(segments) {\n    const count = segments.length;\n    const lastSegment = segments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  filterSegmentUpdated(segment, index) {\n    if (segment.type === 'plus-button') {\n      this.addNewFilterSegments(segment, index);\n    } else if (segment.type === 'key' && segment.value === DefaultRemoveFilterValue) {\n      this.removeFilterSegment(index);\n      this.ensurePlusButton(this.filterSegments);\n    } else if (segment.type === 'value' && segment.value !== DefaultFilterValue) {\n      this.ensurePlusButton(this.filterSegments);\n    }\n\n    return this.filterSegments.filter(s => s.type !== 'plus-button').map(seg => seg.value);\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { FilterSegments, DefaultRemoveFilterValue } from './filter_segments';\nimport appEvents from 'app/core/app_events';\n\nexport class StackdriverFilter {\n  /** @ngInject */\n  constructor() {\n    return {\n      templateUrl: 'public/app/plugins/datasource/stackdriver/partials/query.filter.html',\n      controller: 'StackdriverFilterCtrl',\n      controllerAs: 'ctrl',\n      restrict: 'E',\n      scope: {\n        target: '=',\n        datasource: '=',\n        refresh: '&',\n        defaultDropdownValue: '<',\n        defaultServiceValue: '<',\n        hideGroupBys: '<',\n      },\n    };\n  }\n}\n\nexport class StackdriverFilterCtrl {\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n\n  defaultRemoveGroupByValue = '-- remove group by --';\n  loadLabelsPromise: Promise<any>;\n\n  service: string;\n  metricType: string;\n  metricDescriptors: any[];\n  metrics: any[];\n  services: any[];\n  groupBySegments: any[];\n  filterSegments: FilterSegments;\n  removeSegment: any;\n  target: any;\n  datasource: any;\n\n  /** @ngInject */\n  constructor(private $scope, private uiSegmentSrv, private templateSrv, private $rootScope) {\n    this.datasource = $scope.datasource;\n    this.target = $scope.target;\n    this.metricType = $scope.defaultDropdownValue;\n    this.service = $scope.defaultServiceValue;\n\n    this.metricDescriptors = [];\n    this.metrics = [];\n    this.services = [];\n\n    this.getCurrentProject()\n      .then(this.loadMetricDescriptors.bind(this))\n      .then(this.getLabels.bind(this));\n\n    this.initSegments($scope.hideGroupBys);\n  }\n\n  initSegments(hideGroupBys: boolean) {\n    if (!hideGroupBys) {\n      this.groupBySegments = this.target.aggregation.groupBys.map(groupBy => {\n        return this.uiSegmentSrv.getSegmentForValue(groupBy);\n      });\n      this.ensurePlusButton(this.groupBySegments);\n    }\n\n    this.removeSegment = this.uiSegmentSrv.newSegment({ fake: true, value: '-- remove group by --' });\n\n    this.filterSegments = new FilterSegments(\n      this.uiSegmentSrv,\n      this.target,\n      this.getGroupBys.bind(this, null, null, DefaultRemoveFilterValue, false),\n      this.getFilterValues.bind(this)\n    );\n    this.filterSegments.buildSegmentModel();\n  }\n\n  async getCurrentProject() {\n    this.target.project = await this.datasource.getDefaultProject();\n  }\n\n  async loadMetricDescriptors() {\n    if (this.target.project.id !== 'default') {\n      this.metricDescriptors = await this.datasource.getMetricTypes(this.target.project.id);\n      this.services = this.getServicesList();\n      this.metrics = this.getMetricsList();\n      return this.metricDescriptors;\n    } else {\n      return [];\n    }\n  }\n\n  getServicesList() {\n    const defaultValue = { value: this.$scope.defaultServiceValue, text: this.$scope.defaultServiceValue };\n    const services = this.metricDescriptors.map(m => {\n      return {\n        value: m.service,\n        text: m.serviceShortName,\n      };\n    });\n\n    if (services.find(m => m.value === this.target.service)) {\n      this.service = this.target.service;\n    }\n\n    return services.length > 0 ? [defaultValue, ..._.uniqBy(services, 'value')] : [];\n  }\n\n  getMetricsList() {\n    const metrics = this.metricDescriptors.map(m => {\n      return {\n        service: m.service,\n        value: m.type,\n        serviceShortName: m.serviceShortName,\n        text: m.displayName,\n        title: m.description,\n      };\n    });\n\n    let result;\n    if (this.target.service === this.$scope.defaultServiceValue) {\n      result = metrics.map(m => ({ ...m, text: `${m.service} - ${m.text}` }));\n    } else {\n      result = metrics.filter(m => m.service === this.target.service);\n    }\n\n    if (result.find(m => m.value === this.target.metricType)) {\n      this.metricType = this.target.metricType;\n    } else if (result.length > 0) {\n      this.metricType = this.target.metricType = result[0].value;\n    }\n    return result;\n  }\n\n  async getLabels() {\n    this.loadLabelsPromise = new Promise(async resolve => {\n      try {\n        const data = await this.datasource.getLabels(this.target.metricType, this.target.refId);\n        this.metricLabels = data.results[this.target.refId].meta.metricLabels;\n        this.resourceLabels = data.results[this.target.refId].meta.resourceLabels;\n        resolve();\n      } catch (error) {\n        if (error.data && error.data.message) {\n          console.log(error.data.message);\n        } else {\n          console.log(error);\n        }\n        appEvents.emit('alert-error', ['Error', 'Error loading metric labels for ' + this.target.metricType]);\n        resolve();\n      }\n    });\n  }\n\n  onServiceChange() {\n    this.target.service = this.service;\n    this.metrics = this.getMetricsList();\n    this.setMetricType();\n    this.getLabels();\n    if (!this.metrics.find(m => m.value === this.target.metricType)) {\n      this.target.metricType = this.$scope.defaultDropdownValue;\n    } else {\n      this.$scope.refresh();\n    }\n  }\n\n  async onMetricTypeChange() {\n    this.setMetricType();\n    this.$scope.refresh();\n    this.getLabels();\n  }\n\n  setMetricType() {\n    this.target.metricType = this.metricType;\n    const { valueType, metricKind, unit } = this.metricDescriptors.find(m => m.type === this.target.metricType);\n    this.target.unit = unit;\n    this.target.valueType = valueType;\n    this.target.metricKind = metricKind;\n    this.$rootScope.$broadcast('metricTypeChanged');\n  }\n\n  async getGroupBys(segment, index, removeText?: string, removeUsed = true) {\n    await this.loadLabelsPromise;\n\n    const metricLabels = Object.keys(this.metricLabels || {})\n      .filter(ml => {\n        if (!removeUsed) {\n          return true;\n        }\n        return this.target.aggregation.groupBys.indexOf('metric.label.' + ml) === -1;\n      })\n      .map(l => {\n        return this.uiSegmentSrv.newSegment({\n          value: `metric.label.${l}`,\n          expandable: false,\n        });\n      });\n\n    const resourceLabels = Object.keys(this.resourceLabels || {})\n      .filter(ml => {\n        if (!removeUsed) {\n          return true;\n        }\n\n        return this.target.aggregation.groupBys.indexOf('resource.label.' + ml) === -1;\n      })\n      .map(l => {\n        return this.uiSegmentSrv.newSegment({\n          value: `resource.label.${l}`,\n          expandable: false,\n        });\n      });\n\n    const noValueOrPlusButton = !segment || segment.type === 'plus-button';\n    if (noValueOrPlusButton && metricLabels.length === 0 && resourceLabels.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    this.removeSegment.value = removeText || this.defaultRemoveGroupByValue;\n    return Promise.resolve([...metricLabels, ...resourceLabels, this.removeSegment]);\n  }\n\n  groupByChanged(segment, index) {\n    if (segment.value === this.removeSegment.value) {\n      this.groupBySegments.splice(index, 1);\n    } else {\n      segment.type = 'value';\n    }\n\n    const reducer = (memo, seg) => {\n      if (!seg.fake) {\n        memo.push(seg.value);\n      }\n      return memo;\n    };\n\n    this.target.aggregation.groupBys = this.groupBySegments.reduce(reducer, []);\n    this.ensurePlusButton(this.groupBySegments);\n    this.$rootScope.$broadcast('metricTypeChanged');\n    this.$scope.refresh();\n  }\n\n  async getFilters(segment, index) {\n    const hasNoFilterKeys = this.metricLabels && Object.keys(this.metricLabels).length === 0;\n    return this.filterSegments.getFilters(segment, index, hasNoFilterKeys);\n  }\n\n  getFilterValues(index) {\n    const filterKey = this.templateSrv.replace(this.filterSegments.filterSegments[index - 2].value);\n    if (!filterKey || !this.metricLabels || Object.keys(this.metricLabels).length === 0) {\n      return [];\n    }\n\n    const shortKey = filterKey.substring(filterKey.indexOf('.label.') + 7);\n\n    if (filterKey.startsWith('metric.label.') && this.metricLabels.hasOwnProperty(shortKey)) {\n      return this.metricLabels[shortKey];\n    }\n\n    if (filterKey.startsWith('resource.label.') && this.resourceLabels.hasOwnProperty(shortKey)) {\n      return this.resourceLabels[shortKey];\n    }\n\n    return [];\n  }\n\n  filterSegmentUpdated(segment, index) {\n    this.target.filters = this.filterSegments.filterSegmentUpdated(segment, index);\n    this.$scope.refresh();\n  }\n\n  ensurePlusButton(segments) {\n    const count = segments.length;\n    const lastSegment = segments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      segments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n}\n\nangular.module('grafana.controllers').directive('stackdriverFilter', StackdriverFilter);\nangular.module('grafana.controllers').controller('StackdriverFilterCtrl', StackdriverFilterCtrl);\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport './query_aggregation_ctrl';\nimport './query_filter_ctrl';\n\nexport interface QueryMeta {\n  alignmentPeriod: string;\n  rawQuery: string;\n  rawQueryString: string;\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n}\n\nexport class StackdriverQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  target: {\n    project: {\n      id: string;\n      name: string;\n    };\n    unit: string;\n    metricType: string;\n    service: string;\n    refId: string;\n    aggregation: {\n      crossSeriesReducer: string;\n      alignmentPeriod: string;\n      perSeriesAligner: string;\n      groupBys: string[];\n    };\n    filters: string[];\n    aliasBy: string;\n    metricKind: any;\n    valueType: any;\n  };\n\n  defaultDropdownValue = 'Select Metric';\n  defaultServiceValue = 'All Services';\n\n  defaults = {\n    project: {\n      id: 'default',\n      name: 'loading project...',\n    },\n    metricType: this.defaultDropdownValue,\n    service: this.defaultServiceValue,\n    metric: '',\n    unit: '',\n    aggregation: {\n      crossSeriesReducer: 'REDUCE_MEAN',\n      alignmentPeriod: 'stackdriver-auto',\n      perSeriesAligner: 'ALIGN_MEAN',\n      groupBys: [],\n    },\n    filters: [],\n    showAggregationOptions: false,\n    aliasBy: '',\n    metricKind: '',\n    valueType: '',\n  };\n\n  showHelp: boolean;\n  showLastQuery: boolean;\n  lastQueryMeta: QueryMeta;\n  lastQueryError?: string;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaultsDeep(this.target, this.defaults);\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryError = null;\n    this.lastQueryMeta = null;\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n      this.lastQueryMeta.rawQueryString = decodeURIComponent(this.lastQueryMeta.rawQuery);\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes && queryRes.error) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryMeta.rawQueryString = decodeURIComponent(this.lastQueryMeta.rawQuery);\n\n        let jsonBody;\n        try {\n          jsonBody = JSON.parse(queryRes.error);\n        } catch {\n          this.lastQueryError = queryRes.error;\n        }\n\n        this.lastQueryError = jsonBody.error.message;\n      }\n    }\n    console.error(err);\n  }\n}\n","export class StackdriverConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n\n  /** @ngInject */\n  constructor(datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n  }\n\n  save(jwt) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = {};\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import _ from 'lodash';\nimport './query_filter_ctrl';\n\nexport class StackdriverAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  datasource: any;\n\n  defaultDropdownValue = 'Select Metric';\n  defaultServiceValue = 'All Services';\n\n  defaults = {\n    project: {\n      id: 'default',\n      name: 'loading project...',\n    },\n    metricType: this.defaultDropdownValue,\n    service: this.defaultServiceValue,\n    metric: '',\n    filters: [],\n    metricKind: '',\n    valueType: '',\n  };\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.annotation.target.refId = 'annotationQuery';\n    _.defaultsDeep(this.annotation.target, this.defaults);\n  }\n}\n","import StackdriverDatasource from './datasource';\nimport { StackdriverQueryCtrl } from './query_ctrl';\nimport { StackdriverConfigCtrl } from './config_ctrl';\nimport { StackdriverAnnotationsQueryCtrl } from './annotations_query_ctrl';\n\nexport {\n  StackdriverDatasource as Datasource,\n  StackdriverQueryCtrl as QueryCtrl,\n  StackdriverConfigCtrl as ConfigCtrl,\n  StackdriverAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport Remarkable from 'remarkable';\n\nexport class TextPanelCtrl extends PanelCtrl {\n  static templateUrl = `public/app/plugins/panel/text/module.html`;\n  static scrollable = true;\n\n  remarkable: any;\n  content: string;\n  // Set and populate defaults\n  panelDefaults = {\n    mode: 'markdown', // 'html', 'markdown', 'text'\n    content: '# title',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $sce) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n\n    $scope.$watch(\n      'ctrl.panel.content',\n      _.throttle(() => {\n        this.render();\n      }, 1000)\n    );\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/app/plugins/panel/text/editor.html');\n    this.editorTabIndex = 1;\n\n    if (this.panel.mode === 'text') {\n      this.panel.mode = 'markdown';\n    }\n  }\n\n  onRefresh() {\n    this.render();\n  }\n\n  onRender() {\n    if (this.panel.mode === 'markdown') {\n      this.renderMarkdown(this.panel.content);\n    } else if (this.panel.mode === 'html') {\n      this.updateContent(this.panel.content);\n    }\n    this.renderingCompleted();\n  }\n\n  renderText(content) {\n    content = content\n      .replace(/&/g, '&amp;')\n      .replace(/>/g, '&gt;')\n      .replace(/</g, '&lt;')\n      .replace(/\\n/g, '<br/>');\n    this.updateContent(content);\n  }\n\n  renderMarkdown(content) {\n    if (!this.remarkable) {\n      this.remarkable = new Remarkable();\n    }\n\n    this.$scope.$applyAsync(() => {\n      this.updateContent(this.remarkable.render(content));\n    });\n  }\n\n  updateContent(html) {\n    try {\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n    } catch (e) {\n      console.log('Text panel error: ', e);\n      this.content = this.$sce.trustAsHtml(html);\n    }\n  }\n}\n\nexport { TextPanelCtrl as PanelCtrl };\n","import angular from 'angular';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function createAnnotationToolip(element, event, plot) {\n  const injector = angular.element(document).injector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    ($compile, $rootScope) => {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = () => {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', () => {\n        setTimeout(() => {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n}\n\nlet markerElementToAttachTo = null;\n\n/** @ngInject */\nexport function createEditPopover(element, event, plot) {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the inital marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(() => {\n    const injector = angular.element(document).injector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      ($compile, $rootScope) => {\n        const scope = $rootScope.$new(true);\n        let drop;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = () => {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', () => {\n          // need timeout here in order call drop.destroy\n          setTimeout(() => {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n}\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left: left, top: top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options, drawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events) {\n    const parts = _.partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a, b) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      // check event is inside the graph range\n      if (this._insidePlot(event.getOptions().min) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event\n          .visual()\n          .getObject()\n          .hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function(this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = () => {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      obj => {\n        obj.remove();\n      },\n      (obj, position) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width(),\n      line.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n    regionWidth = right - left;\n\n    _.each([left, right], position => {\n      const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: position + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      });\n      line.appendTo(container);\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: left + 'px',\n      top: top,\n      width: Math.round(regionWidth + lineWidth) + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function(this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = () => {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      obj => {\n        obj.remove();\n      },\n      (obj, position) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width(),\n      region.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot) {\n  /*jshint validthis:true */\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = () => {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = () => {\n    $.each(eventMarkers._events, (index, event) => {\n      event\n        .visual()\n        .getObject()\n        .hide();\n    });\n  };\n\n  plot.showEvents = () => {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = events => {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push((plot, options) => {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push(plot => {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import $ from 'jquery';\nimport { appEvents } from 'app/core/core';\n\nexport default function GraphTooltip(this: any, elem, dashboard, scope, getSeriesFn) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX, series, last) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX, series) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime, innerHtml, pos, xMode) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function(seriesList, pos) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      if (series.stack) {\n        if (panel.tooltip.value_type === 'individual') {\n          value = series.data[hoverIndex][1];\n        } else if (!series.stack) {\n          value = series.data[hoverIndex][1];\n        } else {\n          lastValue += series.data[hoverIndex][1];\n          value = lastValue;\n        }\n      } else {\n        value = series.data[hoverIndex][1];\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    appEvents.emit('graph-hover-clear');\n  });\n\n  elem.bind('plothover', (event, pos, item) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\n  });\n\n  elem.bind('plotclick', (event, pos, item) => {\n    appEvents.emit('graph-click', { pos: pos, panel: panel, item: item });\n  });\n\n  this.clear = plot => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos, item) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n      const isVisible =\n        pos.pageY >= $(window).scrollTop() && pos.pageY <= $(window).innerHeight() + $(window).scrollTop();\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\n    } else {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a, b) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a, b) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n\n        value = series.formatValue(hoverInfo.value);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml +=\n          '<i class=\"fa fa-minus\" style=\"color:' + hoverInfo.color + ';\"></i> ' + hoverInfo.label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group +=\n        '<i class=\"fa fa-minus\" style=\"color:' + item.series.color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = series.formatValue(value);\n\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup: boolean;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl) {}\n\n  getHandleHtml(handleIndex, model, valueStr) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY = null;\n    let posTop;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0), 10);\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      handleElem.off('mouseup', dragging);\n      handleElem.off('mouseleave', dragging);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(() => {\n        panelCtrl.render();\n        panelCtrl.events.emit('threshold-changed', {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    handleElem.on('mouseup', stopped);\n    handleElem.on('mouseleave', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex, defaultHandleTopPos) {\n    const model = this.thresholds[handleIndex];\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!_.isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem, data) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options, panel) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!_.isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        }\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\n/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes, level) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft, yRight) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\nfunction checkCorrectAxis(axis) {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes) {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft, yRight) {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft, yRight) {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft, yRight) {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft, yRight) {\n  let rateLeft, rateRight, rate;\n  if (checkTwoCross(yLeft, yRight)) {\n    rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n  } else {\n    if (checkOneSide(yLeft, yRight)) {\n      const absLeftMin = Math.abs(yLeft.min);\n      const absLeftMax = Math.abs(yLeft.max);\n      const absRightMin = Math.abs(yRight.min);\n      const absRightMax = Math.abs(yRight.max);\n      const upLeft = _.max([absLeftMin, absLeftMax]);\n      const downLeft = _.min([absLeftMin, absLeftMax]);\n      const upRight = _.max([absRightMin, absRightMax]);\n      const downRight = _.min([absRightMin, absRightMax]);\n\n      rateLeft = downLeft ? upLeft / downLeft : upLeft;\n      rateRight = downRight ? upRight / downRight : upRight;\n    } else {\n      if (yLeft.min > 0 || yRight.min > 0) {\n        rateLeft = yLeft.max / yRight.max;\n        rateRight = 0;\n      } else {\n        rateLeft = 0;\n        rateRight = yLeft.min / yRight.min;\n      }\n    }\n  }\n\n  rate = rateLeft > rateRight ? rateLeft : rateRight;\n\n  return rate;\n}\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const histogram = {};\n\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n  let bound = minBound;\n  let n = 0;\n  while (bound <= maxBound) {\n    histogram[bound] = 0;\n    bound = minBound + bucketSize * n;\n    n++;\n  }\n\n  for (let i = 0; i < values.length; i++) {\n    const bound = getBucketBound(values[i], bucketSize);\n    histogram[bound] = histogram[bound] + 1;\n  }\n\n  const histogamSeries = _.map(histogram, (count, bound) => {\n    return [Number(bound), count];\n  });\n\n  // Sort by Y axis values\n  return _.sortBy(histogamSeries, point => point[0]);\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map(series => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { appEvents, coreModule, updateLegendValues } from 'app/core/core';\nimport GraphTooltip from './graph_tooltip';\nimport { ThresholdManager } from './threshold_manager';\nimport { EventManager } from 'app/features/annotations/all';\nimport { convertToHistogramData } from './histogram';\nimport { alignYLevel } from './align_yaxes';\nimport config from 'app/core/config';\n\nimport { GraphCtrl } from './module';\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  tooltip: any;\n  dashboard: any;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries: any[];\n  data: any[];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n\n  constructor(private scope, private elem, private timeSrv) {\n    this.ctrl = scope.ctrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on('panel-teardown', this.onPanelteardown.bind(this));\n\n    /**\n     * Split graph rendering into two parts.\n     * First, calculate series stats in buildFlotPairs() function. Then legend rendering started\n     * (see ctrl.events.on('render') in legend.ts).\n     * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.\n     */\n    this.ctrl.events.on('render', this.onRender.bind(this));\n    this.ctrl.events.on('legend-rendering-complete', this.onLegendRenderingComplete.bind(this));\n\n    // global events\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), scope);\n\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n    scope.$on('$destroy', this.onScopeDestroy.bind(this));\n  }\n\n  onRender(renderData) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.elem.height();\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    this.ctrl.events.emit('render-legend');\n  }\n\n  onGraphHover(evt) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    // ignore if we are the emitter\n    if (!this.plot || evt.panel.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    this.tooltip.show(evt.pos);\n  }\n\n  onPanelteardown() {\n    this.thresholdManager = null;\n\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n  }\n\n  onLegendRenderingComplete() {\n    this.render_panel();\n  }\n\n  onGraphHoverClear(event, info) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event, ranges) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: moment.utc(ranges.xaxis.from),\n          to: moment.utc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  onPlotClick(event, pos, item) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if ((pos.ctrlKey || pos.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      const isRangeSelection = pos.x !== pos.x1;\n      if (!isRangeSelection) {\n        setTimeout(() => {\n          this.eventManager.updateTime({ from: pos.x, to: null });\n        }, 100);\n      }\n    }\n  }\n\n  onScopeDestroy() {\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    if (this.ctrl.dataWarning) {\n      $(`<div class=\"datapoints-warning flot-temp-elem\">${this.ctrl.dataWarning.title}</div>`).appendTo(this.elem);\n    }\n\n    this.thresholdManager.draw(plot);\n  }\n\n  processOffsetHook(plot, gridMargin) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  render_panel() {\n    this.panelWidth = this.elem.width();\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options, panel) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          const histMin = _.min(_.map(this.data, s => s.stats.min));\n          const histMax = _.max(_.map(this.data, s => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options, incrementRenderCounter) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n        delete this.ctrl.inspector;\n      }\n    } catch (e) {\n      console.log('flotcharts error', e);\n      this.ctrl.error = e.message || 'Render Error';\n      this.ctrl.renderError = true;\n      this.ctrl.inspector = { error: e };\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series, panel) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined;\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _.sortBy(series, s => s.stats[sortBy] * sortDesc);\n    } else {\n      return _.sortBy(series, s => s.zindex);\n    }\n  }\n\n  translateFillOption(fill) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options) {\n    const ticks = this.panelWidth / 100;\n    const min = _.isUndefined(this.ctrl.range.from) ? null : this.ctrl.range.from.valueOf();\n    const max = _.isUndefined(this.ctrl.range.to) ? null : this.ctrl.range.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: this.time_format(ticks, min, max),\n    };\n  }\n\n  addXSeriesAxis(options) {\n    const ticks = _.map(this.data, (series, index) => {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options, bucketSize) {\n    let ticks, min, max;\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tickValues = [];\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tickValues[point[0]] = true;\n        }\n      }\n      ticks = Object.keys(tickValues).map(v => Number(v));\n      min = _.min(ticks);\n      max = _.max(ticks);\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticksNum = Math.floor((max - min) / tickStep);\n      while (ticksNum > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticksNum = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil(max * 1.01 / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short');\n  }\n\n  addXTableAxis(options) {\n    let ticks = _.map(this.data, (series, seriesIndex) => {\n      return _.map(series.datapoints, (point, pointIndex) => {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    ticks = _.flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data, options) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (_.find(data, { yaxis: 2 })) {\n      const secondY = _.clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return _.toNumber(value);\n  }\n\n  applyLogScale(axis, data) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = v => {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = v => {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min, max, logBase) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(axis, format) {\n    axis.tickFormatter = (val, axis) => {\n      if (!kbn.valueFormats[format]) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n      return kbn.valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);\n    };\n  }\n\n  time_format(ticks, min, max) {\n    if (min && max && ticks) {\n      const range = max - min;\n      const secPerTick = range / ticks / 1000;\n      // Need have 10 milisecond margin on the day range\n      // As sometimes last 24 hour dashboard evaluates to more than 86400000\n      const oneDay = 86400010;\n      const oneYear = 31536000000;\n\n      if (secPerTick <= 45) {\n        return '%H:%M:%S';\n      }\n      if (secPerTick <= 7200 || range <= oneDay) {\n        return '%H:%M';\n      }\n      if (secPerTick <= 80000) {\n        return '%m/%d %H:%M';\n      }\n      if (secPerTick <= 2419200 || range <= oneYear) {\n        return '%m/%d';\n      }\n      return '%Y-%m';\n    }\n\n    return '%H:%M';\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv, popoverSrv, contextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope, elem) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nmodule.directive('graphLegend', (popoverSrv, $timeout) => {\n  return {\n    link: (scope, elem) => {\n      let firstRender = true;\n      const ctrl = scope.ctrl;\n      const panel = ctrl.panel;\n      let data;\n      let seriesList;\n      let i;\n      let legendScrollbar;\n      const legendRightDefaultWidth = 10;\n      const legendElem = elem.parent();\n\n      scope.$on('$destroy', () => {\n        destroyScrollbar();\n      });\n\n      ctrl.events.on('render-legend', () => {\n        data = ctrl.seriesList;\n        if (data) {\n          render();\n        }\n        ctrl.events.emit('legend-rendering-complete');\n      });\n\n      function getSeriesIndexForElement(el) {\n        return el.parents('[data-series-index]').data('series-index');\n      }\n\n      function openColorSelector(e) {\n        // if we clicked inside poup container ignore click\n        if ($(e.target).parents('.popover').length) {\n          return;\n        }\n\n        const el = $(e.currentTarget).find('.fa-minus');\n        const index = getSeriesIndexForElement(el);\n        const series = seriesList[index];\n\n        $timeout(() => {\n          popoverSrv.show({\n            element: el[0],\n            position: 'bottom left',\n            targetAttachment: 'top left',\n            template:\n              '<series-color-picker series=\"series\" onToggleAxis=\"toggleAxis\" onColorChange=\"colorSelected\">' +\n              '</series-color-picker>',\n            openOn: 'hover',\n            model: {\n              series: series,\n              toggleAxis: () => {\n                ctrl.toggleAxis(series);\n              },\n              colorSelected: color => {\n                ctrl.changeSeriesColor(series, color);\n              },\n            },\n          });\n        });\n      }\n\n      function toggleSeries(e) {\n        const el = $(e.currentTarget);\n        const index = getSeriesIndexForElement(el);\n        const seriesInfo = seriesList[index];\n        const scrollPosition = legendScrollbar.scroller.scrollTop;\n        ctrl.toggleSeries(seriesInfo, e);\n        legendScrollbar.scroller.scrollTop = scrollPosition;\n      }\n\n      function sortLegend(e) {\n        const el = $(e.currentTarget);\n        const stat = el.data('stat');\n\n        if (stat !== panel.legend.sort) {\n          panel.legend.sortDesc = null;\n        }\n\n        // if already sort ascending, disable sorting\n        if (panel.legend.sortDesc === false) {\n          panel.legend.sort = null;\n          panel.legend.sortDesc = null;\n          ctrl.render();\n          return;\n        }\n\n        panel.legend.sortDesc = !panel.legend.sortDesc;\n        panel.legend.sort = stat;\n        ctrl.render();\n      }\n\n      function getTableHeaderHtml(statName) {\n        if (!panel.legend[statName]) {\n          return '';\n        }\n        let html = '<th class=\"pointer\" data-stat=\"' + statName + '\">' + statName;\n\n        if (panel.legend.sort === statName) {\n          const cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';\n          html += ' <span class=\"' + cssClass + '\"></span>';\n        }\n\n        return html + '</th>';\n      }\n\n      function render() {\n        const legendWidth = legendElem.width();\n        if (!ctrl.panel.legend.show) {\n          elem.empty();\n          firstRender = true;\n          return;\n        }\n\n        if (firstRender) {\n          elem.on('click', '.graph-legend-icon', openColorSelector);\n          elem.on('click', '.graph-legend-alias', toggleSeries);\n          elem.on('click', 'th', sortLegend);\n          firstRender = false;\n        }\n\n        seriesList = data;\n\n        elem.empty();\n\n        // Set min-width if side style and there is a value, otherwise remove the CSS property\n        // Set width so it works with IE11\n        const width: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';\n        const ieWidth: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';\n        legendElem.css('min-width', width);\n        legendElem.css('width', ieWidth);\n\n        elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);\n\n        let tableHeaderElem;\n        if (panel.legend.alignAsTable) {\n          let header = '<tr>';\n          header += '<th colspan=\"2\" style=\"text-align:left\"></th>';\n          if (panel.legend.values) {\n            header += getTableHeaderHtml('min');\n            header += getTableHeaderHtml('max');\n            header += getTableHeaderHtml('avg');\n            header += getTableHeaderHtml('current');\n            header += getTableHeaderHtml('total');\n          }\n          header += '</tr>';\n          tableHeaderElem = $(header);\n        }\n\n        if (panel.legend.sort) {\n          seriesList = _.sortBy(seriesList, series => {\n            let sort = series.stats[panel.legend.sort];\n            if (sort === null) {\n              sort = -Infinity;\n            }\n            return sort;\n          });\n          if (panel.legend.sortDesc) {\n            seriesList = seriesList.reverse();\n          }\n        }\n\n        // render first time for getting proper legend height\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          renderLegendElement(tableHeaderElem);\n          elem.empty();\n        }\n\n        renderLegendElement(tableHeaderElem);\n      }\n\n      function renderSeriesLegendElements() {\n        const seriesElements = [];\n        for (i = 0; i < seriesList.length; i++) {\n          const series = seriesList[i];\n\n          if (series.hideFromLegend(panel.legend)) {\n            continue;\n          }\n\n          let html = '<div class=\"graph-legend-series';\n\n          if (series.yaxis === 2) {\n            html += ' graph-legend-series--right-y';\n          }\n          if (ctrl.hiddenSeries[series.alias]) {\n            html += ' graph-legend-series-hidden';\n          }\n          html += '\" data-series-index=\"' + i + '\">';\n          html += '<div class=\"graph-legend-icon\">';\n          html += '<i class=\"fa fa-minus pointer\" style=\"color:' + series.color + '\"></i>';\n          html += '</div>';\n\n          html +=\n            '<a class=\"graph-legend-alias pointer\" title=\"' + series.aliasEscaped + '\">' + series.aliasEscaped + '</a>';\n\n          if (panel.legend.values) {\n            const avg = series.formatValue(series.stats.avg);\n            const current = series.formatValue(series.stats.current);\n            const min = series.formatValue(series.stats.min);\n            const max = series.formatValue(series.stats.max);\n            const total = series.formatValue(series.stats.total);\n\n            if (panel.legend.min) {\n              html += '<div class=\"graph-legend-value min\">' + min + '</div>';\n            }\n            if (panel.legend.max) {\n              html += '<div class=\"graph-legend-value max\">' + max + '</div>';\n            }\n            if (panel.legend.avg) {\n              html += '<div class=\"graph-legend-value avg\">' + avg + '</div>';\n            }\n            if (panel.legend.current) {\n              html += '<div class=\"graph-legend-value current\">' + current + '</div>';\n            }\n            if (panel.legend.total) {\n              html += '<div class=\"graph-legend-value total\">' + total + '</div>';\n            }\n          }\n\n          html += '</div>';\n          seriesElements.push($(html));\n        }\n        return seriesElements;\n      }\n\n      function renderLegendElement(tableHeaderElem) {\n        const legendWidth = elem.width();\n\n        const seriesElements = renderSeriesLegendElements();\n\n        if (panel.legend.alignAsTable) {\n          const tbodyElem = $('<tbody></tbody>');\n          tbodyElem.append(tableHeaderElem);\n          tbodyElem.append(seriesElements);\n          elem.append(tbodyElem);\n          tbodyElem.wrap('<div class=\"graph-legend-scroll\"></div>');\n        } else {\n          elem.append('<div class=\"graph-legend-scroll\"></div>');\n          elem.find('.graph-legend-scroll').append(seriesElements);\n        }\n\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          addScrollbar();\n        } else {\n          destroyScrollbar();\n        }\n      }\n\n      function addScrollbar() {\n        const scrollRootClass = 'baron baron__root';\n        const scrollerClass = 'baron__scroller';\n        const scrollBarHTML = `\n          <div class=\"baron__track\">\n            <div class=\"baron__bar\"></div>\n          </div>\n        `;\n\n        const scrollRoot = elem;\n        const scroller = elem.find('.graph-legend-scroll');\n\n        // clear existing scroll bar track to prevent duplication\n        scrollRoot.find('.baron__track').remove();\n\n        scrollRoot.addClass(scrollRootClass);\n        $(scrollBarHTML).appendTo(scrollRoot);\n        scroller.addClass(scrollerClass);\n\n        const scrollbarParams = {\n          root: scrollRoot[0],\n          scroller: scroller[0],\n          bar: '.baron__bar',\n          track: '.baron__track',\n          barOnCls: '_scrollbar',\n          scrollingCls: '_scrolling',\n        };\n\n        if (!legendScrollbar) {\n          legendScrollbar = baron(scrollbarParams);\n        } else {\n          destroyScrollbar();\n          legendScrollbar = baron(scrollbarParams);\n        }\n\n        // #11830 - compensates for Firefox scrollbar calculation error in the baron framework\n        scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';\n\n        legendScrollbar.scroll();\n      }\n\n      function destroyScrollbar() {\n        if (legendScrollbar) {\n          legendScrollbar.dispose();\n          legendScrollbar = undefined;\n        }\n      }\n    },\n  };\n});\n","import _ from 'lodash';\nimport angular from 'angular';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope, $element, popoverSrv) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n\n  $scope.addOverrideOption = (name, propertyName, values) => {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.lenght,\n      values: values,\n      submenu: _.map(values, value => {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = (item, subItem) => {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = color => {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.openColorSelector = color => {\n    const fakeSeries = { color: color };\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker series=\"series\" onColorChange=\"colorSelected\" />',\n      model: {\n        autoClose: true,\n        colorSelected: $scope.colorSelected,\n        series: fakeSeries,\n      },\n      onClose: () => {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = option => {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = () => {\n    return _.map($scope.ctrl.seriesList, series => {\n      return series.alias;\n    });\n  };\n\n  $scope.updateCurrentOverrides = () => {\n    $scope.currentOverrides = [];\n    _.each($scope.overrideMenu, option => {\n      const value = $scope.override[option.propertyName];\n      if (_.isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('Bars', 'bars', [true, false]);\n  $scope.addOverrideOption('Lines', 'lines', [true, false]);\n  $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('Dashes', 'dashes', [true, false]);\n  $scope.addOverrideOption('Dash Length', 'dashLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('Dash Space', 'spaceLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('Points', 'points', [true, false]);\n  $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('Color', 'color', ['change']);\n  $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('Transform', 'transform', ['negative-Y']);\n  $scope.addOverrideOption('Legend', 'legend', [true, false]);\n  $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\nangular.module('grafana.controllers').controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled: boolean;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = $scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\nconst template = `\n<div class=\"gf-form-group\">\n  <h5>Thresholds</h5>\n  <p class=\"muted\" ng-show=\"ctrl.disabled\">\n    Visual thresholds options <strong>disabled.</strong>\n    Visit the Alert tab update your thresholds. <br>\n    To re-enable thresholds, the alert rule must be deleted from this panel.\n  </p>\n  <div ng-class=\"{'thresholds-form-disabled': ctrl.disabled}\">\n    <div class=\"gf-form-inline\" ng-repeat=\"threshold in ctrl.panel.thresholds\">\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">T{{$index+1}}</label>\n      </div>\n\n      <div class=\"gf-form\">\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.op\"\n                  ng-options=\"f for f in ['gt', 'lt']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></select>\n        </div>\n        <input type=\"number\" ng-model=\"threshold.value\" class=\"gf-form-input width-8\"\n               ng-change=\"ctrl.render()\" placeholder=\"value\" ng-disabled=\"ctrl.disabled\">\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Color</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.colorMode\"\n                  ng-options=\"f for f in ['custom', 'critical', 'warning', 'ok']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Fill\" checked=\"threshold.fill\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.fill && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">Fill color</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.fillColor\" onChange=\"ctrl.onFillColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Line\" checked=\"threshold.line\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.line && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">Line color</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.lineColor\" onChange=\"ctrl.onLineColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Y-Axis</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.yaxis\"\n                  ng-init=\"threshold.yaxis = threshold.yaxis === 'left' || threshold.yaxis === 'right' ? threshold.yaxis : 'left'\"\n                  ng-options=\"f for f in ['left', 'right']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">\n          <a class=\"pointer\" ng-click=\"ctrl.removeThreshold($index)\" ng-disabled=\"ctrl.disabled\">\n            <i class=\"fa fa-trash\"></i>\n          </a>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row\">\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.addThreshold()\" ng-disabled=\"ctrl.disabled\">\n        <i class=\"fa fa-plus\"></i>&nbsp;Add Threshold\n      </button>\n    </div>\n  </div>\n</div>\n`;\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n</div>\n`;\n\nexport default template;\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport colors from 'app/core/utils/colors';\n\nexport class DataProcessor {\n  constructor(private panel) {}\n\n  getSeriesList(options) {\n    if (!options.dataList || options.dataList.length === 0) {\n      return [];\n    }\n\n    // auto detect xaxis mode\n    let firstItem;\n    if (options.dataList && options.dataList.length > 0) {\n      firstItem = options.dataList[0];\n      const autoDetectMode = this.getAutoDetectXAxisMode(firstItem);\n      if (this.panel.xaxis.mode !== autoDetectMode) {\n        this.panel.xaxis.mode = autoDetectMode;\n        this.setPanelDefaultsForNewXAxisMode();\n      }\n    }\n\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n      case 'time': {\n        return options.dataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'histogram': {\n        let histogramDataList;\n        if (this.panel.stack) {\n          histogramDataList = options.dataList;\n        } else {\n          histogramDataList = [\n            {\n              target: 'count',\n              datapoints: _.concat([], _.flatten(_.map(options.dataList, 'datapoints'))),\n            },\n          ];\n        }\n        return histogramDataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'field': {\n        return this.customHandler(firstItem);\n      }\n    }\n  }\n\n  getAutoDetectXAxisMode(firstItem) {\n    switch (firstItem.type) {\n      case 'docs':\n        return 'field';\n      case 'table':\n        return 'field';\n      default: {\n        if (this.panel.xaxis.mode === 'series') {\n          return 'series';\n        }\n        if (this.panel.xaxis.mode === 'histogram') {\n          return 'histogram';\n        }\n        return 'time';\n      }\n    }\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        this.panel.bars = false;\n        this.panel.lines = true;\n        this.panel.points = false;\n        this.panel.legend.show = true;\n        this.panel.tooltip.shared = true;\n        this.panel.xaxis.values = [];\n        break;\n      }\n      case 'series': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        this.panel.xaxis.values = ['total'];\n        break;\n      }\n      case 'histogram': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        break;\n      }\n    }\n  }\n\n  timeSeriesHandler(seriesData, index, options) {\n    const datapoints = seriesData.datapoints || [];\n    const alias = seriesData.target;\n\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    const series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias,\n      color: color,\n      unit: seriesData.unit,\n    });\n\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = options.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  customHandler(dataItem) {\n    const nameField = this.panel.xaxis.name;\n    if (!nameField) {\n      throw {\n        message: 'No field name specified to use for x-axis, check your axes settings',\n      };\n    }\n    return [];\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        if (this.panel.xaxis.values.length === 0) {\n          this.panel.xaxis.values = ['total'];\n          return;\n        }\n\n        const validOptions = this.getXAxisValueOptions({});\n        const found = _.find(validOptions, { value: this.panel.xaxis.values[0] });\n        if (!found) {\n          this.panel.xaxis.values = ['total'];\n        }\n        return;\n      }\n    }\n  }\n\n  getDataFieldNames(dataList, onlyNumbers) {\n    if (dataList.length === 0) {\n      return [];\n    }\n\n    const fields = [];\n    const firstItem = dataList[0];\n    const fieldParts = [];\n\n    function getPropertiesRecursive(obj) {\n      _.forEach(obj, (value, key) => {\n        if (_.isObject(value)) {\n          fieldParts.push(key);\n          getPropertiesRecursive(value);\n        } else {\n          if (!onlyNumbers || _.isNumber(value)) {\n            const field = fieldParts.concat(key).join('.');\n            fields.push(field);\n          }\n        }\n      });\n      fieldParts.pop();\n    }\n\n    if (firstItem.type === 'docs') {\n      if (firstItem.datapoints.length === 0) {\n        return [];\n      }\n      getPropertiesRecursive(firstItem.datapoints[0]);\n    }\n\n    return fields;\n  }\n\n  getXAxisValueOptions(options) {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        return [\n          { text: 'Avg', value: 'avg' },\n          { text: 'Min', value: 'min' },\n          { text: 'Max', value: 'max' },\n          { text: 'Total', value: 'total' },\n          { text: 'Count', value: 'count' },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  pluckDeep(obj: any, property: string) {\n    const propertyParts = property.split('.');\n    let value = obj;\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n    return value;\n  }\n}\n","import './graph';\nimport './legend';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\n\nimport template from './template';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { MetricsPanelCtrl, alertTab } from 'app/plugins/sdk';\nimport { DataProcessor } from './data_processor';\nimport { axesEditorComponent } from './axes_editor';\n\nclass GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError: boolean;\n  hiddenSeries: any = {};\n  seriesList: any = [];\n  dataList: any = [];\n  annotations: any = [];\n  alertState: any;\n\n  annotationsPromise: any;\n  dataWarning: any;\n  colors: any = [];\n  subTabIndex: number;\n  processor: DataProcessor;\n\n  panelDefaults = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 5,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private annotationsSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n    _.defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    _.defaults(this.panel.legend, this.panelDefaults.legend);\n    _.defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n\n    this.processor = new DataProcessor(this.panel);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditorComponent, 2);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 3);\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html', 4);\n\n    if (config.alertingEnabled) {\n      this.addEditorTab('Alert', alertTab, 5);\n    }\n\n    this.subTabIndex = 0;\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()' });\n  }\n\n  issueQueries(datasource) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    return super.issueQueries(datasource);\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    this.onDataReceived(snapshotData);\n  }\n\n  onDataError(err) {\n    this.seriesList = [];\n    this.annotations = [];\n    this.render([]);\n  }\n\n  onDataReceived(dataList) {\n    this.dataList = dataList;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = null;\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.seriesList) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n\n    this.annotationsPromise.then(\n      result => {\n        this.loading = false;\n        this.alertState = result.alertState;\n        this.annotations = result.annotations;\n        this.render(this.seriesList);\n      },\n      () => {\n        this.loading = false;\n        this.render(this.seriesList);\n      }\n    );\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n    }\n  }\n\n  changeSeriesColor(series, color) {\n    series.setColor(color);\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  toggleSeries(serie, event) {\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (this.hiddenSeries[serie.alias]) {\n        delete this.hiddenSeries[serie.alias];\n      } else {\n        this.hiddenSeries[serie.alias] = true;\n      }\n    } else {\n      this.toggleSeriesExclusiveMode(serie);\n    }\n    this.render();\n  }\n\n  toggleSeriesExclusiveMode(serie) {\n    const hidden = this.hiddenSeries;\n\n    if (hidden[serie.alias]) {\n      delete hidden[serie.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = _.every(this.seriesList, value => {\n      if (value.alias === serie.alias) {\n        return true;\n      }\n\n      return hidden[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      _.each(this.seriesList, value => {\n        delete this.hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      _.each(this.seriesList, value => {\n        if (value.alias === serie.alias) {\n          return;\n        }\n\n        this.hiddenSeries[value.alias] = true;\n      });\n    }\n  }\n\n  toggleAxis(info) {\n    let override = _.find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\n    this.render();\n  }\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.refresh();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.seriesList = this.seriesList;\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal data=\"seriesList\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n}\n\nexport { GraphCtrl, GraphCtrl as PanelCtrl };\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n\n  /** @ngInject */\n  constructor(private $scope, private $q) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n  }\n\n  setUnitFormat(axis, subItem) {\n    axis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  getDataFieldNames(onlyNumbers) {\n    const props = this.panelCtrl.processor.getDataFieldNames(this.panelCtrl.dataList, onlyNumbers);\n    const items = props.map(prop => {\n      return { text: prop, value: prop };\n    });\n\n    return this.$q.when(items);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nclass DashListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  groups: any[];\n  modes: any[];\n\n  panelDefaults = {\n    query: '',\n    limit: 10,\n    tags: [],\n    recent: false,\n    search: false,\n    starred: true,\n    headings: true,\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, private dashboardSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    if (this.panel.tag) {\n      this.panel.tags = [this.panel.tag];\n      delete this.panel.tag;\n    }\n\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.groups = [\n      { list: [], show: false, header: 'Starred dashboards' },\n      { list: [], show: false, header: 'Recently viewed dashboards' },\n      { list: [], show: false, header: 'Search' },\n    ];\n\n    // update capability\n    if (this.panel.mode) {\n      if (this.panel.mode === 'starred') {\n        this.panel.starred = true;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'recently viewed') {\n        this.panel.recent = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'search') {\n        this.panel.search = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      delete this.panel.mode;\n    }\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.modes = ['starred', 'search', 'recently viewed'];\n    this.addEditorTab('Options', 'public/app/plugins/panel/dashlist/editor.html');\n  }\n\n  onRefresh() {\n    const promises = [];\n\n    promises.push(this.getRecentDashboards());\n    promises.push(this.getStarred());\n    promises.push(this.getSearch());\n\n    return Promise.all(promises).then(this.renderingCompleted.bind(this));\n  }\n\n  getSearch() {\n    this.groups[2].show = this.panel.search;\n    if (!this.panel.search) {\n      return Promise.resolve();\n    }\n\n    const params = {\n      limit: this.panel.limit,\n      query: this.panel.query,\n      tag: this.panel.tags,\n      folderIds: this.panel.folderId,\n      type: 'dash-db',\n    };\n\n    return this.backendSrv.search(params).then(result => {\n      this.groups[2].list = result;\n    });\n  }\n\n  getStarred() {\n    this.groups[0].show = this.panel.starred;\n    if (!this.panel.starred) {\n      return Promise.resolve();\n    }\n\n    const params = { limit: this.panel.limit, starred: 'true' };\n    return this.backendSrv.search(params).then(result => {\n      this.groups[0].list = result;\n    });\n  }\n\n  starDashboard(dash, evt) {\n    this.dashboardSrv.starDashboard(dash.id, dash.isStarred).then(newState => {\n      dash.isStarred = newState;\n    });\n\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getRecentDashboards() {\n    this.groups[1].show = this.panel.recent;\n    if (!this.panel.recent) {\n      return Promise.resolve();\n    }\n\n    const dashIds = _.take(impressionSrv.getDashboardOpened(), this.panel.limit);\n    return this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then(result => {\n      this.groups[1].list = dashIds\n        .map(orderId => {\n          return _.find(result, dashboard => {\n            return dashboard.id === orderId;\n          });\n        })\n        .filter(el => {\n          return el !== undefined;\n        });\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n}\n\nexport { DashListCtrl, DashListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport { PanelCtrl } from '../../../features/panel/panel_ctrl';\n\nclass PluginListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  pluginList: any[];\n  viewModel: any;\n\n  // Set and populate defaults\n  panelDefaults = {};\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.pluginList = [];\n    this.viewModel = [\n      { header: 'Installed Apps', list: [], type: 'app' },\n      { header: 'Installed Panels', list: [], type: 'panel' },\n      { header: 'Installed Datasources', list: [], type: 'datasource' },\n    ];\n\n    this.update();\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.addEditorTab('Options', 'public/app/plugins/panel/pluginlist/editor.html');\n  }\n\n  gotoPlugin(plugin, evt) {\n    if (evt) {\n      evt.stopPropagation();\n    }\n    this.$location.url(`plugins/${plugin.id}/edit`);\n  }\n\n  updateAvailable(plugin, $event) {\n    $event.stopPropagation();\n    $event.preventDefault();\n\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = plugin;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  update() {\n    this.backendSrv.get('api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n      this.pluginList = plugins;\n      this.viewModel[0].list = _.filter(plugins, { type: 'app' });\n      this.viewModel[1].list = _.filter(plugins, { type: 'panel' });\n      this.viewModel[2].list = _.filter(plugins, { type: 'datasource' });\n\n      for (const plugin of this.pluginList) {\n        if (plugin.hasUpdate) {\n          plugin.state = 'has-update';\n        } else if (!plugin.enabled) {\n          plugin.state = 'not-enabled';\n        }\n      }\n    });\n  }\n}\n\nexport { PluginListCtrl, PluginListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport moment from 'moment';\nimport alertDef from '../../../features/alerting/state/alertDef';\nimport { PanelCtrl } from 'app/plugins/sdk';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nclass AlertListPanel extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  showOptions = [{ text: 'Current state', value: 'current' }, { text: 'Recent state changes', value: 'changes' }];\n\n  sortOrderOptions = [\n    { text: 'Alphabetical (asc)', value: 1 },\n    { text: 'Alphabetical (desc)', value: 2 },\n    { text: 'Importance', value: 3 },\n  ];\n\n  stateFilter: any = {};\n  currentAlerts: any = [];\n  alertHistory: any = [];\n  noAlertsMessage: string;\n\n  // Set and populate defaults\n  panelDefaults = {\n    show: 'current',\n    limit: 10,\n    stateFilter: [],\n    onlyAlertsOnDashboard: false,\n    sortOrder: 1,\n    dashboardFilter: '',\n    nameFilter: '',\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n\n    for (const key in this.panel.stateFilter) {\n      this.stateFilter[this.panel.stateFilter[key]] = true;\n    }\n  }\n\n  sortResult(alerts) {\n    if (this.panel.sortOrder === 3) {\n      return _.sortBy(alerts, a => {\n        return alertDef.alertStateSortScore[a.state];\n      });\n    }\n\n    const result = _.sortBy(alerts, a => {\n      return a.name.toLowerCase();\n    });\n    if (this.panel.sortOrder === 2) {\n      result.reverse();\n    }\n\n    return result;\n  }\n\n  updateStateFilter() {\n    const result = [];\n\n    for (const key in this.stateFilter) {\n      if (this.stateFilter[key]) {\n        result.push(key);\n      }\n    }\n\n    this.panel.stateFilter = result;\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    let getAlertsPromise;\n\n    if (this.panel.show === 'current') {\n      getAlertsPromise = this.getCurrentAlertState();\n    }\n\n    if (this.panel.show === 'changes') {\n      getAlertsPromise = this.getStateChanges();\n    }\n\n    getAlertsPromise.then(() => {\n      this.renderingCompleted();\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n\n  getStateChanges() {\n    const params: any = {\n      limit: this.panel.limit,\n      type: 'alert',\n      newState: this.panel.stateFilter,\n    };\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    params.from = dateMath.parse(this.dashboard.time.from).unix() * 1000;\n    params.to = dateMath.parse(this.dashboard.time.to).unix() * 1000;\n\n    return this.backendSrv.get(`/api/annotations`, params).then(res => {\n      this.alertHistory = _.map(res, al => {\n        al.time = this.dashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss');\n        al.stateModel = alertDef.getStateDisplayModel(al.newState);\n        al.info = alertDef.getAlertAnnotationInfo(al);\n        return al;\n      });\n\n      this.noAlertsMessage = this.alertHistory.length === 0 ? 'No alerts in current time range' : '';\n\n      return this.alertHistory;\n    });\n  }\n\n  getCurrentAlertState() {\n    const params: any = {\n      state: this.panel.stateFilter,\n    };\n\n    if (this.panel.nameFilter) {\n      params.query = this.panel.nameFilter;\n    }\n\n    if (this.panel.folderId >= 0) {\n      params.folderId = this.panel.folderId;\n    }\n\n    if (this.panel.dashboardFilter) {\n      params.dashboardQuery = this.panel.dashboardFilter;\n    }\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    if (this.panel.dashboardTags) {\n      params.dashboardTag = this.panel.dashboardTags;\n    }\n\n    return this.backendSrv.get(`/api/alerts`, params).then(res => {\n      this.currentAlerts = this.sortResult(\n        _.map(res, al => {\n          al.stateModel = alertDef.getStateDisplayModel(al.state);\n          al.newStateDateAgo = moment(al.newStateDate)\n            .locale('en')\n            .fromNow(true);\n          return al;\n        })\n      );\n      if (this.currentAlerts.length > this.panel.limit) {\n        this.currentAlerts = this.currentAlerts.slice(0, this.panel.limit);\n      }\n      this.noAlertsMessage = this.currentAlerts.length === 0 ? 'No alerts' : '';\n\n      return this.currentAlerts;\n    });\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/app/plugins/panel/alertlist/editor.html');\n  }\n}\n\nexport { AlertListPanel, AlertListPanel as PanelCtrl };\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\n\nexport function getColorScale(colorScheme: any, lightTheme: boolean, maxValue: number, minValue = 0): (d: any) => any {\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\n\n  const start = colorScaleInverted ? maxValue : minValue;\n  const end = colorScaleInverted ? minValue : maxValue;\n\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\n}\n\nexport function getOpacityScale(options, maxValue, minValue = 0) {\n  let legendOpacityScale;\n  if (options.colorScale === 'linear') {\n    legendOpacityScale = d3\n      .scaleLinear()\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  } else if (options.colorScale === 'sqrt') {\n    legendOpacityScale = d3\n      .scalePow()\n      .exponent(options.exponent)\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  }\n  return legendOpacityScale;\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as d3 from 'd3';\nimport { contextSrv } from 'app/core/core';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst module = angular.module('grafana.directives');\n\nconst LEGEND_HEIGHT_PX = 6;\nconst LEGEND_WIDTH_PX = 100;\nconst LEGEND_TICK_SIZE = 0;\nconst LEGEND_VALUE_MARGIN = 0;\n\n/**\n * Color legend for heatmap editor.\n */\nmodule.directive('colorLegend', () => {\n  return {\n    restrict: 'E',\n    template: '<div class=\"heatmap-color-legend\"><svg width=\"16.5rem\" height=\"24px\"></svg></div>',\n    link: (scope, elem, attrs) => {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n\n      ctrl.events.on('render', () => {\n        render();\n      });\n\n      function render() {\n        const legendElem = $(elem).find('svg');\n        const legendWidth = Math.floor(legendElem.outerWidth());\n\n        if (panel.color.mode === 'spectrum') {\n          const colorScheme = _.find(ctrl.colorSchemes, {\n            value: panel.color.colorScheme,\n          });\n          const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, legendWidth);\n          drawSimpleColorLegend(elem, colorScale);\n        } else if (panel.color.mode === 'opacity') {\n          const colorOptions = panel.color;\n          drawSimpleOpacityLegend(elem, colorOptions);\n        }\n      }\n    },\n  };\n});\n\n/**\n * Heatmap legend with scale values.\n */\nmodule.directive('heatmapLegend', () => {\n  return {\n    restrict: 'E',\n    template: `<div class=\"heatmap-color-legend\"><svg width=\"${LEGEND_WIDTH_PX}px\" height=\"${LEGEND_HEIGHT_PX}px\"></svg></div>`,\n    link: (scope, elem, attrs) => {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n      ctrl.events.on('render', () => {\n        render();\n      });\n\n      function render() {\n        clearLegend(elem);\n        if (!_.isEmpty(ctrl.data) && !_.isEmpty(ctrl.data.cards)) {\n          const rangeFrom = 0;\n          const rangeTo = ctrl.data.cardStats.max;\n          const maxValue = panel.color.max || rangeTo;\n          const minValue = panel.color.min || 0;\n\n          if (panel.color.mode === 'spectrum') {\n            const colorScheme = _.find(ctrl.colorSchemes, {\n              value: panel.color.colorScheme,\n            });\n            drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);\n          } else if (panel.color.mode === 'opacity') {\n            const colorOptions = panel.color;\n            drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);\n          }\n        }\n      }\n    },\n  };\n});\n\nfunction drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-color-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', d => colorScale(d));\n\n  drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const opacityScale = getOpacityScale(options, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-opacity-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor)\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', options.cardColor)\n    .style('opacity', d => opacityScale(d));\n\n  drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n\n  if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {\n    return;\n  }\n\n  const legendValueScale = d3\n    .scaleLinear()\n    .domain([0, rangeTo])\n    .range([0, legendWidth]);\n\n  const ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);\n  const xAxis = d3\n    .axisBottom(legendValueScale)\n    .tickValues(ticks)\n    .tickSize(LEGEND_TICK_SIZE);\n\n  const colorRect = legendElem.find(':first-child');\n  const posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;\n  const posX = getSvgElemX(colorRect);\n\n  d3\n    .select(legendElem.get(0))\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + posX + ',' + posY + ')')\n    .call(xAxis);\n\n  legend\n    .select('.axis')\n    .select('.domain')\n    .remove();\n}\n\nfunction drawSimpleColorLegend(elem, colorScale) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    const valuesNumber = Math.floor(legendWidth / 2);\n    const rangeStep = Math.floor(legendWidth / valuesNumber);\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n\n    const legend = d3.select(legendElem.get(0));\n    const legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', d => colorScale(d));\n  }\n}\n\nfunction drawSimpleOpacityLegend(elem, options) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legend = d3.select(legendElem.get(0));\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    let legendOpacityScale;\n    if (options.colorScale === 'linear') {\n      legendOpacityScale = d3\n        .scaleLinear()\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    } else if (options.colorScale === 'sqrt') {\n      legendOpacityScale = d3\n        .scalePow()\n        .exponent(options.exponent)\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    }\n\n    const rangeStep = 10;\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n    const legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep)\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', options.cardColor)\n      .style('opacity', d => legendOpacityScale(d));\n  }\n}\n\nfunction clearLegend(elem) {\n  const legendElem = $(elem).find('svg');\n  legendElem.empty();\n}\n\nfunction getSvgElemX(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.x && svgElem.x.baseVal) {\n    return svgElem.x.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction getSvgElemHeight(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.height && svgElem.height.baseVal) {\n    return svgElem.height.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {\n  const range = rangeTo - rangeFrom;\n  const tickStepSize = tickStep(rangeFrom, rangeTo, 3);\n  const ticksNum = Math.round(range / tickStepSize);\n  let ticks = [];\n\n  for (let i = 0; i < ticksNum; i++) {\n    const current = tickStepSize * i;\n    // Add user-defined min and max if it had been set\n    if (isValueCloseTo(minValue, current, tickStepSize)) {\n      ticks.push(minValue);\n      continue;\n    } else if (minValue < current) {\n      ticks.push(minValue);\n    }\n    if (isValueCloseTo(maxValue, current, tickStepSize)) {\n      ticks.push(maxValue);\n      continue;\n    } else if (maxValue < current) {\n      ticks.push(maxValue);\n    }\n    ticks.push(tickStepSize * i);\n  }\n  if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {\n    ticks.push(maxValue);\n  }\n  ticks.push(rangeTo);\n  ticks = _.sortBy(_.uniq(ticks));\n  return ticks;\n}\n\nfunction isValueCloseTo(val, valueTo, step) {\n  const diff = Math.abs(val - valueTo);\n  return diff < step * 0.3;\n}\n","export class HeatmapDisplayEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function heatmapDisplayEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/display_editor.html',\n    controller: HeatmapDisplayEditorCtrl,\n  };\n}\n","import _ from 'lodash';\n\nconst VALUE_INDEX = 0;\nconst TIME_INDEX = 1;\n\ninterface XBucket {\n  x: number;\n  buckets: any;\n}\n\ninterface YBucket {\n  y: number;\n  values: number[];\n}\n\n/**\n * Convert histogram represented by the list of series to heatmap object.\n * @param seriesList List of time series\n */\nfunction histogramToHeatmap(seriesList) {\n  const heatmap = {};\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const series = seriesList[i];\n    const bound = i;\n    if (isNaN(bound)) {\n      return heatmap;\n    }\n\n    for (const point of series.datapoints) {\n      const count = point[VALUE_INDEX];\n      const time = point[TIME_INDEX];\n\n      if (!_.isNumber(count)) {\n        continue;\n      }\n\n      let bucket = heatmap[time];\n      if (!bucket) {\n        bucket = heatmap[time] = { x: time, buckets: {} };\n      }\n\n      bucket.buckets[bound] = {\n        y: bound,\n        count: count,\n        bounds: {\n          top: null,\n          bottom: bound,\n        },\n        values: [],\n        points: [],\n      };\n    }\n  }\n\n  return heatmap;\n}\n\n/**\n * Sort series representing histogram by label value.\n */\nfunction sortSeriesByLabel(s1, s2) {\n  let label1, label2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    label1 = parseHistogramLabel(s1.label);\n    label2 = parseHistogramLabel(s2.label);\n  } catch (err) {\n    console.log(err.message || err);\n    return 0;\n  }\n\n  if (label1 > label2) {\n    return 1;\n  }\n\n  if (label1 < label2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(label: string): number {\n  if (label === '+Inf' || label === 'inf') {\n    return +Infinity;\n  }\n  const value = Number(label);\n  if (isNaN(value)) {\n    throw new Error(`Error parsing histogram label: ${label} is not a number`);\n  }\n  return value;\n}\n\n/**\n * Convert buckets into linear array of \"cards\" - objects, represented heatmap elements.\n * @param  {Object} buckets\n * @return {Array}          Array of \"card\" objects\n */\nfunction convertToCards(buckets) {\n  let min = 0,\n    max = 0;\n  const cards = [];\n  _.forEach(buckets, xBucket => {\n    _.forEach(xBucket.buckets, yBucket => {\n      const card = {\n        x: xBucket.x,\n        y: yBucket.y,\n        yBounds: yBucket.bounds,\n        values: yBucket.values,\n        count: yBucket.count,\n      };\n      cards.push(card);\n\n      if (cards.length === 1) {\n        min = yBucket.count;\n        max = yBucket.count;\n      }\n\n      min = yBucket.count < min ? yBucket.count : min;\n      max = yBucket.count > max ? yBucket.count : max;\n    });\n  });\n\n  const cardStats = { min, max };\n  return { cards, cardStats };\n}\n\n/**\n * Special method for log scales. When series converted into buckets with log scale,\n * for simplification, 0 values are converted into 0, not into -Infinity. On the other hand, we mean\n * that all values less than series minimum, is 0 values, and we create special \"minimum\" bucket for\n * that values (actually, there're no values less than minimum, so this bucket is empty).\n *  8-16|    | ** |    |  * |  **|\n *   4-8|  * |*  *|*   |** *| *  |\n *   2-4| * *|    | ***|    |*   |\n *   1-2|*   |    |    |    |    | This bucket contains minimum series value\n * 0.5-1|____|____|____|____|____| This bucket should be displayed as 0 on graph\n *     0|____|____|____|____|____| This bucket is for 0 values (should actually be -Infinity)\n * So we should merge two bottom buckets into one (0-value bucket).\n *\n * @param  {Object} buckets  Heatmap buckets\n * @param  {Number} minValue Minimum series value\n * @return {Object}          Transformed buckets\n */\nfunction mergeZeroBuckets(buckets, minValue) {\n  _.forEach(buckets, xBucket => {\n    const yBuckets = xBucket.buckets;\n\n    const emptyBucket = {\n      bounds: { bottom: 0, top: 0 },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    const nullBucket = yBuckets[0] || emptyBucket;\n    const minBucket = yBuckets[minValue] || emptyBucket;\n\n    const newBucket = {\n      y: 0,\n      bounds: { bottom: minValue, top: minBucket.bounds.top || minValue },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    newBucket.points = nullBucket.points.concat(minBucket.points);\n    newBucket.values = nullBucket.values.concat(minBucket.values);\n    newBucket.count = newBucket.values.length;\n\n    if (newBucket.count === 0) {\n      return;\n    }\n\n    delete yBuckets[minValue];\n    yBuckets[0] = newBucket;\n  });\n\n  return buckets;\n}\n\n/**\n * Convert set of time series into heatmap buckets\n * @return {Object}    Heatmap object:\n * {\n *   xBucketBound_1: {\n *     x: xBucketBound_1,\n *     buckets: {\n *       yBucketBound_1: {\n *         y: yBucketBound_1,\n *         bounds: {bottom, top}\n *         values: [val_1, val_2, ..., val_K],\n *         points: [[val_Y, val_X, series_name], ..., [...]],\n *         seriesStat: {seriesName_1: val_1, seriesName_2: val_2}\n *       },\n *       ...\n *       yBucketBound_M: {}\n *     },\n *     values: [val_1, val_2, ..., val_K],\n *     points: [\n *       [val_Y, val_X, series_name], (point_1)\n *       ...\n *       [...] (point_K)\n *     ]\n *   },\n *   xBucketBound_2: {},\n *   ...\n *   xBucketBound_N: {}\n * }\n */\nfunction convertToHeatMap(seriesList, yBucketSize, xBucketSize, logBase = 1) {\n  const heatmap = {};\n\n  for (const series of seriesList) {\n    const datapoints = series.datapoints;\n    const seriesName = series.label;\n\n    // Slice series into X axis buckets\n    // |    | ** |    |  * |  **|\n    // |  * |*  *|*   |** *| *  |\n    // |** *|    | ***|    |*   |\n    // |____|____|____|____|____|_\n    //\n    _.forEach(datapoints, point => {\n      const bucketBound = getBucketBound(point[TIME_INDEX], xBucketSize);\n      pushToXBuckets(heatmap, point, bucketBound, seriesName);\n    });\n  }\n\n  // Slice X axis buckets into Y (value) buckets\n  // |  **|     |2|,\n  // | *  | --\\ |1|,\n  // |*   | --/ |1|,\n  // |____|     |0|\n  //\n  _.forEach(heatmap, xBucket => {\n    if (logBase !== 1) {\n      xBucket.buckets = convertToLogScaleValueBuckets(xBucket, yBucketSize, logBase);\n    } else {\n      xBucket.buckets = convertToValueBuckets(xBucket, yBucketSize);\n    }\n  });\n\n  return heatmap;\n}\n\nfunction pushToXBuckets(buckets, point, bucketNum, seriesName) {\n  const value = point[VALUE_INDEX];\n  if (value === null || value === undefined || isNaN(value)) {\n    return;\n  }\n\n  // Add series name to point for future identification\n  const pointExt = _.concat(point, seriesName);\n\n  if (buckets[bucketNum] && buckets[bucketNum].values) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(pointExt);\n  } else {\n    buckets[bucketNum] = {\n      x: bucketNum,\n      values: [value],\n      points: [pointExt],\n    };\n  }\n}\n\nfunction pushToYBuckets(buckets, bucketNum, value, point, bounds) {\n  let count = 1;\n  // Use the 3rd argument as scale/count\n  if (point.length > 3) {\n    count = parseInt(point[2], 10);\n  }\n  if (buckets[bucketNum]) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(point);\n    buckets[bucketNum].count += count;\n  } else {\n    buckets[bucketNum] = {\n      y: bucketNum,\n      bounds: bounds,\n      values: [value],\n      points: [point],\n      count: count,\n    };\n  }\n}\n\nfunction getValueBucketBound(value, yBucketSize, logBase) {\n  if (logBase === 1) {\n    return getBucketBound(value, yBucketSize);\n  } else {\n    return getLogScaleBucketBound(value, yBucketSize, logBase);\n  }\n}\n\n/**\n * Find bucket for given value (for linear scale)\n */\nfunction getBucketBounds(value, bucketSize) {\n  let bottom, top;\n  bottom = Math.floor(value / bucketSize) * bucketSize;\n  top = (Math.floor(value / bucketSize) + 1) * bucketSize;\n\n  return { bottom, top };\n}\n\nfunction getBucketBound(value, bucketSize) {\n  const bounds = getBucketBounds(value, bucketSize);\n  return bounds.bottom;\n}\n\nfunction convertToValueBuckets(xBucket, bucketSize) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n  const buckets = {};\n\n  _.forEach(values, (val, index) => {\n    const bounds = getBucketBounds(val, bucketSize);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Find bucket for given value (for log scales)\n */\nfunction getLogScaleBucketBounds(value, yBucketSplitFactor, logBase) {\n  let top, bottom;\n  if (value === 0) {\n    return { bottom: 0, top: 0 };\n  }\n\n  const valueLog = logp(value, logBase);\n  let pow, powTop;\n  if (yBucketSplitFactor === 1 || !yBucketSplitFactor) {\n    pow = Math.floor(valueLog);\n    powTop = pow + 1;\n  } else {\n    const additionalBucketSize = 1 / yBucketSplitFactor;\n    let additionalLog = valueLog - Math.floor(valueLog);\n    additionalLog = Math.floor(additionalLog / additionalBucketSize) * additionalBucketSize;\n    pow = Math.floor(valueLog) + additionalLog;\n    powTop = pow + additionalBucketSize;\n  }\n  bottom = Math.pow(logBase, pow);\n  top = Math.pow(logBase, powTop);\n\n  return { bottom, top };\n}\n\nfunction getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {\n  const bounds = getLogScaleBucketBounds(value, yBucketSplitFactor, logBase);\n  return bounds.bottom;\n}\n\nfunction convertToLogScaleValueBuckets(xBucket, yBucketSplitFactor, logBase) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n\n  const buckets = {};\n  _.forEach(values, (val, index) => {\n    const bounds = getLogScaleBucketBounds(val, yBucketSplitFactor, logBase);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Logarithm for custom base\n * @param value\n * @param base logarithm base\n */\nfunction logp(value, base) {\n  return Math.log(value) / Math.log(base);\n}\n\n/**\n * Calculate size of Y bucket from given buckets bounds.\n * @param bounds Array of Y buckets bounds\n * @param logBase Logarithm base\n */\nfunction calculateBucketSize(bounds: number[], logBase = 1): number {\n  let bucketSize = Infinity;\n\n  if (bounds.length === 0) {\n    return 0;\n  } else if (bounds.length === 1) {\n    return bounds[0];\n  } else {\n    bounds = _.sortBy(bounds);\n    for (let i = 1; i < bounds.length; i++) {\n      const distance = getDistance(bounds[i], bounds[i - 1], logBase);\n      bucketSize = distance < bucketSize ? distance : bucketSize;\n    }\n  }\n\n  return bucketSize;\n}\n\n/**\n * Calculate distance between two numbers in given scale (linear or logarithmic).\n * @param a\n * @param b\n * @param logBase\n */\nfunction getDistance(a: number, b: number, logBase = 1): number {\n  if (logBase === 1) {\n    // Linear distance\n    return Math.abs(b - a);\n  } else {\n    // logarithmic distance\n    const ratio = Math.max(a, b) / Math.min(a, b);\n    return logp(ratio, logBase);\n  }\n}\n\n/**\n * Compare two heatmap data objects\n * @param objA\n * @param objB\n */\nfunction isHeatmapDataEqual(objA: any, objB: any): boolean {\n  let isEql = !emptyXOR(objA, objB);\n\n  _.forEach(objA, (xBucket: XBucket, x) => {\n    if (objB[x]) {\n      if (emptyXOR(xBucket.buckets, objB[x].buckets)) {\n        isEql = false;\n        return false;\n      }\n\n      _.forEach(xBucket.buckets, (yBucket: YBucket, y) => {\n        if (objB[x].buckets && objB[x].buckets[y]) {\n          if (objB[x].buckets[y].values) {\n            isEql = _.isEqual(_.sortBy(yBucket.values), _.sortBy(objB[x].buckets[y].values));\n            if (!isEql) {\n              return false;\n            } else {\n              return true;\n            }\n          } else {\n            isEql = false;\n            return false;\n          }\n        } else {\n          isEql = false;\n          return false;\n        }\n      });\n\n      if (!isEql) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      isEql = false;\n      return false;\n    }\n  });\n\n  return isEql;\n}\n\nfunction emptyXOR(foo: any, bar: any): boolean {\n  return (_.isEmpty(foo) || _.isEmpty(bar)) && !(_.isEmpty(foo) && _.isEmpty(bar));\n}\n\nexport {\n  convertToHeatMap,\n  histogramToHeatmap,\n  convertToCards,\n  mergeZeroBuckets,\n  getValueBucketBound,\n  isHeatmapDataEqual,\n  calculateBucketSize,\n  sortSeriesByLabel,\n};\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  dataFormats: any;\n  yBucketBoundModes: any;\n\n  /** @ngInject */\n  constructor($scope, uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.dataFormats = {\n      'Time series': 'timeseries',\n      'Time series buckets': 'tsbuckets',\n    };\n\n    this.yBucketBoundModes = {\n      Auto: 'auto',\n      Upper: 'upper',\n      Lower: 'lower',\n    };\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.yAxis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function axesEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import * as d3 from 'd3';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { getValueBucketBound } from './heatmap_data_converter';\n\nconst TOOLTIP_PADDING_X = 30;\nconst TOOLTIP_PADDING_Y = 5;\nconst HISTOGRAM_WIDTH = 160;\nconst HISTOGRAM_HEIGHT = 40;\n\nexport class HeatmapTooltip {\n  tooltip: any;\n  scope: any;\n  dashboard: any;\n  panelCtrl: any;\n  panel: any;\n  heatmapPanel: any;\n  mouseOverBucket: boolean;\n  originalFillColor: any;\n\n  constructor(elem, scope) {\n    this.scope = scope;\n    this.dashboard = scope.ctrl.dashboard;\n    this.panelCtrl = scope.ctrl;\n    this.panel = scope.ctrl.panel;\n    this.heatmapPanel = elem;\n    this.mouseOverBucket = false;\n    this.originalFillColor = null;\n\n    elem.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onMouseLeave() {\n    this.destroy();\n  }\n\n  onMouseMove(e) {\n    if (!this.panel.tooltip.show) {\n      return;\n    }\n\n    this.move(e);\n  }\n\n  add() {\n    this.tooltip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');\n  }\n\n  destroy() {\n    if (this.tooltip) {\n      this.tooltip.remove();\n    }\n\n    this.tooltip = null;\n  }\n\n  show(pos, data) {\n    if (!this.panel.tooltip.show || !data) {\n      return;\n    }\n    // shared tooltip mode\n    if (pos.panelRelY) {\n      return;\n    }\n\n    const { xBucketIndex, yBucketIndex } = this.getBucketIndexes(pos, data);\n\n    if (!data.buckets[xBucketIndex]) {\n      this.destroy();\n      return;\n    }\n\n    if (!this.tooltip) {\n      this.add();\n    }\n\n    let boundBottom, boundTop, valuesNumber;\n    const xData = data.buckets[xBucketIndex];\n    // Search in special 'zero' bucket also\n    const yData = _.find(xData.buckets, (bucket, bucketIndex) => {\n      return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();\n    });\n\n    const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);\n\n    // Decimals override. Code from panel/graph/graph.ts\n    let countValueFormatter, bucketBoundFormatter;\n    if (_.isNumber(this.panel.tooltipDecimals)) {\n      countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);\n    } else {\n      // auto decimals\n      // legend and tooltip gets one more decimal precision\n      // than graph legend ticks\n      const decimals = (this.panelCtrl.decimals || -1) + 1;\n      countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n    }\n\n    let tooltipHtml = `<div class=\"graph-tooltip-time\">${time}</div>\n      <div class=\"heatmap-histogram\"></div>`;\n\n    if (yData) {\n      if (yData.bounds) {\n        if (data.tsBuckets) {\n          // Use Y-axis labels\n          const tickFormatter = valIndex => {\n            return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];\n          };\n\n          boundBottom = tickFormatter(yBucketIndex);\n          boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';\n        } else {\n          // Display 0 if bucket is a special 'zero' bucket\n          const bottom = yData.y ? yData.bounds.bottom : 0;\n          boundBottom = bucketBoundFormatter(bottom);\n          boundTop = bucketBoundFormatter(yData.bounds.top);\n        }\n        valuesNumber = countValueFormatter(yData.count);\n        tooltipHtml += `<div>\n          bucket: <b>${boundBottom} - ${boundTop}</b> <br>\n          count: <b>${valuesNumber}</b> <br>\n        </div>`;\n      } else {\n        // currently no bounds for pre bucketed data\n        tooltipHtml += `<div>count: <b>${yData.count}</b><br></div>`;\n      }\n    } else {\n      if (!this.panel.tooltip.showHistogram) {\n        this.destroy();\n        return;\n      }\n      boundBottom = yBucketIndex;\n      boundTop = '';\n      valuesNumber = 0;\n    }\n\n    this.tooltip.html(tooltipHtml);\n\n    if (this.panel.tooltip.showHistogram) {\n      this.addHistogram(xData);\n    }\n\n    this.move(pos);\n  }\n\n  getBucketIndexes(pos, data) {\n    const xBucketIndex = this.getXBucketIndex(pos.x, data);\n    const yBucketIndex = this.getYBucketIndex(pos.y, data);\n    return { xBucketIndex, yBucketIndex };\n  }\n\n  getXBucketIndex(x, data) {\n    // First try to find X bucket by checking x pos is in the\n    // [bucket.x, bucket.x + xBucketSize] interval\n    const xBucket = _.find(data.buckets, bucket => {\n      return x > bucket.x && x - bucket.x <= data.xBucketSize;\n    });\n    return xBucket ? xBucket.x : getValueBucketBound(x, data.xBucketSize, 1);\n  }\n\n  getYBucketIndex(y, data) {\n    if (data.tsBuckets) {\n      return Math.floor(y);\n    }\n    const yBucketIndex = getValueBucketBound(y, data.yBucketSize, this.panel.yAxis.logBase);\n    return yBucketIndex;\n  }\n\n  getSharedTooltipPos(pos) {\n    // get pageX from position on x axis and pageY from relative position in original panel\n    pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);\n    pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;\n    return pos;\n  }\n\n  addHistogram(data) {\n    const xBucket = this.scope.ctrl.data.buckets[data.x];\n    const yBucketSize = this.scope.ctrl.data.yBucketSize;\n    let min, max, ticks;\n    if (this.scope.ctrl.data.tsBuckets) {\n      min = 0;\n      max = this.scope.ctrl.data.tsBuckets.length - 1;\n      ticks = this.scope.ctrl.data.tsBuckets.length;\n    } else {\n      min = this.scope.ctrl.data.yAxis.min;\n      max = this.scope.ctrl.data.yAxis.max;\n      ticks = this.scope.ctrl.data.yAxis.ticks;\n    }\n    let histogramData = _.map(xBucket.buckets, bucket => {\n      const count = bucket.count !== undefined ? bucket.count : bucket.values.length;\n      return [bucket.bounds.bottom, count];\n    });\n    histogramData = _.filter(histogramData, d => {\n      return d[0] >= min && d[0] <= max;\n    });\n\n    const scale = this.scope.yScale.copy();\n    const histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);\n\n    let barWidth;\n    if (this.panel.yAxis.logBase === 1) {\n      barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);\n    } else {\n      const barNumberFactor = yBucketSize ? yBucketSize : 1;\n      barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);\n    }\n    barWidth = Math.max(barWidth, 1);\n\n    // Normalize histogram Y axis\n    const histogramDomain = _.reduce(_.map(histogramData, d => d[1]), (sum, val) => sum + val, 0);\n    const histYScale = d3\n      .scaleLinear()\n      .domain([0, histogramDomain])\n      .range([0, HISTOGRAM_HEIGHT]);\n\n    const histogram = this.tooltip\n      .select('.heatmap-histogram')\n      .append('svg')\n      .attr('width', HISTOGRAM_WIDTH)\n      .attr('height', HISTOGRAM_HEIGHT);\n\n    histogram\n      .selectAll('.bar')\n      .data(histogramData)\n      .enter()\n      .append('rect')\n      .attr('x', d => {\n        return histXScale(d[0]);\n      })\n      .attr('width', barWidth)\n      .attr('y', d => {\n        return HISTOGRAM_HEIGHT - histYScale(d[1]);\n      })\n      .attr('height', d => {\n        return histYScale(d[1]);\n      });\n  }\n\n  move(pos) {\n    if (!this.tooltip) {\n      return;\n    }\n\n    const elem = $(this.tooltip.node())[0];\n    const tooltipWidth = elem.clientWidth;\n    const tooltipHeight = elem.clientHeight;\n\n    let left = pos.pageX + TOOLTIP_PADDING_X;\n    let top = pos.pageY + TOOLTIP_PADDING_Y;\n\n    if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {\n      left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;\n    }\n\n    if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {\n      top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;\n    }\n\n    return this.tooltip.style('left', left + 'px').style('top', top + 'px');\n  }\n\n  countValueFormatter(decimals, scaledDecimals = null) {\n    const format = 'short';\n    return value => {\n      return kbn.valueFormats[format](value, decimals, scaledDecimals);\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport kbn from 'app/core/utils/kbn';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport * as ticksUtils from 'app/core/utils/ticks';\nimport { HeatmapTooltip } from './heatmap_tooltip';\nimport { mergeZeroBuckets } from './heatmap_data_converter';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst MIN_CARD_SIZE = 1,\n  CARD_PADDING = 1,\n  CARD_ROUND = 0,\n  DATA_RANGE_WIDING_FACTOR = 1.2,\n  DEFAULT_X_TICK_SIZE_PX = 100,\n  DEFAULT_Y_TICK_SIZE_PX = 50,\n  X_AXIS_TICK_PADDING = 10,\n  Y_AXIS_TICK_PADDING = 5,\n  MIN_SELECTION_WIDTH = 2;\n\nexport default function rendering(scope, elem, attrs, ctrl) {\n  return new HeatmapRenderer(scope, elem, attrs, ctrl);\n}\nexport class HeatmapRenderer {\n  width: number;\n  height: number;\n  yScale: any;\n  xScale: any;\n  chartWidth: number;\n  chartHeight: number;\n  chartTop: number;\n  chartBottom: number;\n  yAxisWidth: number;\n  xAxisHeight: number;\n  cardPadding: number;\n  cardRound: number;\n  cardWidth: number;\n  cardHeight: number;\n  colorScale: any;\n  opacityScale: any;\n  mouseUpHandler: any;\n  data: any;\n  panel: any;\n  $heatmap: any;\n  tooltip: HeatmapTooltip;\n  heatmap: any;\n  timeRange: any;\n\n  selection: any;\n  padding: any;\n  margin: any;\n  dataRangeWidingFactor: number;\n  constructor(private scope, private elem, attrs, private ctrl) {\n    // $heatmap is JQuery object, but heatmap is D3\n    this.$heatmap = this.elem.find('.heatmap-panel');\n    this.tooltip = new HeatmapTooltip(this.$heatmap, this.scope);\n\n    this.selection = {\n      active: false,\n      x1: -1,\n      x2: -1,\n    };\n\n    this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\n    this.margin = { left: 25, right: 15, top: 10, bottom: 20 };\n    this.dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;\n\n    this.ctrl.events.on('render', this.onRender.bind(this));\n\n    this.ctrl.tickValueFormatter = this.tickValueFormatter.bind(this);\n\n    /////////////////////////////\n    // Selection and crosshair //\n    /////////////////////////////\n\n    // Shared crosshair and tooltip\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), this.scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), this.scope);\n\n    // Register selection listeners\n    this.$heatmap.on('mousedown', this.onMouseDown.bind(this));\n    this.$heatmap.on('mousemove', this.onMouseMove.bind(this));\n    this.$heatmap.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onGraphHoverClear() {\n    this.clearCrosshair();\n  }\n\n  onGraphHover(event) {\n    this.drawSharedCrosshair(event.pos);\n  }\n\n  onRender() {\n    this.render();\n    this.ctrl.renderingCompleted();\n  }\n\n  setElementHeight() {\n    try {\n      let height = this.ctrl.height || this.panel.height || this.ctrl.row.height;\n      if (_.isString(height)) {\n        height = parseInt(height.replace('px', ''), 10);\n      }\n\n      height -= this.panel.legend.show ? 28 : 11; // bottom padding and space for legend\n\n      this.$heatmap.css('height', height + 'px');\n\n      return true;\n    } catch (e) {\n      // IE throws errors sometimes\n      return false;\n    }\n  }\n\n  getYAxisWidth(elem) {\n    const axisText = elem.selectAll('.axis-y text').nodes();\n    const maxTextWidth = _.max(\n      _.map(axisText, text => {\n        // Use SVG getBBox method\n        return text.getBBox().width;\n      })\n    );\n\n    return maxTextWidth;\n  }\n\n  getXAxisHeight(elem) {\n    const axisLine = elem.select('.axis-x line');\n    if (!axisLine.empty()) {\n      const axisLinePosition = parseFloat(elem.select('.axis-x line').attr('y2'));\n      const canvasWidth = parseFloat(elem.attr('height'));\n      return canvasWidth - axisLinePosition;\n    } else {\n      // Default height\n      return 30;\n    }\n  }\n\n  addXAxis() {\n    this.scope.xScale = this.xScale = d3\n      .scaleTime()\n      .domain([this.timeRange.from, this.timeRange.to])\n      .range([0, this.chartWidth]);\n\n    const ticks = this.chartWidth / DEFAULT_X_TICK_SIZE_PX;\n    const grafanaTimeFormatter = ticksUtils.grafanaTimeFormat(ticks, this.timeRange.from, this.timeRange.to);\n    let timeFormat;\n    const dashboardTimeZone = this.ctrl.dashboard.getTimezone();\n    if (dashboardTimeZone === 'utc') {\n      timeFormat = d3.utcFormat(grafanaTimeFormatter);\n    } else {\n      timeFormat = d3.timeFormat(grafanaTimeFormatter);\n    }\n\n    const xAxis = d3\n      .axisBottom(this.xScale)\n      .ticks(ticks)\n      .tickFormat(timeFormat)\n      .tickPadding(X_AXIS_TICK_PADDING)\n      .tickSize(this.chartHeight);\n\n    const posY = this.margin.top;\n    const posX = this.yAxisWidth;\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-x')\n      .attr('transform', 'translate(' + posX + ',' + posY + ')')\n      .call(xAxis);\n\n    // Remove horizontal line in the top of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-x')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxis() {\n    let ticks = Math.ceil(this.chartHeight / DEFAULT_Y_TICK_SIZE_PX);\n    let tickInterval = ticksUtils.tickStep(this.data.heatmapStats.min, this.data.heatmapStats.max, ticks);\n    let { yMin, yMax } = this.wideYAxisRange(this.data.heatmapStats.min, this.data.heatmapStats.max, tickInterval);\n\n    // Rewrite min and max if it have been set explicitly\n    yMin = this.panel.yAxis.min !== null ? this.panel.yAxis.min : yMin;\n    yMax = this.panel.yAxis.max !== null ? this.panel.yAxis.max : yMax;\n\n    // Adjust ticks after Y range widening\n    tickInterval = ticksUtils.tickStep(yMin, yMax, ticks);\n    ticks = Math.ceil((yMax - yMin) / tickInterval);\n\n    const decimalsAuto = ticksUtils.getPrecision(tickInterval);\n    let decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, ticks, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      yMax = 1;\n      yMin = -1;\n      ticks = 3;\n      decimals = 1;\n    }\n\n    this.data.yAxis = {\n      min: yMin,\n      max: yMax,\n      ticks: ticks,\n    };\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([yMin, yMax])\n      .range([this.chartHeight, 0]);\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .ticks(ticks)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Wide Y values range and anjust to bucket size\n  wideYAxisRange(min, max, tickInterval) {\n    const yWiding = (max * (this.dataRangeWidingFactor - 1) - min * (this.dataRangeWidingFactor - 1)) / 2;\n    let yMin, yMax;\n\n    if (tickInterval === 0) {\n      yMax = max * this.dataRangeWidingFactor;\n      yMin = min - min * (this.dataRangeWidingFactor - 1);\n      tickInterval = (yMax - yMin) / 2;\n    } else {\n      yMax = Math.ceil((max + yWiding) / tickInterval) * tickInterval;\n      yMin = Math.floor((min - yWiding) / tickInterval) * tickInterval;\n    }\n\n    // Don't wide axis below 0 if all values are positive\n    if (min >= 0 && yMin < 0) {\n      yMin = 0;\n    }\n\n    return { yMin, yMax };\n  }\n\n  addLogYAxis() {\n    const logBase = this.panel.yAxis.logBase;\n    let { yMin, yMax } = this.adjustLogRange(this.data.heatmapStats.minLog, this.data.heatmapStats.max, logBase);\n\n    yMin =\n      this.panel.yAxis.min && this.panel.yAxis.min !== '0' ? this.adjustLogMin(this.panel.yAxis.min, logBase) : yMin;\n    yMax = this.panel.yAxis.max !== null ? this.adjustLogMax(this.panel.yAxis.max, logBase) : yMax;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      yMax = Math.pow(logBase, 2);\n      yMin = 1;\n    }\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLog()\n      .base(this.panel.yAxis.logBase)\n      .domain([yMin, yMax])\n      .range([this.chartHeight, 0]);\n\n    const domain = this.yScale.domain();\n    const tickValues = this.logScaleTickValues(domain, logBase);\n\n    const decimalsAuto = ticksUtils.getPrecision(yMin);\n    const decimals = this.panel.yAxis.decimals || decimalsAuto;\n\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, tickValues.length, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    this.data.yAxis = {\n      min: yMin,\n      max: yMax,\n      ticks: tickValues.length,\n    };\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tickValues)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Set first tick as pseudo 0\n    if (yMin < 1) {\n      this.heatmap\n        .select('.axis-y')\n        .select('.tick text')\n        .text('0');\n    }\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxisFromBuckets() {\n    const tsBuckets = this.data.tsBuckets;\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([0, tsBuckets.length - 1])\n      .range([this.chartHeight, 0]);\n\n    const tickValues = _.map(tsBuckets, (b, i) => i);\n    const decimalsAuto = _.max(_.map(tsBuckets, ticksUtils.getStringPrecision));\n    const decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    this.ctrl.decimals = decimals;\n\n    const tickValueFormatter = this.tickValueFormatter.bind(this);\n    function tickFormatter(valIndex) {\n      let valueFormatted = tsBuckets[valIndex];\n      if (!_.isNaN(_.toNumber(valueFormatted)) && valueFormatted !== '') {\n        // Try to format numeric tick labels\n        valueFormatted = tickValueFormatter(decimals)(_.toNumber(valueFormatted));\n      }\n      return valueFormatted;\n    }\n\n    const tsBucketsFormatted = _.map(tsBuckets, (v, i) => tickFormatter(i));\n    this.data.tsBucketsFormatted = tsBucketsFormatted;\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tickValues)\n      .tickFormat(tickFormatter)\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Adjust data range to log base\n  adjustLogRange(min, max, logBase) {\n    let yMin, yMax;\n\n    yMin = this.data.heatmapStats.minLog;\n    if (this.data.heatmapStats.minLog > 1 || !this.data.heatmapStats.minLog) {\n      yMin = 1;\n    } else {\n      yMin = this.adjustLogMin(this.data.heatmapStats.minLog, logBase);\n    }\n\n    // Adjust max Y value to log base\n    yMax = this.adjustLogMax(this.data.heatmapStats.max, logBase);\n\n    return { yMin, yMax };\n  }\n\n  adjustLogMax(max, base) {\n    return Math.pow(base, Math.ceil(ticksUtils.logp(max, base)));\n  }\n\n  adjustLogMin(min, base) {\n    return Math.pow(base, Math.floor(ticksUtils.logp(min, base)));\n  }\n\n  logScaleTickValues(domain, base) {\n    const domainMin = domain[0];\n    const domainMax = domain[1];\n    const tickValues = [];\n\n    if (domainMin < 1) {\n      const underOneTicks = Math.floor(ticksUtils.logp(domainMin, base));\n      for (let i = underOneTicks; i < 0; i++) {\n        const tickValue = Math.pow(base, i);\n        tickValues.push(tickValue);\n      }\n    }\n\n    const ticks = Math.ceil(ticksUtils.logp(domainMax, base));\n    for (let i = 0; i <= ticks; i++) {\n      const tickValue = Math.pow(base, i);\n      tickValues.push(tickValue);\n    }\n\n    return tickValues;\n  }\n\n  tickValueFormatter(decimals, scaledDecimals = null) {\n    const format = this.panel.yAxis.format;\n    return value => {\n      try {\n        return format !== 'none' ? kbn.valueFormats[format](value, decimals, scaledDecimals) : value;\n      } catch (err) {\n        console.error(err.message || err);\n        return value;\n      }\n    };\n  }\n\n  fixYAxisTickSize() {\n    this.heatmap\n      .select('.axis-y')\n      .selectAll('.tick line')\n      .attr('x2', this.chartWidth);\n  }\n\n  addAxes() {\n    this.chartHeight = this.height - this.margin.top - this.margin.bottom;\n    this.chartTop = this.margin.top;\n    this.chartBottom = this.chartTop + this.chartHeight;\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.addYAxisFromBuckets();\n    } else {\n      if (this.panel.yAxis.logBase === 1) {\n        this.addYAxis();\n      } else {\n        this.addLogYAxis();\n      }\n    }\n\n    this.yAxisWidth = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.chartWidth = this.width - this.yAxisWidth - this.margin.right;\n    this.fixYAxisTickSize();\n\n    this.addXAxis();\n    this.xAxisHeight = this.getXAxisHeight(this.heatmap);\n\n    if (!this.panel.yAxis.show) {\n      this.heatmap\n        .select('.axis-y')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n\n    if (!this.panel.xAxis.show) {\n      this.heatmap\n        .select('.axis-x')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n  }\n\n  addHeatmapCanvas() {\n    const heatmapElem = this.$heatmap[0];\n\n    this.width = Math.floor(this.$heatmap.width()) - this.padding.right;\n    this.height = Math.floor(this.$heatmap.height()) - this.padding.bottom;\n\n    this.cardPadding = this.panel.cards.cardPadding !== null ? this.panel.cards.cardPadding : CARD_PADDING;\n    this.cardRound = this.panel.cards.cardRound !== null ? this.panel.cards.cardRound : CARD_ROUND;\n\n    if (this.heatmap) {\n      this.heatmap.remove();\n    }\n\n    this.heatmap = d3\n      .select(heatmapElem)\n      .append('svg')\n      .attr('width', this.width)\n      .attr('height', this.height);\n  }\n\n  addHeatmap() {\n    this.addHeatmapCanvas();\n    this.addAxes();\n\n    if (this.panel.yAxis.logBase !== 1 && this.panel.dataFormat !== 'tsbuckets') {\n      const logBase = this.panel.yAxis.logBase;\n      const domain = this.yScale.domain();\n      const tickValues = this.logScaleTickValues(domain, logBase);\n      this.data.buckets = mergeZeroBuckets(this.data.buckets, _.min(tickValues));\n    }\n\n    const cardsData = this.data.cards;\n    const maxValueAuto = this.data.cardStats.max;\n    const maxValue = this.panel.color.max || maxValueAuto;\n    const minValue = this.panel.color.min || 0;\n\n    const colorScheme = _.find(this.ctrl.colorSchemes, {\n      value: this.panel.color.colorScheme,\n    });\n    this.colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n    this.opacityScale = getOpacityScale(this.panel.color, maxValue);\n    this.setCardSize();\n\n    let cards = this.heatmap.selectAll('.heatmap-card').data(cardsData);\n    cards.append('title');\n    cards = cards\n      .enter()\n      .append('rect')\n      .attr('x', this.getCardX.bind(this))\n      .attr('width', this.getCardWidth.bind(this))\n      .attr('y', this.getCardY.bind(this))\n      .attr('height', this.getCardHeight.bind(this))\n      .attr('rx', this.cardRound)\n      .attr('ry', this.cardRound)\n      .attr('class', 'bordered heatmap-card')\n      .style('fill', this.getCardColor.bind(this))\n      .style('stroke', this.getCardColor.bind(this))\n      .style('stroke-width', 0)\n      .style('opacity', this.getCardOpacity.bind(this));\n\n    const $cards = this.$heatmap.find('.heatmap-card');\n    $cards\n      .on('mouseenter', event => {\n        this.tooltip.mouseOverBucket = true;\n        this.highlightCard(event);\n      })\n      .on('mouseleave', event => {\n        this.tooltip.mouseOverBucket = false;\n        this.resetCardHighLight(event);\n      });\n  }\n\n  highlightCard(event) {\n    const color = d3.select(event.target).style('fill');\n    const highlightColor = d3.color(color).darker(2);\n    const strokeColor = d3.color(color).brighter(4);\n    const currentCard = d3.select(event.target);\n    this.tooltip.originalFillColor = color;\n    currentCard\n      .style('fill', highlightColor.toString())\n      .style('stroke', strokeColor.toString())\n      .style('stroke-width', 1);\n  }\n\n  resetCardHighLight(event) {\n    d3\n      .select(event.target)\n      .style('fill', this.tooltip.originalFillColor)\n      .style('stroke', this.tooltip.originalFillColor)\n      .style('stroke-width', 0);\n  }\n\n  setCardSize() {\n    const xGridSize = Math.floor(this.xScale(this.data.xBucketSize) - this.xScale(0));\n    let yGridSize = Math.floor(this.yScale(this.yScale.invert(0) - this.data.yBucketSize));\n\n    if (this.panel.yAxis.logBase !== 1) {\n      const base = this.panel.yAxis.logBase;\n      const splitFactor = this.data.yBucketSize || 1;\n      yGridSize = Math.floor((this.yScale(1) - this.yScale(base)) / splitFactor);\n    }\n\n    this.cardWidth = xGridSize - this.cardPadding * 2;\n    this.cardHeight = yGridSize ? yGridSize - this.cardPadding * 2 : 0;\n  }\n\n  getCardX(d) {\n    let x;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      x = this.yAxisWidth + this.cardPadding;\n    } else {\n      x = this.xScale(d.x) + this.yAxisWidth + this.cardPadding;\n    }\n\n    return x;\n  }\n\n  getCardWidth(d) {\n    let w;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      const cuttedWidth = this.xScale(d.x) + this.cardWidth;\n      w = cuttedWidth > 0 ? cuttedWidth : 0;\n    } else if (this.xScale(d.x) + this.cardWidth > this.chartWidth) {\n      // Cut card right to prevent overlay\n      w = this.chartWidth - this.xScale(d.x) - this.cardPadding;\n    } else {\n      w = this.cardWidth;\n    }\n\n    // Card width should be MIN_CARD_SIZE at least\n    w = Math.max(w, MIN_CARD_SIZE);\n    return w;\n  }\n\n  getCardY(d) {\n    let y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      y = this.chartBottom - this.cardHeight - this.cardPadding;\n    } else {\n      if (y < this.chartTop) {\n        y = this.chartTop;\n      }\n    }\n\n    return y;\n  }\n\n  getCardHeight(d) {\n    const y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    let h = this.cardHeight;\n\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      return this.cardHeight;\n    }\n\n    // Cut card height to prevent overlay\n    if (y < this.chartTop) {\n      h = this.yScale(d.y) - this.cardPadding;\n    } else if (this.yScale(d.y) > this.chartBottom) {\n      h = this.chartBottom - y;\n    } else if (y + this.cardHeight > this.chartBottom) {\n      h = this.chartBottom - y;\n    }\n\n    // Height can't be more than chart height\n    h = Math.min(h, this.chartHeight);\n    // Card height should be MIN_CARD_SIZE at least\n    h = Math.max(h, MIN_CARD_SIZE);\n\n    return h;\n  }\n\n  getCardColor(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.panel.color.cardColor;\n    } else {\n      return this.colorScale(d.count);\n    }\n  }\n\n  getCardOpacity(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.opacityScale(d.count);\n    } else {\n      return 1;\n    }\n  }\n\n  getEventOffset(event) {\n    const elemOffset = this.$heatmap.offset();\n    const x = Math.floor(event.clientX - elemOffset.left);\n    const y = Math.floor(event.clientY - elemOffset.top);\n    return { x, y };\n  }\n\n  onMouseDown(event) {\n    const offset = this.getEventOffset(event);\n    this.selection.active = true;\n    this.selection.x1 = offset.x;\n\n    this.mouseUpHandler = () => {\n      this.onMouseUp();\n    };\n\n    $(document).one('mouseup', this.mouseUpHandler.bind(this));\n  }\n\n  onMouseUp() {\n    $(document).unbind('mouseup', this.mouseUpHandler.bind(this));\n    this.mouseUpHandler = null;\n    this.selection.active = false;\n\n    const selectionRange = Math.abs(this.selection.x2 - this.selection.x1);\n    if (this.selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {\n      const timeFrom = this.xScale.invert(Math.min(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n      const timeTo = this.xScale.invert(Math.max(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n\n      this.ctrl.timeSrv.setTime({\n        from: moment.utc(timeFrom),\n        to: moment.utc(timeTo),\n      });\n    }\n\n    this.clearSelection();\n  }\n\n  onMouseLeave() {\n    appEvents.emit('graph-hover-clear');\n    this.clearCrosshair();\n  }\n\n  onMouseMove(event) {\n    if (!this.heatmap) {\n      return;\n    }\n\n    const offset = this.getEventOffset(event);\n    if (this.selection.active) {\n      // Clear crosshair and tooltip\n      this.clearCrosshair();\n      this.tooltip.destroy();\n\n      this.selection.x2 = this.limitSelection(offset.x);\n      this.drawSelection(this.selection.x1, this.selection.x2);\n    } else {\n      const pos = this.getEventPos(event, offset);\n      this.drawCrosshair(offset.x);\n      this.tooltip.show(pos, this.data);\n      this.emitGraphHoverEvent(pos);\n    }\n  }\n\n  getEventPos(event, offset) {\n    const x = this.xScale.invert(offset.x - this.yAxisWidth).valueOf();\n    const y = this.yScale.invert(offset.y - this.chartTop);\n    const pos = {\n      pageX: event.pageX,\n      pageY: event.pageY,\n      x: x,\n      x1: x,\n      y: y,\n      y1: y,\n      panelRelY: null,\n      offset,\n    };\n\n    return pos;\n  }\n\n  emitGraphHoverEvent(pos) {\n    // Set minimum offset to prevent showing legend from another panel\n    pos.panelRelY = Math.max(pos.offset.y / this.height, 0.001);\n    // broadcast to other graph panels that we are hovering\n    appEvents.emit('graph-hover', { pos: pos, panel: this.panel });\n  }\n\n  limitSelection(x2) {\n    x2 = Math.max(x2, this.yAxisWidth);\n    x2 = Math.min(x2, this.chartWidth + this.yAxisWidth);\n    return x2;\n  }\n\n  drawSelection(posX1, posX2) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n      const selectionX = Math.min(posX1, posX2);\n      const selectionWidth = Math.abs(posX1 - posX2);\n\n      if (selectionWidth > MIN_SELECTION_WIDTH) {\n        this.heatmap\n          .append('rect')\n          .attr('class', 'heatmap-selection')\n          .attr('x', selectionX)\n          .attr('width', selectionWidth)\n          .attr('y', this.chartTop)\n          .attr('height', this.chartHeight);\n      }\n    }\n  }\n\n  clearSelection() {\n    this.selection.x1 = -1;\n    this.selection.x2 = -1;\n\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n    }\n  }\n\n  drawCrosshair(position) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n\n      let posX = position;\n      posX = Math.max(posX, this.yAxisWidth);\n      posX = Math.min(posX, this.chartWidth + this.yAxisWidth);\n\n      this.heatmap\n        .append('g')\n        .attr('class', 'heatmap-crosshair')\n        .attr('transform', 'translate(' + posX + ',0)')\n        .append('line')\n        .attr('x1', 1)\n        .attr('y1', this.chartTop)\n        .attr('x2', 1)\n        .attr('y2', this.chartBottom)\n        .attr('stroke-width', 1);\n    }\n  }\n\n  drawSharedCrosshair(pos) {\n    if (this.heatmap && this.ctrl.dashboard.graphTooltip !== 0) {\n      const posX = this.xScale(pos.x) + this.yAxisWidth;\n      this.drawCrosshair(posX);\n    }\n  }\n\n  clearCrosshair() {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n    }\n  }\n\n  render() {\n    this.data = this.ctrl.data;\n    this.panel = this.ctrl.panel;\n    this.timeRange = this.ctrl.range;\n\n    if (!this.setElementHeight() || !this.data) {\n      return;\n    }\n\n    // Draw default axes and return if no data\n    if (_.isEmpty(this.data.buckets)) {\n      this.addHeatmapCanvas();\n      this.addAxes();\n      return;\n    }\n\n    this.addHeatmap();\n    this.scope.yAxisWidth = this.yAxisWidth;\n    this.scope.xAxisHeight = this.xAxisHeight;\n    this.scope.chartHeight = this.chartHeight;\n    this.scope.chartWidth = this.chartWidth;\n    this.scope.chartTop = this.chartTop;\n  }\n}\n","import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\nimport { axesEditor } from './axes_editor';\nimport { heatmapDisplayEditor } from './display_editor';\nimport rendering from './rendering';\nimport {\n  convertToHeatMap,\n  convertToCards,\n  histogramToHeatmap,\n  calculateBucketSize,\n  sortSeriesByLabel,\n} from './heatmap_data_converter';\n\nconst X_BUCKET_NUMBER_DEFAULT = 30;\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\n\nconst panelDefaults = {\n  heatmap: {},\n  cards: {\n    cardPadding: null,\n    cardRound: null,\n  },\n  color: {\n    mode: 'spectrum',\n    cardColor: '#b4ff00',\n    colorScale: 'sqrt',\n    exponent: 0.5,\n    colorScheme: 'interpolateOranges',\n  },\n  legend: {\n    show: false,\n  },\n  dataFormat: 'timeseries',\n  yBucketBound: 'auto',\n  xAxis: {\n    show: true,\n  },\n  yAxis: {\n    show: true,\n    format: 'short',\n    decimals: null,\n    logBase: 1,\n    splitFactor: null,\n    min: null,\n    max: null,\n  },\n  xBucketSize: null,\n  xBucketNumber: null,\n  yBucketSize: null,\n  yBucketNumber: null,\n  tooltip: {\n    show: true,\n    showHistogram: false,\n  },\n  highlightCards: true,\n};\n\nconst colorModes = ['opacity', 'spectrum'];\nconst opacityScales = ['linear', 'sqrt'];\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nconst colorSchemes = [\n  // Diverging\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },\n  { name: 'Magma', value: 'interpolateMagma', invert: 'light' },\n  { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },\n  { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },\n  { name: 'Warm', value: 'interpolateWarm', invert: 'light' },\n  { name: 'Cool', value: 'interpolateCool', invert: 'light' },\n  { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },\n];\n\nconst dsSupportHistogramSort = ['prometheus', 'elasticsearch'];\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  opacityScales: any = [];\n  colorModes: any = [];\n  colorSchemes: any = [];\n  selectionActivated: boolean;\n  unitFormats: any;\n  data: any;\n  series: any;\n  timeSrv: any;\n  dataWarning: any;\n  decimals: number;\n  scaledDecimals: number;\n\n  /** @ngInject */\n  constructor($scope, $injector, timeSrv) {\n    super($scope, $injector);\n    this.timeSrv = timeSrv;\n    this.selectionActivated = false;\n\n    _.defaultsDeep(this.panel, panelDefaults);\n    this.opacityScales = opacityScales;\n    this.colorModes = colorModes;\n    this.colorSchemes = colorSchemes;\n\n    // Bind grafana panel events\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onCardColorChange = this.onCardColorChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditor, 2);\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onRender() {\n    if (!this.range) {\n      return;\n    }\n\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.convertHistogramToHeatmapData();\n    } else {\n      this.convertTimeSeriesToHeatmapData();\n    }\n  }\n\n  convertTimeSeriesToHeatmapData() {\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\n    const logBase = this.panel.yAxis.logBase;\n\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\n    const xBucketSizeByNumber = Math.floor((this.range.to - this.range.from) / xBucketNumber);\n\n    // Parse X bucket size (number or interval)\n    const isIntervalString = kbn.interval_regex.test(this.panel.xBucketSize);\n    if (isIntervalString) {\n      xBucketSize = kbn.interval_to_ms(this.panel.xBucketSize);\n    } else if (\n      isNaN(Number(this.panel.xBucketSize)) ||\n      this.panel.xBucketSize === '' ||\n      this.panel.xBucketSize === null\n    ) {\n      xBucketSize = xBucketSizeByNumber;\n    } else {\n      xBucketSize = Number(this.panel.xBucketSize);\n    }\n\n    // Calculate Y bucket size\n    heatmapStats = this.parseSeries(this.series);\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\n    if (logBase !== 1) {\n      yBucketSize = this.panel.yAxis.splitFactor;\n    } else {\n      if (heatmapStats.max === heatmapStats.min) {\n        if (heatmapStats.max) {\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\n        } else {\n          yBucketSize = 1;\n        }\n      } else {\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\n      }\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\n    }\n\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase);\n\n    // Set default Y range if no data\n    if (!heatmapStats.min && !heatmapStats.max) {\n      heatmapStats = { min: -1, max: 1, minLog: 1 };\n      yBucketSize = 1;\n    }\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      heatmapStats: heatmapStats,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  convertHistogramToHeatmapData() {\n    const panelDatasource = this.getPanelDataSourceType();\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets;\n\n    // Try to sort series by bucket bound, if datasource doesn't do it.\n    if (!_.includes(dsSupportHistogramSort, panelDatasource)) {\n      this.series.sort(sortSeriesByLabel);\n    }\n\n    // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as X axis labels.\n    bucketsData = histogramToHeatmap(this.series);\n\n    tsBuckets = _.map(this.series, 'label');\n    const yBucketBound = this.panel.yBucketBound;\n    if ((panelDatasource === 'prometheus' && yBucketBound !== 'lower') || yBucketBound === 'upper') {\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\n      tsBuckets = [''].concat(tsBuckets);\n    } else {\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\n      // Use this as a default mode as well.\n      tsBuckets.push('');\n    }\n\n    // Calculate bucket size based on heatmap data\n    const xBucketBoundSet = _.map(_.keys(bucketsData), key => Number(key));\n    xBucketSize = calculateBucketSize(xBucketBoundSet);\n    // Always let yBucketSize=1 in 'tsbuckets' mode\n    yBucketSize = 1;\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      tsBuckets: tsBuckets,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  getPanelDataSourceType() {\n    if (this.datasource.meta && this.datasource.meta.id) {\n      return this.datasource.meta.id;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n\n    this.dataWarning = null;\n    const datapointsCount = _.reduce(\n      this.series,\n      (sum, series) => {\n        return sum + series.datapoints.length;\n      },\n      0\n    );\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onCardColorChange(newColor) {\n    this.panel.color.cardColor = newColor;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    if (seriesData.datapoints === undefined) {\n      throw new Error('Heatmap error: data should be a time series');\n    }\n\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n    const datapoints = seriesData.datapoints || [];\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = this.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  parseSeries(series) {\n    const min = _.min(_.map(series, s => s.stats.min));\n    const minLog = _.min(_.map(series, s => s.stats.logmin));\n    const max = _.max(_.map(series, s => s.stats.max));\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  parseHistogramSeries(series) {\n    const bounds = _.map(series, s => Number(s.alias));\n    const min = _.min(bounds);\n    const minLog = _.min(bounds);\n    const max = _.max(bounds);\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n","import './color_legend';\nimport { HeatmapCtrl } from './heatmap_ctrl';\n\nexport { HeatmapCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport flatten from '../../../core/utils/flatten';\nimport TimeSeries from '../../../core/time_series2';\nimport TableModel from '../../../core/table_model';\n\nconst transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n  description: 'Time series to rows',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: 'Time series to columns',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n\n    // group by time\n    const points = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      model.columns.push({ text: series.target });\n\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = { time: dp[1] };\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (const time in points) {\n      const point = points[time];\n      const values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        const value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  },\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: 'Time series aggregations',\n  getColumns: () => {\n    return [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Current', value: 'current' },\n      { text: 'Count', value: 'count' },\n    ];\n  },\n  transform: (data, panel, model) => {\n    let i, y;\n    model.columns.push({ text: 'Metric' });\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({ text: panel.columns[i].text });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      const cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  },\n};\n\ntransformers['annotations'] = {\n  description: 'Annotations',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n    model.columns.push({ text: 'Title' });\n    model.columns.push({ text: 'Text' });\n    model.columns.push({ text: 'Tags' });\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < data.annotations.length; i++) {\n      const evt = data.annotations[i];\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\n    }\n  },\n};\n\ntransformers['table'] = {\n  description: 'Table',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // Single query returns data columns as is\n    if (data.length === 1) {\n      return [...data[0].columns];\n    }\n\n    // Track column indexes: name -> index\n    const columnNames = {};\n\n    // Union of all columns\n    const columns = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    return columns;\n  },\n  transform: (data, panel, model) => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table');\n    if (noTableIndex > -1) {\n      throw {\n        message: `Result of query #${String.fromCharCode(\n          65 + noTableIndex\n        )} is not in table format, try using another transform.`,\n      };\n    }\n\n    // Single query returns data columns and rows as is\n    if (data.length === 1) {\n      model.columns = [...data[0].columns];\n      model.rows = [...data[0].rows];\n      return;\n    }\n\n    // Track column indexes of union: name -> index\n    const columnNames = {};\n\n    // Union of all non-value columns\n    const columnsUnion = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    // Map old column index to union index per series, e.g.,\n    // given columnNames {A: 0, B: 1} and\n    // data [{columns: [{ text: 'A' }]}, {columns: [{ text: 'B' }]}] => [[0], [1]]\n    const columnIndexMapper = data.map(series => series.columns.map(col => columnNames[col.text]));\n\n    // Flatten rows of all series and adjust new column indexes\n    const flattenedRows = data.reduce((acc, series, seriesIndex) => {\n      const mapper = columnIndexMapper[seriesIndex];\n      series.rows.forEach(row => {\n        const alteredRow = [];\n        // Shifting entries according to index mapper\n        mapper.forEach((to, from) => {\n          alteredRow[to] = row[from];\n        });\n        acc.push(alteredRow);\n      });\n      return acc;\n    }, []);\n\n    // Returns true if both rows have matching non-empty fields as well as matching\n    // indexes where one field is empty and the other is not\n    function areRowsMatching(columns, row, otherRow) {\n      let foundFieldToMatch = false;\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        if (row[columnIndex] !== undefined && otherRow[columnIndex] !== undefined) {\n          if (row[columnIndex] !== otherRow[columnIndex]) {\n            return false;\n          }\n        } else if (row[columnIndex] === undefined || otherRow[columnIndex] === undefined) {\n          foundFieldToMatch = true;\n        }\n      }\n      return foundFieldToMatch;\n    }\n\n    // Merge rows that have same values for columns\n    const mergedRows = {};\n    const compactedRows = flattenedRows.reduce((acc, row, rowIndex) => {\n      if (!mergedRows[rowIndex]) {\n        // Look from current row onwards\n        let offset = rowIndex + 1;\n        // More than one row can be merged into current row\n        while (offset < flattenedRows.length) {\n          // Find next row that could be merged\n          const match = _.findIndex(flattenedRows, otherRow => areRowsMatching(columnsUnion, row, otherRow), offset);\n          if (match > -1) {\n            const matchedRow = flattenedRows[match];\n            // Merge values from match into current row if there is a gap in the current row\n            for (let columnIndex = 0; columnIndex < columnsUnion.length; columnIndex++) {\n              if (row[columnIndex] === undefined && matchedRow[columnIndex] !== undefined) {\n                row[columnIndex] = matchedRow[columnIndex];\n              }\n            }\n            // Don't visit this row again\n            mergedRows[match] = matchedRow;\n            // Keep looking for more rows to merge\n            offset = match + 1;\n          } else {\n            // No match found, stop looking\n            break;\n          }\n        }\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n\n    model.columns = columnsUnion;\n    model.rows = compactedRows;\n  },\n};\n\ntransformers['json'] = {\n  description: 'JSON Data',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    const names: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, null);\n        for (const propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, (value, key) => {\n      return { text: key, value: key };\n    });\n  },\n  transform: (data, panel, model) => {\n    let i, y, z;\n\n    for (const column of panel.columns) {\n      const tableCol: any = { text: column.text };\n\n      // if filterable data then set columns to filterable\n      if (data.length > 0 && data[0].filterable) {\n        tableCol.filterable = true;\n      }\n\n      model.columns.push(tableCol);\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({ text: 'JSON' });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          const flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  },\n};\n\nfunction transformDataToTable(data, panel) {\n  const model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  const transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport { transformers, transformDataToTable };\n","import _ from 'lodash';\nimport { transformers } from './transformers';\n\nexport class TablePanelEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  transformers: any;\n  fontSizes: any;\n  addColumnSegment: any;\n  getColumnNames: any;\n  canSetColumns: boolean;\n  columnsHelpMessage: string;\n\n  /** @ngInject */\n  constructor($scope, private $q, private uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = 'Columns and their order are determined by the data query';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return this.$q.when([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = _.map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return this.$q.when(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column = _.find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'timeseries_aggregations') {\n      this.panel.columns.push({ text: 'Avg', value: 'avg' });\n    }\n\n    this.updateTransformHints();\n    this.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = _.without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function tablePanelEditor($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n  mappingTypes: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n    this.colorModes = [\n      { text: 'Disabled', value: null },\n      { text: 'Cell', value: 'cell' },\n      { text: 'Value', value: 'value' },\n      { text: 'Row', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: 'Number', value: 'number' },\n      { text: 'String', value: 'string' },\n      { text: 'Date', value: 'date' },\n      { text: 'Hidden', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n    ];\n    this.mappingTypes = [{ text: 'Value to text', value: 1 }, { text: 'Range to text', value: 2 }];\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return _.map(this.panelCtrl.table.columns, (col: any) => {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column, subItem) {\n    column.unit = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  addColumnStyle() {\n    const newStyleRule = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n    };\n\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = _.without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(styleIndex, colorIndex) {\n    return newColor => {\n      this.panel.styles[styleIndex].colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n    style.valueMaps.push({ value: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style, index) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n    style.rangeMaps.push({ from: '', to: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style, index) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function columnOptionsTab($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\n\nexport class TableRenderer {\n  formatters: any[];\n  colorState: any;\n\n  constructor(private panel, private table, private isUtc, private sanitize, private templateSrv) {\n    this.initColumns();\n  }\n\n  setTable(table) {\n    this.table = table;\n\n    this.initColumns();\n  }\n\n  initColumns() {\n    this.formatters = [];\n    this.colorState = {};\n\n    for (let colIndex = 0; colIndex < this.table.columns.length; colIndex++) {\n      const column = this.table.columns[colIndex];\n      column.title = column.text;\n\n      for (let i = 0; i < this.panel.styles.length; i++) {\n        const style = this.panel.styles[i];\n\n        const regex = kbn.stringToJsRegex(style.pattern);\n        if (column.text.match(regex)) {\n          column.style = style;\n\n          if (style.alias) {\n            column.title = column.text.replace(regex, style.alias);\n          }\n\n          break;\n        }\n      }\n\n      this.formatters[colIndex] = this.createColumnFormatter(column);\n    }\n  }\n\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n    for (let i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  createColumnFormatter(column) {\n    if (!column.style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (column.style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n\n    if (column.style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        let date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(column.style.dateFormat);\n      };\n    }\n\n    if (column.style.type === 'string') {\n      return v => {\n        if (_.isArray(v)) {\n          v = v.join(', ');\n        }\n\n        const mappingType = column.style.mappingType || 0;\n\n        if (mappingType === 1 && column.style.valueMaps) {\n          for (let i = 0; i < column.style.valueMaps.length; i++) {\n            const map = column.style.valueMaps[i];\n\n            if (v === null) {\n              if (map.value === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            // Allow both numeric and string values to be mapped\n            if ((!_.isString(v) && Number(map.value) === Number(v)) || map.value === v) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (mappingType === 2 && column.style.rangeMaps) {\n          for (let i = 0; i < column.style.rangeMaps.length; i++) {\n            const map = column.style.rangeMaps[i];\n\n            if (v === null) {\n              if (map.from === 'null' && map.to === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        this.setColorState(v, column.style);\n        return this.defaultCellFormatter(v, column.style);\n      };\n    }\n\n    if (column.style.type === 'number') {\n      const valueFormatter = kbn.valueFormats[column.unit || column.style.unit];\n\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (_.isString(v) || _.isArray(v)) {\n          return this.defaultCellFormatter(v, column.style);\n        }\n\n        this.setColorState(v, column.style);\n        return valueFormatter(v, column.style.decimals, null);\n      };\n    }\n\n    return value => {\n      return this.defaultCellFormatter(value, column.style);\n    };\n  }\n\n  setColorState(value, style) {\n    if (!style.colorMode) {\n      return;\n    }\n\n    if (value === null || value === void 0 || _.isArray(value)) {\n      return;\n    }\n\n    const numericValue = Number(value);\n    if (isNaN(numericValue)) {\n      return;\n    }\n\n    this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);\n  }\n\n  renderRowVariables(rowIndex) {\n    const scopedVars = {};\n    let cellVariable;\n    const row = this.table.rows[rowIndex];\n    for (let i = 0; i < row.length; i++) {\n      cellVariable = `__cell_${i}`;\n      scopedVars[cellVariable] = { value: row[i] };\n    }\n    return scopedVars;\n  }\n\n  formatColumnValue(colIndex, value) {\n    return this.formatters[colIndex] ? this.formatters[colIndex](value) : value;\n  }\n\n  renderCell(columnIndex, rowIndex, value, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n\n    const column = this.table.columns[columnIndex];\n    let style = '';\n    const cellClasses = [];\n    let cellClass = '';\n\n    if (this.colorState.cell) {\n      style = ' style=\"background-color:' + this.colorState.cell + '\"';\n      cellClasses.push('table-panel-color-cell');\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      style = ' style=\"color:' + this.colorState.value + '\"';\n      this.colorState.value = null;\n    }\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    let columnHtml = '';\n    if (addWidthHack) {\n      columnHtml = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].title + '</div>';\n    }\n\n    if (value === undefined) {\n      style = ' style=\"display:none;\"';\n      column.hidden = true;\n    } else {\n      column.hidden = false;\n    }\n\n    if (column.hidden === true) {\n      return '';\n    }\n\n    if (column.style && column.style.preserveFormat) {\n      cellClasses.push('table-panel-cell-pre');\n    }\n\n    if (column.style && column.style.link) {\n      // Render cell as link\n      const scopedVars = this.renderRowVariables(rowIndex);\n      scopedVars['__cell'] = { value: value };\n\n      const cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);\n      const cellLinkTooltip = this.templateSrv.replace(column.style.linkTooltip, scopedVars);\n      const cellTarget = column.style.linkTargetBlank ? '_blank' : '';\n\n      cellClasses.push('table-panel-cell-link');\n\n      columnHtml += `\n        <a href=\"${cellLink}\" target=\"${cellTarget}\" data-link-tooltip data-original-title=\"${cellLinkTooltip}\" data-placement=\"right\"${style}>\n          ${value}\n        </a>\n      `;\n    } else {\n      columnHtml += value;\n    }\n\n    if (column.filterable) {\n      cellClasses.push('table-panel-cell-filterable');\n      columnHtml += `\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"!=\">\n          <i class=\"fa fa-search-minus\"></i>\n        </a>\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"=\">\n          <i class=\"fa fa-search-plus\"></i>\n        </a>`;\n    }\n\n    if (cellClasses.length) {\n      cellClass = ' class=\"' + cellClasses.join(' ') + '\"';\n    }\n\n    columnHtml = '<td' + cellClass + style + '>' + columnHtml + '</td>';\n    return columnHtml;\n  }\n\n  render(page) {\n    const pageSize = this.panel.pageSize || 100;\n    const startPos = page * pageSize;\n    const endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    let html = '';\n    const rowClasses = [];\n    let rowClass = '';\n\n    for (let y = startPos; y < endPos; y++) {\n      const row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      for (let i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, y, row[i], y === startPos);\n      }\n\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + '\"';\n        rowClasses.push('table-panel-color-row');\n        this.colorState.row = null;\n      }\n\n      if (rowClasses.length) {\n        rowClass = ' class=\"' + rowClasses.join(' ') + '\"';\n      }\n\n      html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';\n    }\n\n    return html;\n  }\n\n  render_values() {\n    const rows = [];\n\n    for (let y = 0; y < this.table.rows.length; y++) {\n      const row = this.table.rows[y];\n      const newRow = [];\n      for (let i = 0; i < this.table.columns.length; i++) {\n        newRow.push(this.formatColumnValue(i, row[i]));\n      }\n      rows.push(newRow);\n    }\n    return {\n      columns: this.table.columns,\n      rows: rows,\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { transformDataToTable } from './transformers';\nimport { tablePanelEditor } from './editor';\nimport { columnOptionsTab } from './column_options';\nimport { TableRenderer } from './renderer';\n\nclass TablePanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  pageIndex: number;\n  dataRaw: any;\n  table: any;\n  renderer: any;\n\n  panelDefaults = {\n    targets: [{}],\n    transform: 'timeseries_to_columns',\n    pageSize: null,\n    showHeader: true,\n    styles: [\n      {\n        type: 'date',\n        pattern: 'Time',\n        alias: 'Time',\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      },\n      {\n        unit: 'short',\n        type: 'number',\n        alias: '',\n        decimals: 2,\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n        colorMode: null,\n        pattern: '/.*/',\n        thresholds: [],\n      },\n    ],\n    columns: [],\n    scroll: true,\n    fontSize: '100%',\n    sort: { col: 0, desc: true },\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, private annotationsSrv, private $sanitize, private variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', tablePanelEditor, 2);\n    this.addEditorTab('Column Styles', columnOptionsTab, 3);\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    this.dataRaw = dataList;\n    this.pageIndex = 0;\n\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (this.dataRaw[0].type === 'table') {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    this.table.sort(this.panel.sort);\n\n    this.renderer = new TableRenderer(\n      this.panel,\n      this.table,\n      this.dashboard.isTimezoneUtc(),\n      this.$sanitize,\n      this.templateSrv\n    );\n\n    return super.render(this.table);\n  }\n\n  toggleColumnSort(col, colIndex) {\n    // remove sort flag from current column\n    if (this.table.columns[this.panel.sort.col]) {\n      this.table.columns[this.panel.sort.col].sort = false;\n    }\n\n    if (this.panel.sort.col === colIndex) {\n      if (this.panel.sort.desc) {\n        this.panel.sort.desc = false;\n      } else {\n        this.panel.sort.col = null;\n      }\n    } else {\n      this.panel.sort.col = colIndex;\n      this.panel.sort.desc = true;\n    }\n    this.render();\n  }\n\n  moveQuery(target, direction) {\n    super.moveQuery(target, direction);\n    super.refresh();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.tableData = this.renderer.render_values();\n    scope.panel = 'table';\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal panel=\"panel\" data=\"tableData\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  link(scope, elem, attrs, ctrl: TablePanelCtrl) {\n    let data;\n    const panel = ctrl.panel;\n    let pageCount = 0;\n\n    function getTableHeight() {\n      let panelHeight = ctrl.height;\n\n      if (pageCount > 1) {\n        panelHeight -= 26;\n      }\n\n      return panelHeight - 31 + 'px';\n    }\n\n    function appendTableRows(tbodyElem) {\n      ctrl.renderer.setTable(data);\n      tbodyElem.empty();\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\n    }\n\n    function switchPage(e) {\n      const el = $(e.currentTarget);\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\n      renderPanel();\n    }\n\n    function appendPaginationControls(footerElem) {\n      footerElem.empty();\n\n      const pageSize = panel.pageSize || 100;\n      pageCount = Math.ceil(data.rows.length / pageSize);\n      if (pageCount === 1) {\n        return;\n      }\n\n      const startPage = Math.max(ctrl.pageIndex - 3, 0);\n      const endPage = Math.min(pageCount, startPage + 9);\n\n      const paginationList = $('<ul></ul>');\n\n      for (let i = startPage; i < endPage; i++) {\n        const activeClass = i === ctrl.pageIndex ? 'active' : '';\n        const pageLinkElem = $(\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\n        );\n        paginationList.append(pageLinkElem);\n      }\n\n      footerElem.append(paginationList);\n    }\n\n    function renderPanel() {\n      const panelElem = elem.parents('.panel-content');\n      const rootElem = elem.find('.table-panel-scroll');\n      const tbodyElem = elem.find('tbody');\n      const footerElem = elem.find('.table-panel-footer');\n\n      elem.css({ 'font-size': panel.fontSize });\n      panelElem.addClass('table-panel-content');\n\n      appendTableRows(tbodyElem);\n      appendPaginationControls(footerElem);\n\n      rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });\n    }\n\n    // hook up link tooltips\n    elem.tooltip({\n      selector: '[data-link-tooltip]',\n    });\n\n    function addFilterClicked(e) {\n      const filterData = $(e.currentTarget).data();\n      const options = {\n        datasource: panel.datasource,\n        key: data.columns[filterData.column].text,\n        value: data.rows[filterData.row][filterData.column],\n        operator: filterData.operator,\n      };\n\n      ctrl.variableSrv.setAdhocFilter(options);\n    }\n\n    elem.on('click', '.table-panel-page-link', switchPage);\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\n\n    const unbindDestroy = scope.$on('$destroy', () => {\n      elem.off('click', '.table-panel-page-link');\n      elem.off('click', '.table-panel-filter-link');\n      unbindDestroy();\n    });\n\n    ctrl.events.on('render', renderData => {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nexport { TablePanelCtrl, TablePanelCtrl as PanelCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class LinkSrv {\n  /** @ngInject */\n  constructor(private templateSrv, private timeSrv) {}\n\n  getLinkUrl(link) {\n    const url = this.templateSrv.replace(link.url || '');\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    return this.addParamsToUrl(url, params);\n  }\n\n  addParamsToUrl(url, params) {\n    const paramsArray = [];\n\n    _.each(params, (value, key) => {\n      if (value === null) {\n        return;\n      }\n      if (value === true) {\n        paramsArray.push(key);\n      } else if (_.isArray(value)) {\n        _.each(value, instance => {\n          paramsArray.push(key + '=' + encodeURIComponent(instance));\n        });\n      } else {\n        paramsArray.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (paramsArray.length === 0) {\n      return url;\n    }\n\n    return this.appendToQueryString(url, paramsArray.join('&'));\n  }\n\n  appendToQueryString(url, stringToAppend) {\n    if (!_.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {\n      const pos = url.indexOf('?');\n      if (pos !== -1) {\n        if (url.length - pos > 1) {\n          url += '&';\n        }\n      } else {\n        url += '?';\n      }\n      url += stringToAppend;\n    }\n\n    return url;\n  }\n\n  getAnchorInfo(link) {\n    const info: any = {};\n    info.href = this.getLinkUrl(link);\n    info.title = this.templateSrv.replace(link.title || '');\n    return info;\n  }\n\n  getPanelLinkAnchorInfo(link, scopedVars) {\n    const info: any = {};\n    if (link.type === 'absolute') {\n      info.target = link.targetBlank ? '_blank' : '_self';\n      info.href = this.templateSrv.replace(link.url || '', scopedVars);\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n    } else if (link.url) {\n      info.href = link.url;\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else if (link.dashUri) {\n      info.href = 'dashboard/' + link.dashUri + '?';\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else {\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      const slug = kbn.slugifyForUrl(link.dashboard || '');\n      info.href = 'dashboard/db/' + slug + '?';\n    }\n\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params, scopedVars);\n    }\n\n    info.href = this.addParamsToUrl(info.href, params);\n\n    if (link.params) {\n      info.href = this.appendToQueryString(info.href, this.templateSrv.replace(link.params, scopedVars));\n    }\n\n    return info;\n  }\n}\n\nangular.module('grafana.services').service('linkSrv', LinkSrv);\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.gauge';\nimport 'app/features/dashboard/panellinks/link_srv';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nclass SingleStatCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  dataType = 'timeseries';\n  series: any[];\n  data: any;\n  fontSizes: any[];\n  unitFormats: any[];\n  invalidGaugeRange: boolean;\n  panel: any;\n  events: any;\n  valueNameOptions: any[] = [\n    { value: 'min', text: 'Min' },\n    { value: 'max', text: 'Max' },\n    { value: 'avg', text: 'Average' },\n    { value: 'current', text: 'Current' },\n    { value: 'total', text: 'Total' },\n    { value: 'name', text: 'Name' },\n    { value: 'first', text: 'First' },\n    { value: 'delta', text: 'Delta' },\n    { value: 'diff', text: 'Difference' },\n    { value: 'range', text: 'Range' },\n    { value: 'last_time', text: 'Time of last point' },\n  ];\n  tableColumnOptions: any;\n\n  // Set and populate defaults\n  panelDefaults = {\n    links: [],\n    datasource: null,\n    maxDataPoints: 100,\n    interval: null,\n    targets: [{}],\n    cacheTimeout: null,\n    format: 'none',\n    prefix: '',\n    postfix: '',\n    nullText: null,\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\n    mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\n    mappingType: 1,\n    nullPointMode: 'connected',\n    valueName: 'avg',\n    prefixFontSize: '50%',\n    valueFontSize: '80%',\n    postfixFontSize: '50%',\n    thresholds: '',\n    colorBackground: false,\n    colorValue: false,\n    colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\n    sparkline: {\n      show: false,\n      full: false,\n      lineColor: 'rgb(31, 120, 193)',\n      fillColor: 'rgba(31, 118, 189, 0.18)',\n    },\n    gauge: {\n      show: false,\n      minValue: 0,\n      maxValue: 100,\n      thresholdMarkers: true,\n      thresholdLabels: false,\n    },\n    tableColumn: '',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private linkSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n    this.addEditorTab('Options', 'public/app/plugins/panel/singlestat/editor.html', 2);\n    this.addEditorTab('Value Mappings', 'public/app/plugins/panel/singlestat/mappings.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    const data: any = {};\n    if (dataList.length > 0 && dataList[0].type === 'table') {\n      this.dataType = 'table';\n      const tableData = dataList.map(this.tableHandler.bind(this));\n      this.setTableValues(tableData, data);\n    } else {\n      this.dataType = 'timeseries';\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.setValues(data);\n    }\n    this.data = data;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  tableHandler(tableData) {\n    const datapoints = [];\n    const columnNames = {};\n\n    tableData.columns.forEach((column, columnIndex) => {\n      columnNames[columnIndex] = column.text;\n    });\n\n    this.tableColumnOptions = columnNames;\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\n      this.setTableColumnToSensibleDefault(tableData);\n    }\n\n    tableData.rows.forEach(row => {\n      const datapoint = {};\n\n      row.forEach((value, columnIndex) => {\n        const key = columnNames[columnIndex];\n        datapoint[key] = value;\n      });\n\n      datapoints.push(datapoint);\n    });\n\n    return datapoints;\n  }\n\n  setTableColumnToSensibleDefault(tableData) {\n    if (tableData.columns.length === 1) {\n      this.panel.tableColumn = tableData.columns[0].text;\n    } else {\n      this.panel.tableColumn = _.find(tableData.columns, col => {\n        return col.type !== 'time';\n      }).text;\n    }\n  }\n\n  setTableValues(tableData, data) {\n    if (!tableData || tableData.length === 0) {\n      return;\n    }\n\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\n      return;\n    }\n\n    const datapoint = tableData[0][0];\n    data.value = datapoint[this.panel.tableColumn];\n\n    if (_.isString(data.value)) {\n      data.valueFormatted = _.escape(data.value);\n      data.value = 0;\n      data.valueRounded = 0;\n    } else {\n      const decimalInfo = this.getDecimalsForValue(data.value);\n      const formatFunc = kbn.valueFormats[this.panel.format];\n      data.valueFormatted = formatFunc(\n        datapoint[this.panel.tableColumn],\n        decimalInfo.decimals,\n        decimalInfo.scaledDecimals\n      );\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\n    }\n\n    this.setValueMapping(data);\n  }\n\n  canModifyText() {\n    return !this.panel.gauge.show;\n  }\n\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    const tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    const delta = value / 2;\n    let dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    const magn = Math.pow(10, -dec);\n    const norm = delta / magn; // norm is between 1.0 and 10.0\n    let size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) {\n      dec = 0;\n    }\n\n    const result: any = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n\n    if (this.series.length > 1) {\n      const error: any = new Error();\n      error.message = 'Multiple Series Error';\n      error.data =\n        'Metric query returns ' +\n        this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' +\n        JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      const lastPoint = _.last(this.series[0].datapoints);\n      const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.valueName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else if (this.panel.valueName === 'last_time') {\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.value = lastPoint[1];\n        data.valueRounded = data.value;\n        data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());\n      } else {\n        data.value = this.series[0].stats[this.panel.valueName];\n        data.flotpairs = this.series[0].flotpairs;\n\n        const decimalInfo = this.getDecimalsForValue(data.value);\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = _.extend({}, this.panel.scopedVars);\n      data.scopedVars['__name'] = { value: this.series[0].label };\n    }\n    this.setValueMapping(data);\n  }\n\n  setValueMapping(data) {\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (let i = 0; i < this.panel.valueMaps.length; i++) {\n        const map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        const value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (let i = 0; i < this.panel.rangeMaps.length; i++) {\n        const map = this.panel.rangeMaps[i];\n        // special null case\n        if (map.from === 'null' && map.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        const from = parseFloat(map.from);\n        const to = parseFloat(map.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = 'no value';\n    }\n  }\n\n  removeValueMap(map) {\n    const index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    const index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $location = this.$location;\n    const linkSrv = this.linkSrv;\n    const $timeout = this.$timeout;\n    const panel = ctrl.panel;\n    const templateSrv = this.templateSrv;\n    let data, linkInfo;\n    const $panelContainer = elem.find('.panel-container');\n    elem = elem.find('.singlestat-panel');\n\n    function applyColoringThresholds(value, valueString) {\n      const color = getColorForValue(data, value);\n      if (color) {\n        return '<span style=\"color:' + color + '\">' + valueString + '</span>';\n      }\n\n      return valueString;\n    }\n\n    function getSpan(className, fontSize, value) {\n      value = templateSrv.replace(value, data.scopedVars);\n      return '<span class=\"' + className + '\" style=\"font-size:' + fontSize + '\">' + value + '</span>';\n    }\n\n    function getBigValueHtml() {\n      let body = '<div class=\"singlestat-panel-value-container\">';\n\n      if (panel.prefix) {\n        let prefix = panel.prefix;\n        if (panel.colorPrefix) {\n          prefix = applyColoringThresholds(data.value, panel.prefix);\n        }\n        body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);\n      }\n\n      let value = data.valueFormatted;\n      if (panel.colorValue) {\n        value = applyColoringThresholds(data.value, value);\n      }\n      body += getSpan('singlestat-panel-value', panel.valueFontSize, value);\n\n      if (panel.postfix) {\n        let postfix = panel.postfix;\n        if (panel.colorPostfix) {\n          postfix = applyColoringThresholds(data.value, panel.postfix);\n        }\n        body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);\n      }\n\n      body += '</div>';\n\n      return body;\n    }\n\n    function getValueText() {\n      let result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';\n      result += data.valueFormatted;\n      result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';\n\n      return result;\n    }\n\n    function addGauge() {\n      const width = elem.width();\n      const height = elem.height();\n      // Allow to use a bit more space for wide gauges\n      const dimension = Math.min(width, height * 1.3);\n\n      ctrl.invalidGaugeRange = false;\n      if (panel.gauge.minValue > panel.gauge.maxValue) {\n        ctrl.invalidGaugeRange = true;\n        return;\n      }\n\n      const plotCanvas = $('<div></div>');\n      const plotCss = {\n        top: '10px',\n        margin: 'auto',\n        position: 'relative',\n        height: height * 0.9 + 'px',\n        width: dimension + 'px',\n      };\n\n      plotCanvas.css(plotCss);\n\n      const thresholds = [];\n      for (let i = 0; i < data.thresholds.length; i++) {\n        thresholds.push({\n          value: data.thresholds[i],\n          color: data.colorMap[i],\n        });\n      }\n      thresholds.push({\n        value: panel.gauge.maxValue,\n        color: data.colorMap[data.colorMap.length - 1],\n      });\n\n      const bgColor = config.bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';\n\n      const fontScale = parseInt(panel.valueFontSize, 10) / 100;\n      const fontSize = Math.min(dimension / 5, 100) * fontScale;\n      // Reduce gauge width if threshold labels enabled\n      const gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;\n      const gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;\n      const thresholdMarkersWidth = gaugeWidth / 5;\n      const thresholdLabelFontSize = fontSize / 2.5;\n\n      const options = {\n        series: {\n          gauges: {\n            gauge: {\n              min: panel.gauge.minValue,\n              max: panel.gauge.maxValue,\n              background: { color: bgColor },\n              border: { color: null },\n              shadow: { show: false },\n              width: gaugeWidth,\n            },\n            frame: { show: false },\n            label: { show: false },\n            layout: { margin: 0, thresholdWidth: 0 },\n            cell: { border: { width: 0 } },\n            threshold: {\n              values: thresholds,\n              label: {\n                show: panel.gauge.thresholdLabels,\n                margin: thresholdMarkersWidth + 1,\n                font: { size: thresholdLabelFontSize },\n              },\n              show: panel.gauge.thresholdMarkers,\n              width: thresholdMarkersWidth,\n            },\n            value: {\n              color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,\n              formatter: () => {\n                return getValueText();\n              },\n              font: {\n                size: fontSize,\n                family: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n              },\n            },\n            show: true,\n          },\n        },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: [[0, data.value]],\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function addSparkline() {\n      const width = elem.width() + 20;\n      if (width < 30) {\n        // element has not gotten it's width yet\n        // delay sparkline render\n        setTimeout(addSparkline, 30);\n        return;\n      }\n\n      const height = ctrl.height;\n      const plotCanvas = $('<div></div>');\n      const plotCss: any = {};\n      plotCss.position = 'absolute';\n\n      if (panel.sparkline.full) {\n        plotCss.bottom = '5px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        const dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\n        plotCss.height = height - dynamicHeightMargin + 'px';\n      } else {\n        plotCss.bottom = '0px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        plotCss.height = Math.floor(height * 0.25) + 'px';\n      }\n\n      plotCanvas.css(plotCss);\n\n      const options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            zero: false,\n            lineWidth: 1,\n            fillColor: panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: data.flotpairs,\n        color: panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function render() {\n      if (!ctrl.data) {\n        return;\n      }\n      data = ctrl.data;\n\n      // get thresholds\n      data.thresholds = panel.thresholds.split(',').map(strVale => {\n        return Number(strVale.trim());\n      });\n      data.colorMap = panel.colors;\n\n      const body = panel.gauge.show ? '' : getBigValueHtml();\n\n      if (panel.colorBackground) {\n        const color = getColorForValue(data, data.value);\n        if (color) {\n          $panelContainer.css('background-color', color);\n          if (scope.fullscreen) {\n            elem.css('background-color', color);\n          } else {\n            elem.css('background-color', '');\n          }\n        }\n      } else {\n        $panelContainer.css('background-color', '');\n        elem.css('background-color', '');\n      }\n\n      elem.html(body);\n\n      if (panel.sparkline.show) {\n        addSparkline();\n      }\n\n      if (panel.gauge.show) {\n        addGauge();\n      }\n\n      elem.toggleClass('pointer', panel.links.length > 0);\n\n      if (panel.links.length > 0) {\n        linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);\n      } else {\n        linkInfo = null;\n      }\n    }\n\n    function hookupDrilldownLinkTooltip() {\n      // drilldown link tooltip\n      const drilldownTooltip = $('<div id=\"tooltip\" class=\"\">hello</div>\"');\n\n      elem.mouseleave(() => {\n        if (panel.links.length === 0) {\n          return;\n        }\n        $timeout(() => {\n          drilldownTooltip.detach();\n        });\n      });\n\n      elem.click(evt => {\n        if (!linkInfo) {\n          return;\n        }\n        // ignore title clicks in title\n        if ($(evt).parents('.panel-header').length > 0) {\n          return;\n        }\n\n        if (linkInfo.target === '_blank') {\n          window.open(linkInfo.href, '_blank');\n          return;\n        }\n\n        if (linkInfo.href.indexOf('http') === 0) {\n          window.location.href = linkInfo.href;\n        } else {\n          $timeout(() => {\n            $location.url(linkInfo.href);\n          });\n        }\n\n        drilldownTooltip.detach();\n      });\n\n      elem.mousemove(e => {\n        if (!linkInfo) {\n          return;\n        }\n\n        drilldownTooltip.text('click to go to: ' + linkInfo.title);\n        drilldownTooltip.place_tt(e.pageX, e.pageY - 50);\n      });\n    }\n\n    hookupDrilldownLinkTooltip();\n\n    this.events.on('render', () => {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nfunction getColorForValue(data, value) {\n  if (!_.isFinite(value)) {\n    return null;\n  }\n\n  for (let i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i - 1]) {\n      return data.colorMap[i];\n    }\n  }\n\n  return _.first(data.colorMap);\n}\n\nexport { SingleStatCtrl, SingleStatCtrl as PanelCtrl, getColorForValue };\n","import { PanelCtrl } from 'app/plugins/sdk';\n\nimport { contextSrv } from 'app/core/core';\n\nclass GettingStartedPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/gettingstarted/module.html';\n  checksDone: boolean;\n  stepIndex: number;\n  steps: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, datasourceSrv, private $q) {\n    super($scope, $injector);\n\n    this.stepIndex = 0;\n    this.steps = [];\n\n    this.steps.push({\n      title: 'Install Grafana',\n      icon: 'icon-gf icon-gf-check',\n      href: 'http://docs.grafana.org/',\n      target: '_blank',\n      note: 'Review the installation docs',\n      check: () => $q.when(true),\n    });\n\n    this.steps.push({\n      title: 'Create your first data source',\n      cta: 'Add data source',\n      icon: 'icon-gf icon-gf-datasources',\n      href: 'datasources/new?gettingstarted',\n      check: () => {\n        return $q.when(\n          datasourceSrv.getMetricSources().filter(item => {\n            return item.meta.builtIn !== true;\n          }).length > 0\n        );\n      },\n    });\n\n    this.steps.push({\n      title: 'Create your first dashboard',\n      cta: 'New dashboard',\n      icon: 'icon-gf icon-gf-dashboard',\n      href: 'dashboard/new?gettingstarted',\n      check: () => {\n        return this.backendSrv.search({ limit: 1 }).then(result => {\n          return result.length > 0;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: 'Invite your team',\n      cta: 'Add Users',\n      icon: 'icon-gf icon-gf-users',\n      href: 'org/users?gettingstarted',\n      check: () => {\n        return this.backendSrv.get('/api/org/users').then(res => {\n          return res.length > 1;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: 'Install apps & plugins',\n      cta: 'Explore plugin repository',\n      icon: 'icon-gf icon-gf-apps',\n      href: 'https://grafana.com/plugins?utm_source=grafana_getting_started',\n      check: () => {\n        return this.backendSrv.get('/api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n          return plugins.length > 0;\n        });\n      },\n    });\n  }\n\n  $onInit() {\n    this.stepIndex = -1;\n    return this.nextStep().then(res => {\n      this.checksDone = true;\n    });\n  }\n\n  nextStep() {\n    if (this.stepIndex === this.steps.length - 1) {\n      return this.$q.when();\n    }\n\n    this.stepIndex += 1;\n    const currentStep = this.steps[this.stepIndex];\n    return currentStep.check().then(passed => {\n      if (passed) {\n        currentStep.cssClass = 'completed';\n        return this.nextStep();\n      }\n\n      currentStep.cssClass = 'active';\n      return this.$q.when();\n    });\n  }\n\n  dismiss() {\n    this.dashboard.removePanel(this.panel, false);\n\n    this.backendSrv\n      .request({\n        method: 'PUT',\n        url: '/api/user/helpflags/1',\n        showSuccessAlert: false,\n      })\n      .then(res => {\n        contextSrv.user.helpFlags1 = res.helpFlags1;\n      });\n  }\n}\n\nexport { GettingStartedPanelCtrl, GettingStartedPanelCtrl as PanelCtrl };\n","import * as graphitePlugin from 'app/plugins/datasource/graphite/module';\nimport * as cloudwatchPlugin from 'app/plugins/datasource/cloudwatch/module';\nimport * as elasticsearchPlugin from 'app/plugins/datasource/elasticsearch/module';\nimport * as opentsdbPlugin from 'app/plugins/datasource/opentsdb/module';\nimport * as grafanaPlugin from 'app/plugins/datasource/grafana/module';\nimport * as influxdbPlugin from 'app/plugins/datasource/influxdb/module';\nimport * as loggingPlugin from 'app/plugins/datasource/logging/module';\nimport * as mixedPlugin from 'app/plugins/datasource/mixed/module';\nimport * as mysqlPlugin from 'app/plugins/datasource/mysql/module';\nimport * as postgresPlugin from 'app/plugins/datasource/postgres/module';\nimport * as prometheusPlugin from 'app/plugins/datasource/prometheus/module';\nimport * as mssqlPlugin from 'app/plugins/datasource/mssql/module';\nimport * as testDataDSPlugin from 'app/plugins/datasource/testdata/module';\nimport * as stackdriverPlugin from 'app/plugins/datasource/stackdriver/module';\n\nimport * as textPanel from 'app/plugins/panel/text/module';\nimport * as graphPanel from 'app/plugins/panel/graph/module';\nimport * as dashListPanel from 'app/plugins/panel/dashlist/module';\nimport * as pluginsListPanel from 'app/plugins/panel/pluginlist/module';\nimport * as alertListPanel from 'app/plugins/panel/alertlist/module';\nimport * as heatmapPanel from 'app/plugins/panel/heatmap/module';\nimport * as tablePanel from 'app/plugins/panel/table/module';\nimport * as singlestatPanel from 'app/plugins/panel/singlestat/module';\nimport * as gettingStartedPanel from 'app/plugins/panel/gettingstarted/module';\n\nconst builtInPlugins = {\n  'app/plugins/datasource/graphite/module': graphitePlugin,\n  'app/plugins/datasource/cloudwatch/module': cloudwatchPlugin,\n  'app/plugins/datasource/elasticsearch/module': elasticsearchPlugin,\n  'app/plugins/datasource/opentsdb/module': opentsdbPlugin,\n  'app/plugins/datasource/grafana/module': grafanaPlugin,\n  'app/plugins/datasource/influxdb/module': influxdbPlugin,\n  'app/plugins/datasource/logging/module': loggingPlugin,\n  'app/plugins/datasource/mixed/module': mixedPlugin,\n  'app/plugins/datasource/mysql/module': mysqlPlugin,\n  'app/plugins/datasource/postgres/module': postgresPlugin,\n  'app/plugins/datasource/mssql/module': mssqlPlugin,\n  'app/plugins/datasource/prometheus/module': prometheusPlugin,\n  'app/plugins/datasource/testdata/module': testDataDSPlugin,\n  'app/plugins/datasource/stackdriver/module': stackdriverPlugin,\n\n  'app/plugins/panel/text/module': textPanel,\n  'app/plugins/panel/graph/module': graphPanel,\n  'app/plugins/panel/dashlist/module': dashListPanel,\n  'app/plugins/panel/pluginlist/module': pluginsListPanel,\n  'app/plugins/panel/alertlist/module': alertListPanel,\n  'app/plugins/panel/heatmap/module': heatmapPanel,\n  'app/plugins/panel/table/module': tablePanel,\n  'app/plugins/panel/singlestat/module': singlestatPanel,\n  'app/plugins/panel/gettingstarted/module': gettingStartedPanel,\n};\n\nexport default builtInPlugins;\n","import System from 'systemjs/dist/system.js';\nimport _ from 'lodash';\nimport * as sdk from 'app/plugins/sdk';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport angular from 'angular';\nimport jquery from 'jquery';\n\n// Experimental module exports\nimport prismjs from 'prismjs';\nimport slate from 'slate';\nimport slateReact from 'slate-react';\nimport slatePlain from 'slate-plain-serializer';\nimport react from 'react';\nimport reactDom from 'react-dom';\n\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\nimport { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport * as datemath from 'app/core/utils/datemath';\nimport * as fileExport from 'app/core/utils/file_export';\nimport * as flatten from 'app/core/utils/flatten';\nimport * as ticks from 'app/core/utils/ticks';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport builtInPlugins from './built_in_plugins';\nimport * as d3 from 'd3';\n\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n// these imports add functions to Observable\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/combineAll';\n\n// add cache busting\nconst bust = `?_cache=${Date.now()}`;\nfunction locate(load) {\n  return load.address + bust;\n}\nSystem.registry.set('plugin-loader', System.newModule({ locate: locate }));\n\nSystem.config({\n  baseURL: 'public',\n  defaultExtension: 'js',\n  packages: {\n    plugins: {\n      defaultExtension: 'js',\n    },\n  },\n  map: {\n    text: 'vendor/plugin-text/text.js',\n    css: 'vendor/plugin-css/css.js',\n  },\n  meta: {\n    '/*': {\n      esModule: true,\n      authorization: true,\n      loader: 'plugin-loader',\n    },\n  },\n});\n\nfunction exposeToPlugin(name: string, component: any) {\n  System.registerDynamic(name, [], true, (require, exports, module) => {\n    module.exports = component;\n  });\n}\n\nexposeToPlugin('lodash', _);\nexposeToPlugin('moment', moment);\nexposeToPlugin('jquery', jquery);\nexposeToPlugin('angular', angular);\nexposeToPlugin('d3', d3);\nexposeToPlugin('rxjs/Subject', Subject);\nexposeToPlugin('rxjs/Observable', Observable);\n\n// Experimental modules\nexposeToPlugin('prismjs', prismjs);\nexposeToPlugin('slate', slate);\nexposeToPlugin('slate-react', slateReact);\nexposeToPlugin('slate-plain-serializer', slatePlain);\nexposeToPlugin('react', react);\nexposeToPlugin('react-dom', reactDom);\n\n// backward compatible path\nexposeToPlugin('vendor/npm/rxjs/Rx', {\n  Subject: Subject,\n  Observable: Observable,\n});\n\nexposeToPlugin('app/features/dashboard/impression_store', {\n  impressions: impressionSrv,\n  __esModule: true,\n});\n\nexposeToPlugin('app/plugins/sdk', sdk);\nexposeToPlugin('app/core/utils/datemath', datemath);\nexposeToPlugin('app/core/utils/file_export', fileExport);\nexposeToPlugin('app/core/utils/flatten', flatten);\nexposeToPlugin('app/core/utils/kbn', kbn);\nexposeToPlugin('app/core/utils/ticks', ticks);\n\nexposeToPlugin('app/core/config', config);\nexposeToPlugin('app/core/time_series', TimeSeries);\nexposeToPlugin('app/core/time_series2', TimeSeries);\nexposeToPlugin('app/core/table_model', TableModel);\nexposeToPlugin('app/core/app_events', appEvents);\nexposeToPlugin('app/core/core_module', coreModule);\nexposeToPlugin('app/core/core', {\n  coreModule: coreModule,\n  appEvents: appEvents,\n  contextSrv: contextSrv,\n  __esModule: true,\n});\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.pie';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport 'vendor/flot/jquery.flot.gauge';\n\nconst flotDeps = [\n  'jquery.flot',\n  'jquery.flot.pie',\n  'jquery.flot.time',\n  'jquery.flot.fillbelow',\n  'jquery.flot.crosshair',\n  'jquery.flot.stack',\n  'jquery.flot.selection',\n  'jquery.flot.stackpercent',\n  'jquery.flot.events',\n  'jquery.flot.gauge',\n];\nfor (const flotDep of flotDeps) {\n  exposeToPlugin(flotDep, { fakeDep: 1 });\n}\n\nexport function importPluginModule(path: string): Promise<any> {\n  const builtIn = builtInPlugins[path];\n  if (builtIn) {\n    return Promise.resolve(builtIn);\n  }\n  return System.import(path);\n}\n\nexport function loadPluginCss(options) {\n  if (config.bootData.user.lightTheme) {\n    System.import(options.light + '!css');\n  } else {\n    System.import(options.dark + '!css');\n  }\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport config from 'app/core/config';\nimport { importPluginModule } from './plugin_loader';\n\nexport class DatasourceSrv {\n  datasources: any;\n\n  /** @ngInject */\n  constructor(private $q, private $injector, private $rootScope, private templateSrv) {\n    this.init();\n  }\n\n  init() {\n    this.datasources = {};\n  }\n\n  get(name?) {\n    if (!name) {\n      return this.get(config.defaultDatasource);\n    }\n\n    name = this.templateSrv.replace(name);\n\n    if (name === 'default') {\n      return this.get(config.defaultDatasource);\n    }\n\n    if (this.datasources[name]) {\n      return this.$q.when(this.datasources[name]);\n    }\n\n    return this.loadDatasource(name);\n  }\n\n  loadDatasource(name) {\n    const dsConfig = config.datasources[name];\n    if (!dsConfig) {\n      return this.$q.reject({ message: 'Datasource named ' + name + ' was not found' });\n    }\n\n    const deferred = this.$q.defer();\n    const pluginDef = dsConfig.meta;\n\n    importPluginModule(pluginDef.module)\n      .then(plugin => {\n        // check if its in cache now\n        if (this.datasources[name]) {\n          deferred.resolve(this.datasources[name]);\n          return;\n        }\n\n        // plugin module needs to export a constructor function named Datasource\n        if (!plugin.Datasource) {\n          throw new Error('Plugin module is missing Datasource constructor');\n        }\n\n        const instance = this.$injector.instantiate(plugin.Datasource, { instanceSettings: dsConfig });\n        instance.meta = pluginDef;\n        instance.name = name;\n        this.datasources[name] = instance;\n        deferred.resolve(instance);\n      })\n      .catch(err => {\n        this.$rootScope.appEvent('alert-error', [dsConfig.name + ' plugin failed', err.toString()]);\n      });\n\n    return deferred.promise;\n  }\n\n  getAll() {\n    return config.datasources;\n  }\n\n  getAnnotationSources() {\n    const sources = [];\n\n    this.addDataSourceVariables(sources);\n\n    _.each(config.datasources, value => {\n      if (value.meta && value.meta.annotations) {\n        sources.push(value);\n      }\n    });\n\n    return sources;\n  }\n\n  getExploreSources() {\n    const { datasources } = config;\n    const es = Object.keys(datasources)\n      .map(name => datasources[name])\n      .filter(ds => ds.meta && ds.meta.explore);\n    return _.sortBy(es, ['name']);\n  }\n\n  getMetricSources(options) {\n    const metricSources = [];\n\n    _.each(config.datasources, (value, key) => {\n      if (value.meta && value.meta.metrics) {\n        let metricSource = { value: key, name: key, meta: value.meta, sort: key };\n\n        //Make sure grafana and mixed are sorted at the bottom\n        if (value.meta.id === 'grafana') {\n          metricSource.sort = String.fromCharCode(253);\n        } else if (value.meta.id === 'mixed') {\n          metricSource.sort = String.fromCharCode(254);\n        }\n\n        metricSources.push(metricSource);\n\n        if (key === config.defaultDatasource) {\n          metricSource = { value: null, name: 'default', meta: value.meta, sort: key };\n          metricSources.push(metricSource);\n        }\n      }\n    });\n\n    if (!options || !options.skipVariables) {\n      this.addDataSourceVariables(metricSources);\n    }\n\n    metricSources.sort((a, b) => {\n      if (a.sort.toLowerCase() > b.sort.toLowerCase()) {\n        return 1;\n      }\n      if (a.sort.toLowerCase() < b.sort.toLowerCase()) {\n        return -1;\n      }\n      return 0;\n    });\n\n    return metricSources;\n  }\n\n  addDataSourceVariables(list) {\n    // look for data source variables\n    for (let i = 0; i < this.templateSrv.variables.length; i++) {\n      const variable = this.templateSrv.variables[i];\n      if (variable.type !== 'datasource') {\n        continue;\n      }\n\n      let first = variable.current.value;\n      if (first === 'default') {\n        first = config.defaultDatasource;\n      }\n\n      const ds = config.datasources[first];\n\n      if (ds) {\n        const key = `$${variable.name}`;\n        list.push({\n          name: key,\n          value: key,\n          meta: ds.meta,\n          sort: key,\n        });\n      }\n    }\n  }\n}\n\ncoreModule.service('datasourceSrv', DatasourceSrv);\nexport default DatasourceSrv;\n","import angular from 'angular';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport { importPluginModule } from './plugin_loader';\n\nimport { UnknownPanelCtrl } from 'app/plugins/panel/unknown/module';\n\n/** @ngInject */\nfunction pluginDirectiveLoader($compile, datasourceSrv, $rootScope, $q, $http, $templateCache) {\n  function getTemplate(component) {\n    if (component.template) {\n      return $q.when(component.template);\n    }\n    const cached = $templateCache.get(component.templateUrl);\n    if (cached) {\n      return $q.when(cached);\n    }\n    return $http.get(component.templateUrl).then(res => {\n      return res.data;\n    });\n  }\n\n  function relativeTemplateUrlToAbs(templateUrl, baseUrl) {\n    if (!templateUrl) {\n      return undefined;\n    }\n    if (templateUrl.indexOf('public') === 0) {\n      return templateUrl;\n    }\n    return baseUrl + '/' + templateUrl;\n  }\n\n  function getPluginComponentDirective(options) {\n    // handle relative template urls for plugin templates\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\n\n    return () => {\n      return {\n        templateUrl: options.Component.templateUrl,\n        template: options.Component.template,\n        restrict: 'E',\n        controller: options.Component,\n        controllerAs: 'ctrl',\n        bindToController: true,\n        scope: options.bindings,\n        link: (scope, elem, attrs, ctrl) => {\n          if (ctrl.link) {\n            ctrl.link(scope, elem, attrs, ctrl);\n          }\n          if (ctrl.init) {\n            ctrl.init();\n          }\n        },\n      };\n    };\n  }\n\n  function loadPanelComponentInfo(scope, attrs) {\n    const componentInfo: any = {\n      name: 'panel-plugin-' + scope.panel.type,\n      bindings: { dashboard: '=', panel: '=', row: '=' },\n      attrs: {\n        dashboard: 'dashboard',\n        panel: 'panel',\n        class: 'panel-height-helper',\n      },\n    };\n\n    const panelInfo = config.panels[scope.panel.type];\n    let panelCtrlPromise = Promise.resolve(UnknownPanelCtrl);\n    if (panelInfo) {\n      panelCtrlPromise = importPluginModule(panelInfo.module).then(panelModule => {\n        return panelModule.PanelCtrl;\n      });\n    }\n\n    return panelCtrlPromise.then((PanelCtrl: any) => {\n      componentInfo.Component = PanelCtrl;\n\n      if (!PanelCtrl || PanelCtrl.registered) {\n        return componentInfo;\n      }\n\n      if (PanelCtrl.templatePromise) {\n        return PanelCtrl.templatePromise.then(res => {\n          return componentInfo;\n        });\n      }\n\n      if (panelInfo) {\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\n      }\n\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(template => {\n        PanelCtrl.templateUrl = null;\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\n        return componentInfo;\n      });\n\n      return PanelCtrl.templatePromise;\n    });\n  }\n\n  function getModule(scope, attrs) {\n    switch (attrs.type) {\n      // QueryCtrl\n      case 'query-ctrl': {\n        const datasource = scope.target.datasource || scope.ctrl.panel.datasource;\n        return datasourceSrv.get(datasource).then(ds => {\n          scope.datasource = ds;\n\n          return importPluginModule(ds.meta.module).then(dsModule => {\n            return {\n              baseUrl: ds.meta.baseUrl,\n              name: 'query-ctrl-' + ds.meta.id,\n              bindings: { target: '=', panelCtrl: '=', datasource: '=' },\n              attrs: {\n                target: 'target',\n                'panel-ctrl': 'ctrl.panelCtrl',\n                datasource: 'datasource',\n              },\n              Component: dsModule.QueryCtrl,\n            };\n          });\n        });\n      }\n      // Annotations\n      case 'annotations-query-ctrl': {\n        return importPluginModule(scope.ctrl.currentDatasource.meta.module).then(dsModule => {\n          return {\n            baseUrl: scope.ctrl.currentDatasource.meta.baseUrl,\n            name: 'annotations-query-ctrl-' + scope.ctrl.currentDatasource.meta.id,\n            bindings: { annotation: '=', datasource: '=' },\n            attrs: {\n              annotation: 'ctrl.currentAnnotation',\n              datasource: 'ctrl.currentDatasource',\n            },\n            Component: dsModule.AnnotationsQueryCtrl,\n          };\n        });\n      }\n      // Datasource ConfigCtrl\n      case 'datasource-config-ctrl': {\n        const dsMeta = scope.ctrl.datasourceMeta;\n        return importPluginModule(dsMeta.module).then((dsModule): any => {\n          if (!dsModule.ConfigCtrl) {\n            return { notFound: true };\n          }\n\n          return {\n            baseUrl: dsMeta.baseUrl,\n            name: 'ds-config-' + dsMeta.id,\n            bindings: { meta: '=', current: '=' },\n            attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },\n            Component: dsModule.ConfigCtrl,\n          };\n        });\n      }\n      // AppConfigCtrl\n      case 'app-config-ctrl': {\n        const model = scope.ctrl.model;\n        return importPluginModule(model.module).then(appModule => {\n          return {\n            baseUrl: model.baseUrl,\n            name: 'app-config-' + model.id,\n            bindings: { appModel: '=', appEditCtrl: '=' },\n            attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },\n            Component: appModule.ConfigCtrl,\n          };\n        });\n      }\n      // App Page\n      case 'app-page': {\n        const appModel = scope.ctrl.appModel;\n        return importPluginModule(appModel.module).then(appModule => {\n          return {\n            baseUrl: appModel.baseUrl,\n            name: 'app-page-' + appModel.id + '-' + scope.ctrl.page.slug,\n            bindings: { appModel: '=' },\n            attrs: { 'app-model': 'ctrl.appModel' },\n            Component: appModule[scope.ctrl.page.component],\n          };\n        });\n      }\n      // Panel\n      case 'panel': {\n        return loadPanelComponentInfo(scope, attrs);\n      }\n      default: {\n        return $q.reject({\n          message: 'Could not find component type: ' + attrs.type,\n        });\n      }\n    }\n  }\n\n  function appendAndCompile(scope, elem, componentInfo) {\n    const child = angular.element(document.createElement(componentInfo.name));\n    _.each(componentInfo.attrs, (value, key) => {\n      child.attr(key, value);\n    });\n\n    $compile(child)(scope);\n    elem.empty();\n\n    // let a binding digest cycle complete before adding to dom\n    setTimeout(() => {\n      elem.append(child);\n      scope.$applyAsync(() => {\n        scope.$broadcast('component-did-mount');\n        scope.$broadcast('refresh');\n      });\n    });\n  }\n\n  function registerPluginComponent(scope, elem, attrs, componentInfo) {\n    if (componentInfo.notFound) {\n      elem.empty();\n      return;\n    }\n\n    if (!componentInfo.Component) {\n      throw {\n        message: 'Failed to find exported plugin component for ' + componentInfo.name,\n      };\n    }\n\n    if (!componentInfo.Component.registered) {\n      const directiveName = attrs.$normalize(componentInfo.name);\n      const directiveFn = getPluginComponentDirective(componentInfo);\n      coreModule.directive(directiveName, directiveFn);\n      componentInfo.Component.registered = true;\n    }\n\n    appendAndCompile(scope, elem, componentInfo);\n  }\n\n  return {\n    restrict: 'E',\n    link: (scope, elem, attrs) => {\n      getModule(scope, attrs)\n        .then(componentInfo => {\n          registerPluginComponent(scope, elem, attrs, componentInfo);\n        })\n        .catch(err => {\n          $rootScope.appEvent('alert-error', ['Plugin Error', err.message || err]);\n          console.log('Plugin component error', err);\n        });\n    },\n  };\n}\n\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\n\nexport class UnknownPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/unknown/module.html';\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n  }\n}\n","import config from 'app/core/config';\n\nimport coreModule from 'app/core/core_module';\nimport { PanelContainer } from './dashgrid/PanelContainer';\nimport { DashboardModel } from './dashboard_model';\nimport { PanelModel } from './panel_model';\n\nexport class DashboardCtrl implements PanelContainer {\n  dashboard: DashboardModel;\n  dashboardViewState: any;\n  loadedFallbackDashboard: boolean;\n  editTab: number;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $rootScope,\n    private keybindingSrv,\n    private timeSrv,\n    private variableSrv,\n    private alertingSrv,\n    private dashboardSrv,\n    private unsavedChangesSrv,\n    private dashboardViewStateSrv,\n    public playlistSrv,\n    private panelLoader\n  ) {\n    // temp hack due to way dashboards are loaded\n    // can't use controllerAs on route yet\n    $scope.ctrl = this;\n\n    // TODO: break out settings view to separate view & controller\n    this.editTab = 0;\n\n    // funcs called from React component bindings and needs this binding\n    this.getPanelContainer = this.getPanelContainer.bind(this);\n  }\n\n  setupDashboard(data) {\n    try {\n      this.setupDashboardInternal(data);\n    } catch (err) {\n      this.onInitFailed(err, 'Dashboard init failed', true);\n    }\n  }\n\n  setupDashboardInternal(data) {\n    const dashboard = this.dashboardSrv.create(data.dashboard, data.meta);\n    this.dashboardSrv.setCurrent(dashboard);\n\n    // init services\n    this.timeSrv.init(dashboard);\n    this.alertingSrv.init(dashboard, data.alerts);\n\n    // template values service needs to initialize completely before\n    // the rest of the dashboard can load\n    this.variableSrv\n      .init(dashboard)\n      // template values failes are non fatal\n      .catch(this.onInitFailed.bind(this, 'Templating init failed', false))\n      // continue\n      .finally(() => {\n        this.dashboard = dashboard;\n        this.dashboard.processRepeats();\n        this.dashboard.updateSubmenuVisibility();\n        this.dashboard.autoFitPanels(window.innerHeight);\n\n        this.unsavedChangesSrv.init(dashboard, this.$scope);\n\n        // TODO refactor ViewStateSrv\n        this.$scope.dashboard = dashboard;\n        this.dashboardViewState = this.dashboardViewStateSrv.create(this.$scope);\n\n        this.keybindingSrv.setupDashboardBindings(this.$scope, dashboard);\n        this.setWindowTitleAndTheme();\n\n        this.$scope.appEvent('dashboard-initialized', dashboard);\n      })\n      .catch(this.onInitFailed.bind(this, 'Dashboard init failed', true));\n  }\n\n  onInitFailed(msg, fatal, err) {\n    console.log(msg, err);\n\n    if (err.data && err.data.message) {\n      err.message = err.data.message;\n    } else if (!err.message) {\n      err = { message: err.toString() };\n    }\n\n    this.$scope.appEvent('alert-error', [msg, err.message]);\n\n    // protect against  recursive fallbacks\n    if (fatal && !this.loadedFallbackDashboard) {\n      this.loadedFallbackDashboard = true;\n      this.setupDashboard({ dashboard: { title: 'Dashboard Init failed' } });\n    }\n  }\n\n  templateVariableUpdated() {\n    this.dashboard.processRepeats();\n  }\n\n  setWindowTitleAndTheme() {\n    window.document.title = config.windowTitlePrefix + this.dashboard.title;\n  }\n\n  showJsonEditor(evt, options) {\n    const editScope = this.$rootScope.$new();\n    editScope.object = options.object;\n    editScope.updateHandler = options.updateHandler;\n    this.$scope.appEvent('show-dash-editor', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  getDashboard() {\n    return this.dashboard;\n  }\n\n  getPanelLoader() {\n    return this.panelLoader;\n  }\n\n  timezoneChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  getPanelContainer() {\n    return this;\n  }\n\n  onRemovingPanel(evt, options) {\n    options = options || {};\n    if (!options.panelId) {\n      return;\n    }\n\n    const panelInfo = this.dashboard.getPanelInfoById(options.panelId);\n    this.removePanel(panelInfo.panel, true);\n  }\n\n  removePanel(panel: PanelModel, ask: boolean) {\n    // confirm deletion\n    if (ask !== false) {\n      let text2, confirmText;\n\n      if (panel.alert) {\n        text2 = 'Panel includes an alert rule, removing panel will also remove alert rule';\n        confirmText = 'YES';\n      }\n\n      this.$scope.appEvent('confirm-modal', {\n        title: 'Remove Panel',\n        text: 'Are you sure you want to remove this panel?',\n        text2: text2,\n        icon: 'fa-trash',\n        confirmText: confirmText,\n        yesText: 'Remove',\n        onConfirm: () => {\n          this.removePanel(panel, false);\n        },\n      });\n      return;\n    }\n\n    this.dashboard.removePanel(panel);\n  }\n\n  init(dashboard) {\n    this.$scope.onAppEvent('show-json-editor', this.showJsonEditor.bind(this));\n    this.$scope.onAppEvent('template-variable-value-updated', this.templateVariableUpdated.bind(this));\n    this.$scope.onAppEvent('panel-remove', this.onRemovingPanel.bind(this));\n    this.setupDashboard(dashboard);\n  }\n}\n\ncoreModule.controller('DashboardCtrl', DashboardCtrl);\n","import './plugin_edit_ctrl';\nimport './plugin_page_ctrl';\nimport './import_list/import_list';\nimport './ds_edit_ctrl';\nimport './ds_dashboards_ctrl';\nimport './datasource_srv';\nimport './plugin_component';\n","import './history_srv';\n\nimport _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport locationUtil from 'app/core/utils/location_util';\nimport { DashboardModel } from '../dashboard_model';\nimport { HistoryListOpts, RevisionsModel, CalculateDiffOptions, HistorySrv } from './history_srv';\n\nexport class HistoryListCtrl {\n  appending: boolean;\n  dashboard: DashboardModel;\n  delta: { basic: string; json: string };\n  diff: string;\n  limit: number;\n  loading: boolean;\n  max: number;\n  mode: string;\n  revisions: RevisionsModel[];\n  start: number;\n  newInfo: RevisionsModel;\n  baseInfo: RevisionsModel;\n  canCompare: boolean;\n  isNewLatest: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $route,\n    private $rootScope,\n    private $location,\n    private $q,\n    private historySrv: HistorySrv,\n    public $scope\n  ) {\n    this.appending = false;\n    this.diff = 'basic';\n    this.limit = 10;\n    this.loading = false;\n    this.max = 2;\n    this.mode = 'list';\n    this.start = 0;\n    this.canCompare = false;\n\n    this.$rootScope.onAppEvent('dashboard-saved', this.onDashboardSaved.bind(this), $scope);\n    this.resetFromSource();\n  }\n\n  onDashboardSaved() {\n    this.resetFromSource();\n  }\n\n  switchMode(mode: string) {\n    this.mode = mode;\n    if (this.mode === 'list') {\n      this.reset();\n    }\n  }\n\n  dismiss() {\n    this.$rootScope.appEvent('hide-dash-editor');\n  }\n\n  addToLog() {\n    this.start = this.start + this.limit;\n    this.getLog(true);\n  }\n\n  revisionSelectionChanged() {\n    const selected = _.filter(this.revisions, { checked: true }).length;\n    this.canCompare = selected === 2;\n  }\n\n  formatDate(date) {\n    return this.dashboard.formatDate(date);\n  }\n\n  formatBasicDate(date) {\n    const now = this.dashboard.timezone === 'browser' ? moment() : moment.utc();\n    const then = this.dashboard.timezone === 'browser' ? moment(date) : moment.utc(date);\n    return then.from(now);\n  }\n\n  getDiff(diff: string) {\n    this.diff = diff;\n    this.mode = 'compare';\n\n    // have it already been fetched?\n    if (this.delta[this.diff]) {\n      return this.$q.when(this.delta[this.diff]);\n    }\n\n    const selected = _.filter(this.revisions, { checked: true });\n\n    this.newInfo = selected[0];\n    this.baseInfo = selected[1];\n    this.isNewLatest = this.newInfo.version === this.dashboard.version;\n\n    this.loading = true;\n    const options: CalculateDiffOptions = {\n      new: {\n        dashboardId: this.dashboard.id,\n        version: this.newInfo.version,\n      },\n      base: {\n        dashboardId: this.dashboard.id,\n        version: this.baseInfo.version,\n      },\n      diffType: diff,\n    };\n\n    return this.historySrv\n      .calculateDiff(options)\n      .then(response => {\n        this.delta[this.diff] = response;\n      })\n      .catch(() => {\n        this.mode = 'list';\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n  }\n\n  getLog(append = false) {\n    this.loading = !append;\n    this.appending = append;\n    const options: HistoryListOpts = {\n      limit: this.limit,\n      start: this.start,\n    };\n\n    return this.historySrv\n      .getHistoryList(this.dashboard, options)\n      .then(revisions => {\n        // set formatted dates & default values\n        for (const rev of revisions) {\n          rev.createdDateString = this.formatDate(rev.created);\n          rev.ageString = this.formatBasicDate(rev.created);\n          rev.checked = false;\n        }\n\n        this.revisions = append ? this.revisions.concat(revisions) : revisions;\n      })\n      .catch(err => {\n        this.loading = false;\n      })\n      .finally(() => {\n        this.loading = false;\n        this.appending = false;\n      });\n  }\n\n  isLastPage() {\n    return _.find(this.revisions, rev => rev.version === 1);\n  }\n\n  reset() {\n    this.delta = { basic: '', json: '' };\n    this.diff = 'basic';\n    this.mode = 'list';\n    this.revisions = _.map(this.revisions, rev => _.extend({}, rev, { checked: false }));\n    this.canCompare = false;\n    this.start = 0;\n    this.isNewLatest = false;\n  }\n\n  resetFromSource() {\n    this.revisions = [];\n    return this.getLog().then(this.reset.bind(this));\n  }\n\n  restore(version: number) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: 'Restore version',\n      text: '',\n      text2: `Are you sure you want to restore the dashboard to version ${version}? All unsaved changes will be lost.`,\n      icon: 'fa-history',\n      yesText: `Yes, restore to version ${version}`,\n      onConfirm: this.restoreConfirm.bind(this, version),\n    });\n  }\n\n  restoreConfirm(version: number) {\n    this.loading = true;\n    return this.historySrv\n      .restoreDashboard(this.dashboard, version)\n      .then(response => {\n        this.$location.url(locationUtil.stripBaseFromUrl(response.url)).replace();\n        this.$route.reload();\n        this.$rootScope.appEvent('alert-success', ['Dashboard restored', 'Restored from version ' + version]);\n      })\n      .catch(() => {\n        this.mode = 'list';\n        this.loading = false;\n      });\n  }\n}\n\nexport function dashboardHistoryDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/history/history.html',\n    controller: HistoryListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfDashboardHistory', dashboardHistoryDirective);\n","import coreModule from 'app/core/core_module';\n\nexport class AlertingSrv {\n  dashboard: any;\n  alerts: any[];\n\n  init(dashboard, alerts) {\n    this.dashboard = dashboard;\n    this.alerts = alerts || [];\n  }\n}\n\ncoreModule.service('alertingSrv', AlertingSrv);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { DashboardModel } from '../dashboard_model';\n\nexport interface HistoryListOpts {\n  limit: number;\n  start: number;\n}\n\nexport interface RevisionsModel {\n  id: number;\n  checked: boolean;\n  dashboardId: number;\n  parentVersion: number;\n  version: number;\n  created: Date;\n  createdBy: string;\n  message: string;\n}\n\nexport interface CalculateDiffOptions {\n  new: DiffTarget;\n  base: DiffTarget;\n  diffType: string;\n}\n\nexport interface DiffTarget {\n  dashboardId: number;\n  version: number;\n  unsavedDashboard?: DashboardModel; // when doing diffs against unsaved dashboard version\n}\n\nexport class HistorySrv {\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  getHistoryList(dashboard: DashboardModel, options: HistoryListOpts) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    return id ? this.backendSrv.get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\n  }\n\n  calculateDiff(options: CalculateDiffOptions) {\n    return this.backendSrv.post('api/dashboards/calculate-diff', options);\n  }\n\n  restoreDashboard(dashboard: DashboardModel, version: number) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    const url = `api/dashboards/id/${id}/restore`;\n\n    return id && _.isNumber(version) ? this.backendSrv.post(url, { version }) : Promise.resolve({});\n  }\n}\n\ncoreModule.service('historySrv', HistorySrv);\n","import angular from 'angular';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nexport class DashboardLoaderSrv {\n  /** @ngInject */\n  constructor(\n    private backendSrv,\n    private dashboardSrv,\n    private datasourceSrv,\n    private $http,\n    private $q,\n    private $timeout,\n    contextSrv,\n    private $routeParams,\n    private $rootScope\n  ) {}\n\n  _dashboardLoadFailed(title, snapshot?) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true,\n      },\n      dashboard: { title: title },\n    };\n  }\n\n  loadDashboard(type, slug, uid) {\n    let promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = this.backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('Snapshot not found', true);\n      });\n    } else {\n      promise = this.backendSrv\n        .getDashboardByUid(uid)\n        .then(result => {\n          if (result.meta.isFolder) {\n            this.$rootScope.appEvent('alert-error', ['Dashboard not found']);\n            throw new Error('Dashboard not found');\n          }\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('Not found', true);\n        });\n    }\n\n    promise.then(result => {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n\n    return promise;\n  }\n\n  _loadScriptedDashboard(file) {\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n\n    return this.$http({ url: url, method: 'GET' })\n      .then(this._executeScript.bind(this))\n      .then(\n        result => {\n          return {\n            meta: {\n              fromScript: true,\n              canDelete: false,\n              canSave: false,\n              canStar: false,\n            },\n            dashboard: result.data,\n          };\n        },\n        err => {\n          console.log('Script dashboard error ' + err);\n          this.$rootScope.appEvent('alert-error', [\n            'Script Error',\n            'Please make sure it exists and returns a valid dashboard',\n          ]);\n          return this._dashboardLoadFailed('Scripted dashboard');\n        }\n      );\n  }\n\n  _executeScript(result) {\n    const services = {\n      dashboardSrv: this.dashboardSrv,\n      datasourceSrv: this.datasourceSrv,\n      $q: this.$q,\n    };\n\n    /*jshint -W054 */\n    const scriptFunc = new Function(\n      'ARGS',\n      'kbn',\n      'dateMath',\n      '_',\n      'moment',\n      'window',\n      'document',\n      '$',\n      'jQuery',\n      'services',\n      result.data\n    );\n    const scriptResult = scriptFunc(this.$routeParams, kbn, dateMath, _, moment, window, document, $, $, services);\n\n    // Handle async dashboard scripts\n    if (_.isFunction(scriptResult)) {\n      const deferred = this.$q.defer();\n      scriptResult(dashboard => {\n        this.$timeout(() => {\n          deferred.resolve({ data: dashboard });\n        });\n      });\n      return deferred.promise;\n    }\n\n    return { data: scriptResult };\n  }\n}\n\nangular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n","import moment from 'moment';\nimport angular from 'angular';\nimport { appEvents, NavModel } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashNavCtrl {\n  dashboard: DashboardModel;\n  navModel: NavModel;\n  titleTooltip: string;\n\n  /** @ngInject */\n  constructor(private $scope, private dashboardSrv, private $location, public playlistSrv) {\n    appEvents.on('save-dashboard', this.saveDashboard.bind(this), $scope);\n\n    if (this.dashboard.meta.isSnapshot) {\n      const meta = this.dashboard.meta;\n      this.titleTooltip = 'Created: &nbsp;' + moment(meta.created).calendar();\n      if (meta.expires) {\n        this.titleTooltip += '<br>Expires: &nbsp;' + moment(meta.expires).fromNow() + '<br>';\n      }\n    }\n  }\n\n  toggleSettings() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else {\n      search.editview = 'settings';\n    }\n    this.$location.search(search);\n  }\n\n  toggleViewMode() {\n    appEvents.emit('toggle-kiosk-mode');\n  }\n\n  close() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else if (search.fullscreen) {\n      delete search.fullscreen;\n      delete search.edit;\n    }\n    this.$location.search(search);\n  }\n\n  starDashboard() {\n    this.dashboardSrv.starDashboard(this.dashboard.id, this.dashboard.meta.isStarred).then(newState => {\n      this.dashboard.meta.isStarred = newState;\n    });\n  }\n\n  shareDashboard(tabIndex) {\n    const modalScope = this.$scope.$new();\n    modalScope.tabIndex = tabIndex;\n    modalScope.dashboard = this.dashboard;\n\n    appEvents.emit('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: modalScope,\n    });\n  }\n\n  hideTooltip(evt) {\n    angular.element(evt.currentTarget).tooltip('hide');\n  }\n\n  saveDashboard() {\n    return this.dashboardSrv.saveDashboard();\n  }\n\n  showSearch() {\n    appEvents.emit('show-dash-search');\n  }\n\n  addPanel() {\n    appEvents.emit('dash-scroll', { animate: true, evt: 0 });\n\n    if (this.dashboard.panels.length > 0 && this.dashboard.panels[0].type === 'add-panel') {\n      return; // Return if the \"Add panel\" exists already\n    }\n\n    this.dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: { x: 0, y: 0, w: 12, h: 9 },\n      title: 'Panel Title',\n    });\n  }\n\n  navItemClicked(navItem, evt) {\n    if (navItem.clickHandler) {\n      navItem.clickHandler();\n      evt.preventDefault();\n    }\n  }\n}\n\nexport function dashNavDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',\n    controller: DashNavCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\nangular.module('grafana.directives').directive('dashnav', dashNavDirective);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class SubmenuCtrl {\n  annotations: any;\n  variables: any;\n  dashboard: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private variableSrv, private $location) {\n    this.annotations = this.dashboard.templating.list;\n    this.variables = this.variableSrv.variables;\n  }\n\n  annotationStateChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  variableUpdated(variable) {\n    this.variableSrv.variableUpdated(variable, true);\n  }\n\n  openEditView(editview) {\n    const search = _.extend(this.$location.search(), { editview: editview });\n    this.$location.search(search);\n  }\n}\n\nexport function submenuDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/submenu/submenu.html',\n    controller: SubmenuCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n\t<div class=\"modal-header\">\n\t\t<h2 class=\"modal-header-title\">\n\t\t\t<i class=\"fa fa-copy\"></i>\n\t\t\t<span class=\"p-l-1\">Save As...</span>\n\t\t</h2>\n\n\t\t<a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t</a>\n\t</div>\n\n\t<form name=\"ctrl.saveForm\" class=\"modal-content\" novalidate>\n\t\t<div class=\"p-t-2\">\n\t\t\t<div class=\"gf-form\">\n\t\t\t\t<label class=\"gf-form-label width-7\">New name</label>\n\t\t\t\t<input type=\"text\" class=\"gf-form-input\" ng-model=\"ctrl.clone.title\" give-focus=\"true\" required>\n\t\t\t</div>\n      <div class=\"gf-form\">\n        <folder-picker initial-folder-id=\"ctrl.folderId\"\n                       on-change=\"ctrl.onFolderChange($folder)\"\n                       enter-folder-creation=\"ctrl.onEnterFolderCreation()\"\n                       exit-folder-creation=\"ctrl.onExitFolderCreation()\"\n                       enable-create-new=\"true\"\n                       label-class=\"width-7\">\n        </folder-picker>\n      </div>\n\t\t</div>\n\n\t\t<div class=\"gf-form-button-row text-center\">\n\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.save()\" ng-disabled=\"!ctrl.isValidFolderSelection\">Save</button>\n\t\t\t<a class=\"btn-text\" ng-click=\"ctrl.dismiss();\">Cancel</a>\n\t\t</div>\n\t</form>\n</div>\n`;\n\nexport class SaveDashboardAsModalCtrl {\n  clone: any;\n  folderId: any;\n  dismiss: () => void;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    const dashboard = this.dashboardSrv.getCurrent();\n    this.clone = dashboard.getSaveModelClone();\n    this.clone.id = null;\n    this.clone.uid = '';\n    this.clone.title += ' Copy';\n    this.clone.editable = true;\n    this.clone.hideControls = false;\n    this.folderId = dashboard.meta.folderId;\n\n    // remove alerts if source dashboard is already persisted\n    // do not want to create alert dupes\n    if (dashboard.id > 0) {\n      this.clone.panels.forEach(panel => {\n        if (panel.type === 'graph' && panel.alert) {\n          delete panel.thresholds;\n        }\n        delete panel.alert;\n      });\n    }\n\n    delete this.clone.autoUpdate;\n  }\n\n  save() {\n    return this.dashboardSrv.save(this.clone, { folderId: this.folderId }).then(this.dismiss);\n  }\n\n  keyDown(evt) {\n    if (evt.keyCode === 13) {\n      this.save();\n    }\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function saveDashboardAsDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardAsModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardAsModal', saveDashboardAsDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i>\n      <span class=\"p-l-1\">Save changes</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <form name=\"ctrl.saveForm\" ng-submit=\"ctrl.save()\" class=\"modal-content\" novalidate>\n    <div class=\"p-t-1\">\n      <div class=\"gf-form-group\" ng-if=\"ctrl.timeChange || ctrl.variableValueChange\">\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"Save current time range\" ng-if=\"ctrl.timeChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveTimerange\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"Save current variables\" ng-if=\"ctrl.variableValueChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveVariables\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t    </div>\n      <div class=\"gf-form\">\n        <label class=\"gf-form-hint\">\n          <input\n            type=\"text\"\n            name=\"message\"\n            class=\"gf-form-input\"\n            placeholder=\"Add a note to describe your changes &hellip;\"\n            give-focus=\"true\"\n            ng-model=\"ctrl.message\"\n            ng-model-options=\"{allowInvalid: true}\"\n            ng-maxlength=\"this.max\"\n            maxlength=\"64\"\n            autocomplete=\"off\" />\n          <small class=\"gf-form-hint-text muted\" ng-cloak>\n            <span ng-class=\"{'text-error': ctrl.saveForm.message.$invalid && ctrl.saveForm.message.$dirty }\">\n              {{ctrl.message.length || 0}}\n            </span>\n            / {{ctrl.max}} characters\n          </small>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row text-center\">\n      <button\n        id=\"saveBtn\"\n        type=\"submit\"\n        class=\"btn btn-success\"\n        ng-class=\"{'btn-success--processing': ctrl.isSaving}\"\n        ng-disabled=\"ctrl.saveForm.$invalid || ctrl.isSaving\"\n      >\n        <span ng-if=\"!ctrl.isSaving\">Save</span>\n        <span ng-if=\"ctrl.isSaving === true\">Saving...</span>\n      </button>\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss();\">Cancel</button>\n    </div>\n  </form>\n</div>\n`;\n\nexport class SaveDashboardModalCtrl {\n  message: string;\n  saveVariables = false;\n  saveTimerange = false;\n  time: any;\n  originalTime: any;\n  current = [];\n  originalCurrent = [];\n  max: number;\n  saveForm: any;\n  isSaving: boolean;\n  dismiss: () => void;\n  timeChange = false;\n  variableValueChange = false;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    this.message = '';\n    this.max = 64;\n    this.isSaving = false;\n    this.timeChange = this.dashboardSrv.getCurrent().hasTimeChanged();\n    this.variableValueChange = this.dashboardSrv.getCurrent().hasVariableValuesChanged();\n  }\n\n  save() {\n    if (!this.saveForm.$valid) {\n      return;\n    }\n\n    const options = {\n      saveVariables: this.saveVariables,\n      saveTimerange: this.saveTimerange,\n      message: this.message,\n    };\n\n    const dashboard = this.dashboardSrv.getCurrent();\n    const saveModel = dashboard.getSaveModelClone(options);\n\n    this.isSaving = true;\n\n    return this.dashboardSrv.save(saveModel, options).then(this.postSave.bind(this, options));\n  }\n\n  postSave(options) {\n    if (options.saveVariables) {\n      this.dashboardSrv.getCurrent().resetOriginalVariables();\n    }\n\n    if (options.saveTimerange) {\n      this.dashboardSrv.getCurrent().resetOriginalTime();\n    }\n\n    this.dismiss();\n  }\n}\n\nexport function saveDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardModal', saveDashboardModalDirective);\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\nimport coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i><span class=\"p-l-1\">Cannot save provisioned dashboard</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content\">\n    <small>\n      This dashboard cannot be saved from Grafana's UI since it has been provisioned from another source.\n      Copy the JSON or save it to a file below. Then you can update your dashboard in corresponding provisioning source.<br/>\n      <i>See <a class=\"external-link\" href=\"http://docs.grafana.org/administration/provisioning/#dashboards\" target=\"_blank\">\n      documentation</a> for more information about provisioning.</i>\n    </small>\n    <div class=\"p-t-2\">\n      <div class=\"gf-form\">\n        <code-editor content=\"ctrl.dashboardJson\" data-mode=\"json\" data-max-lines=15></code-editor>\n      </div>\n      <div class=\"gf-form-button-row\">\n        <button class=\"btn btn-success\" clipboard-button=\"ctrl.getJsonForClipboard()\">\n          <i class=\"fa fa-clipboard\"></i>&nbsp;Copy JSON to Clipboard\n        </button>\n        <button class=\"btn btn-secondary\" clipboard-button=\"ctrl.save()\">\n          <i class=\"fa fa-save\"></i>&nbsp;Save JSON to file\n        </button>\n        <a class=\"btn btn-link\" ng-click=\"ctrl.dismiss();\">Cancel</a>\n      </div>\n    </div>\n  </div>\n</div>\n`;\n\nexport class SaveProvisionedDashboardModalCtrl {\n  dash: any;\n  dashboardJson: string;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dash = dashboardSrv.getCurrent().getSaveModelClone();\n    delete this.dash.id;\n    this.dashboardJson = angular.toJson(this.dash, true);\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  getJsonForClipboard() {\n    return this.dashboardJson;\n  }\n}\n\nexport function saveProvisionedDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveProvisionedDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveProvisionedDashboardModal', saveProvisionedDashboardModalDirective);\n","import angular from 'angular';\nimport config from 'app/core/config';\nimport moment from 'moment';\n\n/** @ngInject */\nexport function ShareModalCtrl($scope, $rootScope, $location, $timeout, timeSrv, templateSrv, linkSrv) {\n  $scope.options = {\n    forCurrent: true,\n    includeTemplateVars: true,\n    theme: 'current',\n  };\n  $scope.editor = { index: $scope.tabIndex || 0 };\n\n  $scope.init = () => {\n    $scope.modeSharePanel = $scope.panel ? true : false;\n\n    $scope.tabs = [{ title: 'Link', src: 'shareLink.html' }];\n\n    if ($scope.modeSharePanel) {\n      $scope.modalTitle = 'Share Panel';\n      $scope.tabs.push({ title: 'Embed', src: 'shareEmbed.html' });\n    } else {\n      $scope.modalTitle = 'Share';\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot) {\n      $scope.tabs.push({ title: 'Snapshot', src: 'shareSnapshot.html' });\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot && !$scope.modeSharePanel) {\n      $scope.tabs.push({ title: 'Export', src: 'shareExport.html' });\n    }\n\n    $scope.buildUrl();\n  };\n\n  $scope.buildUrl = () => {\n    let baseUrl = $location.absUrl();\n    const queryStart = baseUrl.indexOf('?');\n\n    if (queryStart !== -1) {\n      baseUrl = baseUrl.substring(0, queryStart);\n    }\n\n    const params = angular.copy($location.search());\n\n    const range = timeSrv.timeRange();\n    params.from = range.from.valueOf();\n    params.to = range.to.valueOf();\n    params.orgId = config.bootData.user.orgId;\n\n    if ($scope.options.includeTemplateVars) {\n      templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    if (!$scope.options.forCurrent) {\n      delete params.from;\n      delete params.to;\n    }\n\n    if ($scope.options.theme !== 'current') {\n      params.theme = $scope.options.theme;\n    }\n\n    if ($scope.modeSharePanel) {\n      params.panelId = $scope.panel.id;\n      params.fullscreen = true;\n    } else {\n      delete params.panelId;\n      delete params.fullscreen;\n    }\n\n    $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);\n\n    let soloUrl = baseUrl.replace(config.appSubUrl + '/dashboard/', config.appSubUrl + '/dashboard-solo/');\n    soloUrl = soloUrl.replace(config.appSubUrl + '/d/', config.appSubUrl + '/d-solo/');\n    delete params.fullscreen;\n    delete params.edit;\n    soloUrl = linkSrv.addParamsToUrl(soloUrl, params);\n\n    $scope.iframeHtml = '<iframe src=\"' + soloUrl + '\" width=\"450\" height=\"200\" frameborder=\"0\"></iframe>';\n\n    $scope.imageUrl = soloUrl.replace(\n      config.appSubUrl + '/dashboard-solo/',\n      config.appSubUrl + '/render/dashboard-solo/'\n    );\n    $scope.imageUrl = $scope.imageUrl.replace(config.appSubUrl + '/d-solo/', config.appSubUrl + '/render/d-solo/');\n    $scope.imageUrl += '&width=1000&height=500' + $scope.getLocalTimeZone();\n  };\n\n  // This function will try to return the proper full name of the local timezone\n  // Chrome does not handle the timezone offset (but phantomjs does)\n  $scope.getLocalTimeZone = () => {\n    const utcOffset = '&tz=UTC' + encodeURIComponent(moment().format('Z'));\n\n    // Older browser does not the internationalization API\n    if (!(window as any).Intl) {\n      return utcOffset;\n    }\n\n    const dateFormat = (window as any).Intl.DateTimeFormat();\n    if (!dateFormat.resolvedOptions) {\n      return utcOffset;\n    }\n\n    const options = dateFormat.resolvedOptions();\n    if (!options.timeZone) {\n      return utcOffset;\n    }\n\n    return '&tz=' + encodeURIComponent(options.timeZone);\n  };\n\n  $scope.getShareUrl = () => {\n    return $scope.shareUrl;\n  };\n}\n\nangular.module('grafana.controllers').controller('ShareModalCtrl', ShareModalCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class ShareSnapshotCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {\n    $scope.snapshot = {\n      name: $scope.dashboard.title,\n      expires: 0,\n      timeoutSeconds: 4,\n    };\n\n    $scope.step = 1;\n\n    $scope.expireOptions = [\n      { text: '1 Hour', value: 60 * 60 },\n      { text: '1 Day', value: 60 * 60 * 24 },\n      { text: '7 Days', value: 60 * 60 * 24 * 7 },\n      { text: 'Never', value: 0 },\n    ];\n\n    $scope.accessOptions = [\n      { text: 'Anyone with the link', value: 1 },\n      { text: 'Organization users', value: 2 },\n      { text: 'Public on the web', value: 3 },\n    ];\n\n    $scope.init = () => {\n      backendSrv.get('/api/snapshot/shared-options').then(options => {\n        $scope.externalUrl = options['externalSnapshotURL'];\n        $scope.sharingButtonText = options['externalSnapshotName'];\n        $scope.externalEnabled = options['externalEnabled'];\n      });\n    };\n\n    $scope.apiUrl = '/api/snapshots';\n\n    $scope.createSnapshot = external => {\n      $scope.dashboard.snapshot = {\n        timestamp: new Date(),\n      };\n\n      if (!external) {\n        $scope.dashboard.snapshot.originalUrl = $location.absUrl();\n      }\n\n      $scope.loading = true;\n      $scope.snapshot.external = external;\n\n      $rootScope.$broadcast('refresh');\n\n      $timeout(() => {\n        $scope.saveSnapshot(external);\n      }, $scope.snapshot.timeoutSeconds * 1000);\n    };\n\n    $scope.saveSnapshot = external => {\n      const dash = $scope.dashboard.getSaveModelClone();\n      $scope.scrubDashboard(dash);\n\n      const cmdData = {\n        dashboard: dash,\n        name: dash.title,\n        expires: $scope.snapshot.expires,\n      };\n\n      const postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;\n\n      backendSrv.post(postUrl, cmdData).then(\n        results => {\n          $scope.loading = false;\n\n          if (external) {\n            $scope.deleteUrl = results.deleteUrl;\n            $scope.snapshotUrl = results.url;\n            $scope.saveExternalSnapshotRef(cmdData, results);\n          } else {\n            const url = $location.url();\n            let baseUrl = $location.absUrl();\n\n            if (url !== '/') {\n              baseUrl = baseUrl.replace(url, '') + '/';\n            }\n\n            $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;\n            $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;\n          }\n\n          $scope.step = 2;\n        },\n        () => {\n          $scope.loading = false;\n        }\n      );\n    };\n\n    $scope.getSnapshotUrl = () => {\n      return $scope.snapshotUrl;\n    };\n\n    $scope.scrubDashboard = dash => {\n      // change title\n      dash.title = $scope.snapshot.name;\n\n      // make relative times absolute\n      dash.time = timeSrv.timeRange();\n\n      // remove panel queries & links\n      _.each(dash.panels, panel => {\n        panel.targets = [];\n        panel.links = [];\n        panel.datasource = null;\n      });\n\n      // remove annotation queries\n      dash.annotations.list = _.chain(dash.annotations.list)\n        .filter(annotation => {\n          return annotation.enable;\n        })\n        .map(annotation => {\n          return {\n            name: annotation.name,\n            enable: annotation.enable,\n            iconColor: annotation.iconColor,\n            snapshotData: annotation.snapshotData,\n            type: annotation.type,\n            builtIn: annotation.builtIn,\n            hide: annotation.hide,\n          };\n        })\n        .value();\n\n      // remove template queries\n      _.each(dash.templating.list, variable => {\n        variable.query = '';\n        variable.options = variable.current;\n        variable.refresh = false;\n      });\n\n      // snapshot single panel\n      if ($scope.modeSharePanel) {\n        const singlePanel = $scope.panel.getSaveModel();\n        singlePanel.gridPos.w = 24;\n        singlePanel.gridPos.x = 0;\n        singlePanel.gridPos.y = 0;\n        singlePanel.gridPos.h = 20;\n        dash.panels = [singlePanel];\n      }\n\n      // cleanup snapshotData\n      delete $scope.dashboard.snapshot;\n      $scope.dashboard.forEachPanel(panel => {\n        delete panel.snapshotData;\n      });\n      _.each($scope.dashboard.annotations.list, annotation => {\n        delete annotation.snapshotData;\n      });\n    };\n\n    $scope.deleteSnapshot = () => {\n      backendSrv.get($scope.deleteUrl).then(() => {\n        $scope.step = 3;\n      });\n    };\n\n    $scope.saveExternalSnapshotRef = (cmdData, results) => {\n      // save external in local instance as well\n      cmdData.external = true;\n      cmdData.key = results.key;\n      cmdData.deleteKey = results.deleteKey;\n      backendSrv.post('/api/snapshots/', cmdData);\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ShareSnapshotCtrl', ShareSnapshotCtrl);\n","import coreModule from 'app/core/core_module';\nimport { DashboardModel } from './dashboard_model';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class DashboardSrv {\n  dash: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $rootScope, private $location) {}\n\n  create(dashboard, meta) {\n    return new DashboardModel(dashboard, meta);\n  }\n\n  setCurrent(dashboard) {\n    this.dash = dashboard;\n  }\n\n  getCurrent() {\n    return this.dash;\n  }\n\n  handleSaveDashboardError(clone, options, err) {\n    options = options || {};\n    options.overwrite = true;\n\n    if (err.data && err.data.status === 'version-mismatch') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: 'Conflict',\n        text: 'Someone else has updated this dashboard.',\n        text2: 'Would you still like to save this dashboard?',\n        yesText: 'Save & Overwrite',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'name-exists') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: 'Conflict',\n        text: 'A dashboard with the same name in selected folder already exists.',\n        text2: 'Would you still like to save this dashboard?',\n        yesText: 'Save & Overwrite',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'plugin-dashboard') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: 'Plugin Dashboard',\n        text: err.data.message,\n        text2: 'Your changes will be lost when you update the plugin. Use Save As to create custom version.',\n        yesText: 'Overwrite',\n        icon: 'fa-warning',\n        altActionText: 'Save As',\n        onAltAction: () => {\n          this.showSaveAsModal();\n        },\n        onConfirm: () => {\n          this.save(clone, { overwrite: true });\n        },\n      });\n    }\n  }\n\n  postSave(clone, data) {\n    this.dash.version = data.version;\n\n    const newUrl = locationUtil.stripBaseFromUrl(data.url);\n    const currentPath = this.$location.path();\n\n    if (newUrl !== currentPath) {\n      this.$location.url(newUrl).replace();\n    }\n\n    this.$rootScope.appEvent('dashboard-saved', this.dash);\n    this.$rootScope.appEvent('alert-success', ['Dashboard saved']);\n\n    return this.dash;\n  }\n\n  save(clone, options) {\n    options = options || {};\n    options.folderId = options.folderId >= 0 ? options.folderId : this.dash.meta.folderId || clone.folderId;\n\n    return this.backendSrv\n      .saveDashboard(clone, options)\n      .then(this.postSave.bind(this, clone))\n      .catch(this.handleSaveDashboardError.bind(this, clone, options));\n  }\n\n  saveDashboard(options?, clone?) {\n    if (clone) {\n      this.setCurrent(this.create(clone, this.dash.meta));\n    }\n\n    if (this.dash.meta.provisioned) {\n      return this.showDashboardProvisionedModal();\n    }\n\n    if (!this.dash.meta.canSave && options.makeEditable !== true) {\n      return Promise.resolve();\n    }\n\n    if (this.dash.title === 'New dashboard') {\n      return this.showSaveAsModal();\n    }\n\n    if (this.dash.version > 0) {\n      return this.showSaveModal();\n    }\n\n    return this.save(this.dash.getSaveModelClone(), options);\n  }\n\n  saveJSONDashboard(json: string) {\n    return this.save(JSON.parse(json), {});\n  }\n\n  showDashboardProvisionedModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-provisioned-dashboard-modal dismiss=\"dismiss()\"></save-provisioned-dashboard-modal>',\n    });\n  }\n\n  showSaveAsModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-as-modal dismiss=\"dismiss()\"></save-dashboard-as-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  showSaveModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-modal dismiss=\"dismiss()\"></save-dashboard-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  starDashboard(dashboardId, isStarred) {\n    let promise;\n\n    if (isStarred) {\n      promise = this.backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return false;\n      });\n    } else {\n      promise = this.backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return true;\n      });\n    }\n\n    return promise.then(res => {\n      if (this.dash && this.dash.id === dashboardId) {\n        this.dash.meta.isStarred = res;\n      }\n      return res;\n    });\n  }\n}\n\ncoreModule.service('dashboardSrv', DashboardSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { DashboardModel } from './dashboard_model';\n\n// represents the transient view state\n// like fullscreen panel & edit\nexport class DashboardViewState {\n  state: any;\n  panelScopes: any;\n  $scope: any;\n  dashboard: DashboardModel;\n  editStateChanged: any;\n  fullscreenPanel: any;\n  oldTimeRange: any;\n\n  /** @ngInject */\n  constructor($scope, private $location, private $timeout, private $rootScope) {\n    const self = this;\n    self.state = {};\n    self.panelScopes = [];\n    self.$scope = $scope;\n    self.dashboard = $scope.dashboard;\n\n    $scope.onAppEvent('$routeUpdate', () => {\n      const urlState = self.getQueryStringState();\n      if (self.needsSync(urlState)) {\n        self.update(urlState, true);\n      }\n    });\n\n    $scope.onAppEvent('panel-change-view', (evt, payload) => {\n      self.update(payload);\n    });\n\n    $scope.onAppEvent('panel-initialized', (evt, payload) => {\n      self.registerPanel(payload.scope);\n    });\n\n    // this marks changes to location during this digest cycle as not to add history item\n    // don't want url changes like adding orgId to add browser history\n    $location.replace();\n    this.update(this.getQueryStringState());\n  }\n\n  needsSync(urlState) {\n    return _.isEqual(this.state, urlState) === false;\n  }\n\n  getQueryStringState() {\n    const state = this.$location.search();\n    state.panelId = parseInt(state.panelId, 10) || null;\n    state.fullscreen = state.fullscreen ? true : null;\n    state.edit = state.edit === 'true' || state.edit === true || null;\n    state.editview = state.editview || null;\n    state.orgId = config.bootData.user.orgId;\n    return state;\n  }\n\n  serializeToUrl() {\n    const urlState = _.clone(this.state);\n    urlState.fullscreen = this.state.fullscreen ? true : null;\n    urlState.edit = this.state.edit ? true : null;\n    return urlState;\n  }\n\n  update(state, fromRouteUpdated?) {\n    // implement toggle logic\n    if (state.toggle) {\n      delete state.toggle;\n      if (this.state.fullscreen && state.fullscreen) {\n        if (this.state.edit === state.edit) {\n          state.fullscreen = !state.fullscreen;\n        }\n      }\n    }\n\n    // remember if editStateChanged\n    this.editStateChanged = (state.edit || false) !== (this.state.edit || false);\n\n    _.extend(this.state, state);\n    this.dashboard.meta.fullscreen = this.state.fullscreen;\n\n    if (!this.state.fullscreen) {\n      this.state.fullscreen = null;\n      this.state.edit = null;\n      // clear panel id unless in solo mode\n      if (!this.dashboard.meta.soloMode) {\n        this.state.panelId = null;\n      }\n    }\n\n    if ((this.state.fullscreen || this.dashboard.meta.soloMode) && this.state.panelId) {\n      // Trying to render panel in fullscreen when it's in the collapsed row causes an issue.\n      // So in this case expand collapsed row first.\n      this.toggleCollapsedPanelRow(this.state.panelId);\n    }\n\n    // if no edit state cleanup tab parm\n    if (!this.state.edit) {\n      delete this.state.tab;\n    }\n\n    // do not update url params if we are here\n    // from routeUpdated event\n    if (fromRouteUpdated !== true) {\n      this.$location.search(this.serializeToUrl());\n    }\n\n    this.syncState();\n  }\n\n  toggleCollapsedPanelRow(panelId) {\n    for (const panel of this.dashboard.panels) {\n      if (panel.collapsed) {\n        for (const rowPanel of panel.panels) {\n          if (rowPanel.id === panelId) {\n            this.dashboard.toggleRow(panel);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  syncState() {\n    if (this.panelScopes.length === 0) {\n      return;\n    }\n\n    if (this.dashboard.meta.fullscreen) {\n      const panelScope = this.getPanelScope(this.state.panelId);\n      if (!panelScope) {\n        return;\n      }\n\n      if (this.fullscreenPanel) {\n        // if already fullscreen\n        if (this.fullscreenPanel === panelScope && this.editStateChanged === false) {\n          return;\n        } else {\n          this.leaveFullscreen(false);\n        }\n      }\n\n      if (!panelScope.ctrl.editModeInitiated) {\n        panelScope.ctrl.initEditMode();\n      }\n\n      if (!panelScope.ctrl.fullscreen) {\n        this.enterFullscreen(panelScope);\n      }\n    } else if (this.fullscreenPanel) {\n      this.leaveFullscreen(true);\n    }\n  }\n\n  getPanelScope(id) {\n    return _.find(this.panelScopes, panelScope => {\n      return panelScope.ctrl.panel.id === id;\n    });\n  }\n\n  leaveFullscreen(render) {\n    const self = this;\n    const ctrl = self.fullscreenPanel.ctrl;\n\n    ctrl.editMode = false;\n    ctrl.fullscreen = false;\n\n    this.dashboard.setViewMode(ctrl.panel, false, false);\n    this.$scope.appEvent('panel-fullscreen-exit', { panelId: ctrl.panel.id });\n    this.$scope.appEvent('dash-scroll', { restore: true });\n\n    if (!render) {\n      return false;\n    }\n\n    this.$timeout(() => {\n      if (self.oldTimeRange !== ctrl.range) {\n        self.$rootScope.$broadcast('refresh');\n      } else {\n        self.$rootScope.$broadcast('render');\n      }\n      delete self.fullscreenPanel;\n    });\n    return true;\n  }\n\n  enterFullscreen(panelScope) {\n    const ctrl = panelScope.ctrl;\n\n    ctrl.editMode = this.state.edit && this.dashboard.meta.canEdit;\n    ctrl.fullscreen = true;\n\n    this.oldTimeRange = ctrl.range;\n    this.fullscreenPanel = panelScope;\n\n    // Firefox doesn't return scrollTop position properly if 'dash-scroll' is emitted after setViewMode()\n    this.$scope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.dashboard.setViewMode(ctrl.panel, true, ctrl.editMode);\n    this.$scope.appEvent('panel-fullscreen-enter', { panelId: ctrl.panel.id });\n  }\n\n  registerPanel(panelScope) {\n    const self = this;\n    self.panelScopes.push(panelScope);\n\n    if (!self.dashboard.meta.soloMode) {\n      if (self.state.panelId === panelScope.ctrl.panel.id) {\n        if (self.state.edit) {\n          panelScope.ctrl.editPanel();\n        } else {\n          panelScope.ctrl.viewPanel();\n        }\n      }\n    }\n\n    const unbind = panelScope.$on('$destroy', () => {\n      self.panelScopes = _.without(self.panelScopes, panelScope);\n      unbind();\n    });\n  }\n}\n\n/** @ngInject */\nexport function dashboardViewStateSrv($location, $timeout, $rootScope) {\n  return {\n    create: $scope => {\n      return new DashboardViewState($scope, $location, $timeout, $rootScope);\n    },\n  };\n}\n\nangular.module('grafana.services').factory('dashboardViewStateSrv', dashboardViewStateSrv);\n","import coreModule from 'app/core/core_module';\n\nconst hitTypes = {\n  FOLDER: 'dash-folder',\n  DASHBOARD: 'dash-db',\n};\n\nexport class ValidationSrv {\n  rootName = 'general';\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv) {}\n\n  validateNewDashboardName(folderId, name) {\n    return this.validate(folderId, name, 'A dashboard in this folder with the same name already exists');\n  }\n\n  validateNewFolderName(name) {\n    return this.validate(0, name, 'A folder or dashboard in the general folder with the same name already exists');\n  }\n\n  private validate(folderId, name, existingErrorMessage) {\n    name = (name || '').trim();\n    const nameLowerCased = name.toLowerCase();\n\n    if (name.length === 0) {\n      return this.$q.reject({\n        type: 'REQUIRED',\n        message: 'Name is required',\n      });\n    }\n\n    if (folderId === 0 && nameLowerCased === this.rootName) {\n      return this.$q.reject({\n        type: 'EXISTING',\n        message: 'This is a reserved name and cannot be used for a folder.',\n      });\n    }\n\n    const deferred = this.$q.defer();\n\n    const promises = [];\n    promises.push(this.backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));\n    promises.push(this.backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));\n\n    this.$q.all(promises).then(res => {\n      let hits = [];\n\n      if (res.length > 0 && res[0].length > 0) {\n        hits = res[0];\n      }\n\n      if (res.length > 1 && res[1].length > 0) {\n        hits = hits.concat(res[1]);\n      }\n\n      for (const hit of hits) {\n        if (nameLowerCased === hit.title.toLowerCase()) {\n          deferred.reject({\n            type: 'EXISTING',\n            message: existingErrorMessage,\n          });\n          break;\n        }\n      }\n\n      deferred.resolve();\n    });\n\n    return deferred.promise;\n  }\n}\n\ncoreModule.service('validationSrv', ValidationSrv);\n","import moment from 'moment';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport class TimeSrv {\n  time: any;\n  refreshTimer: any;\n  refresh: boolean;\n  oldRefresh: boolean;\n  dashboard: any;\n  timeAtLoad: any;\n  private autoRefreshBlocked: boolean;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $timeout, private $location, private timer, private contextSrv) {\n    // default time\n    this.time = { from: '6h', to: 'now' };\n\n    $rootScope.$on('zoom-out', this.zoomOut.bind(this));\n    $rootScope.$on('$routeUpdate', this.routeUpdated.bind(this));\n\n    document.addEventListener('visibilitychange', () => {\n      if (this.autoRefreshBlocked && document.visibilityState === 'visible') {\n        this.autoRefreshBlocked = false;\n\n        this.refreshDashboard();\n      }\n    });\n  }\n\n  init(dashboard) {\n    this.timer.cancelAll();\n\n    this.dashboard = dashboard;\n    this.time = dashboard.time;\n    this.refresh = dashboard.refresh;\n\n    this.initTimeFromUrl();\n    this.parseTime();\n\n    // remember time at load so we can go back to it\n    this.timeAtLoad = _.cloneDeep(this.time);\n\n    if (this.refresh) {\n      this.setAutoRefresh(this.refresh);\n    }\n  }\n\n  private parseTime() {\n    // when absolute time is saved in json it is turned to a string\n    if (_.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {\n      this.time.from = moment(this.time.from).utc();\n    }\n    if (_.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {\n      this.time.to = moment(this.time.to).utc();\n    }\n  }\n\n  private parseUrlParam(value) {\n    if (value.indexOf('now') !== -1) {\n      return value;\n    }\n    if (value.length === 8) {\n      return moment.utc(value, 'YYYYMMDD');\n    }\n    if (value.length === 15) {\n      return moment.utc(value, 'YYYYMMDDTHHmmss');\n    }\n\n    if (!isNaN(value)) {\n      const epoch = parseInt(value, 10);\n      return moment.utc(epoch);\n    }\n\n    return null;\n  }\n\n  private initTimeFromUrl() {\n    const params = this.$location.search();\n    if (params.from) {\n      this.time.from = this.parseUrlParam(params.from) || this.time.from;\n    }\n    if (params.to) {\n      this.time.to = this.parseUrlParam(params.to) || this.time.to;\n    }\n    // if absolute ignore refresh option saved to dashboard\n    if (params.to && params.to.indexOf('now') === -1) {\n      this.refresh = false;\n      this.dashboard.refresh = false;\n    }\n    // but if refresh explicitly set then use that\n    if (params.refresh) {\n      this.refresh = params.refresh || this.refresh;\n    }\n  }\n\n  private routeUpdated() {\n    const params = this.$location.search();\n    const urlRange = this.timeRangeForUrl();\n    // check if url has time range\n    if (params.from && params.to) {\n      // is it different from what our current time range?\n      if (params.from !== urlRange.from || params.to !== urlRange.to) {\n        // issue update\n        this.initTimeFromUrl();\n        this.setTime(this.time, true);\n      }\n    } else if (this.timeHasChangedSinceLoad()) {\n      this.setTime(this.timeAtLoad, true);\n    }\n  }\n\n  private timeHasChangedSinceLoad() {\n    return this.timeAtLoad && (this.timeAtLoad.from !== this.time.from || this.timeAtLoad.to !== this.time.to);\n  }\n\n  setAutoRefresh(interval) {\n    this.dashboard.refresh = interval;\n    this.cancelNextRefresh();\n    if (interval) {\n      const intervalMs = kbn.interval_to_ms(interval);\n\n      this.refreshTimer = this.timer.register(\n        this.$timeout(() => {\n          this.startNextRefreshTimer(intervalMs);\n          this.refreshDashboard();\n        }, intervalMs)\n      );\n    }\n\n    // update url\n    const params = this.$location.search();\n    if (interval) {\n      params.refresh = interval;\n      this.$location.search(params);\n    } else if (params.refresh) {\n      delete params.refresh;\n      this.$location.search(params);\n    }\n  }\n\n  refreshDashboard() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  private startNextRefreshTimer(afterMs) {\n    this.cancelNextRefresh();\n    this.refreshTimer = this.timer.register(\n      this.$timeout(() => {\n        this.startNextRefreshTimer(afterMs);\n        if (this.contextSrv.isGrafanaVisible()) {\n          this.refreshDashboard();\n        } else {\n          this.autoRefreshBlocked = true;\n        }\n      }, afterMs)\n    );\n  }\n\n  private cancelNextRefresh() {\n    this.timer.cancel(this.refreshTimer);\n  }\n\n  setTime(time, fromRouteUpdate?) {\n    _.extend(this.time, time);\n\n    // disable refresh if zoom in or zoom out\n    if (moment.isMoment(time.to)) {\n      this.oldRefresh = this.dashboard.refresh || this.oldRefresh;\n      this.setAutoRefresh(false);\n    } else if (this.oldRefresh && this.oldRefresh !== this.dashboard.refresh) {\n      this.setAutoRefresh(this.oldRefresh);\n      this.oldRefresh = null;\n    }\n\n    // update url\n    if (fromRouteUpdate !== true) {\n      const urlRange = this.timeRangeForUrl();\n      const urlParams = this.$location.search();\n      urlParams.from = urlRange.from;\n      urlParams.to = urlRange.to;\n      this.$location.search(urlParams);\n    }\n\n    this.$rootScope.appEvent('time-range-changed', this.time);\n    this.$timeout(this.refreshDashboard.bind(this), 0);\n  }\n\n  timeRangeForUrl() {\n    const range = this.timeRange().raw;\n\n    if (moment.isMoment(range.from)) {\n      range.from = range.from.valueOf().toString();\n    }\n    if (moment.isMoment(range.to)) {\n      range.to = range.to.valueOf().toString();\n    }\n\n    return range;\n  }\n\n  timeRange() {\n    // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)\n    const raw = {\n      from: moment.isMoment(this.time.from) ? moment(this.time.from) : this.time.from,\n      to: moment.isMoment(this.time.to) ? moment(this.time.to) : this.time.to,\n    };\n\n    const timezone = this.dashboard && this.dashboard.getTimezone();\n\n    return {\n      from: dateMath.parse(raw.from, false, timezone),\n      to: dateMath.parse(raw.to, true, timezone),\n      raw: raw,\n    };\n  }\n\n  zoomOut(e, factor) {\n    const range = this.timeRange();\n\n    const timespan = range.to.valueOf() - range.from.valueOf();\n    const center = range.to.valueOf() - timespan / 2;\n\n    let to = center + timespan * factor / 2;\n    let from = center - timespan * factor / 2;\n\n    if (to > Date.now() && range.to <= Date.now()) {\n      const offset = to - Date.now();\n      from = from - offset;\n      to = Date.now();\n    }\n\n    this.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n}\n\ncoreModule.service('timeSrv', TimeSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { DashboardModel } from './dashboard_model';\n\nexport class ChangeTracker {\n  current: any;\n  originalPath: any;\n  scope: any;\n  original: any;\n  next: any;\n  $window: any;\n\n  /** @ngInject */\n  constructor(\n    dashboard,\n    scope,\n    originalCopyDelay,\n    private $location,\n    $window,\n    private $timeout,\n    private contextSrv,\n    private $rootScope\n  ) {\n    this.$location = $location;\n    this.$window = $window;\n\n    this.current = dashboard;\n    this.originalPath = $location.path();\n    this.scope = scope;\n\n    // register events\n    scope.onAppEvent('dashboard-saved', () => {\n      this.original = this.current.getSaveModelClone();\n      this.originalPath = $location.path();\n    });\n\n    $window.onbeforeunload = () => {\n      if (this.ignoreChanges()) {\n        return undefined;\n      }\n      if (this.hasChanges()) {\n        return 'There are unsaved changes to this dashboard';\n      }\n      return undefined;\n    };\n\n    scope.$on('$locationChangeStart', (event, next) => {\n      // check if we should look for changes\n      if (this.originalPath === $location.path()) {\n        return true;\n      }\n      if (this.ignoreChanges()) {\n        return true;\n      }\n\n      if (this.hasChanges()) {\n        event.preventDefault();\n        this.next = next;\n\n        this.$timeout(() => {\n          this.open_modal();\n        });\n      }\n      return false;\n    });\n\n    if (originalCopyDelay) {\n      this.$timeout(() => {\n        // wait for different services to patch the dashboard (missing properties)\n        this.original = dashboard.getSaveModelClone();\n      }, originalCopyDelay);\n    } else {\n      this.original = dashboard.getSaveModelClone();\n    }\n  }\n\n  // for some dashboards and users\n  // changes should be ignored\n  ignoreChanges() {\n    if (!this.original) {\n      return true;\n    }\n    if (!this.contextSrv.isEditor) {\n      return true;\n    }\n    if (!this.current || !this.current.meta) {\n      return true;\n    }\n\n    const meta = this.current.meta;\n    return !meta.canSave || meta.fromScript || meta.fromFile;\n  }\n\n  // remove stuff that should not count in diff\n  cleanDashboardFromIgnoredChanges(dashData) {\n    // need to new up the domain model class to get access to expand / collapse row logic\n    const model = new DashboardModel(dashData);\n\n    // Expand all rows before making comparison. This is required because row expand / collapse\n    // change order of panel array and panel positions.\n    model.expandRows();\n\n    const dash = model.getSaveModelClone();\n\n    // ignore time and refresh\n    dash.time = 0;\n    dash.refresh = 0;\n    dash.schemaVersion = 0;\n\n    // ignore iteration property\n    delete dash.iteration;\n\n    dash.panels = _.filter(dash.panels, panel => {\n      if (panel.repeatPanelId) {\n        return false;\n      }\n\n      // remove scopedVars\n      panel.scopedVars = null;\n\n      // ignore panel legend sort\n      if (panel.legend) {\n        delete panel.legend.sort;\n        delete panel.legend.sortDesc;\n      }\n\n      return true;\n    });\n\n    // ignore template variable values\n    _.each(dash.templating.list, value => {\n      value.current = null;\n      value.options = null;\n      value.filters = null;\n    });\n\n    return dash;\n  }\n\n  hasChanges() {\n    const current = this.cleanDashboardFromIgnoredChanges(this.current.getSaveModelClone());\n    const original = this.cleanDashboardFromIgnoredChanges(this.original);\n\n    const currentTimepicker = _.find(current.nav, { type: 'timepicker' });\n    const originalTimepicker = _.find(original.nav, { type: 'timepicker' });\n\n    if (currentTimepicker && originalTimepicker) {\n      currentTimepicker.now = originalTimepicker.now;\n    }\n\n    const currentJson = angular.toJson(current, true);\n    const originalJson = angular.toJson(original, true);\n\n    return currentJson !== originalJson;\n  }\n\n  discardChanges() {\n    this.original = null;\n    this.gotoNext();\n  }\n\n  open_modal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<unsaved-changes-modal dismiss=\"dismiss()\"></unsaved-changes-modal>',\n      modalClass: 'modal--narrow confirm-modal',\n    });\n  }\n\n  saveChanges() {\n    const self = this;\n    const cancel = this.$rootScope.$on('dashboard-saved', () => {\n      cancel();\n      this.$timeout(() => {\n        self.gotoNext();\n      });\n    });\n\n    this.$rootScope.appEvent('save-dashboard');\n  }\n\n  gotoNext() {\n    const baseLen = this.$location.absUrl().length - this.$location.url().length;\n    const nextUrl = this.next.substring(baseLen);\n    this.$location.url(nextUrl);\n  }\n}\n","import angular from 'angular';\nimport { ChangeTracker } from './change_tracker';\n\n/** @ngInject */\nexport function unsavedChangesSrv(this: any, $rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {\n  this.init = function(dashboard, scope) {\n    this.tracker = new ChangeTracker(dashboard, scope, 1000, $location, $window, $timeout, contextSrv, $rootScope);\n    return this.tracker;\n  };\n}\n\nangular.module('grafana.services').service('unsavedChangesSrv', unsavedChangesSrv);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-exclamation\"></i>\n      <span class=\"p-l-1\">Unsaved changes</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content text-center\">\n\n    <div class=\"confirm-modal-text\">\n      Do you want to save your changes?\n    </div>\n\n    <div class=\"confirm-modal-buttons\">\n      <button type=\"button\" class=\"btn btn-success\" ng-click=\"ctrl.save()\">Save</button>\n      <button type=\"button\" class=\"btn btn-danger\" ng-click=\"ctrl.discard()\">Discard</button>\n      <button type=\"button\" class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss()\">Cancel</button>\n    </div>\n  </div>\n</div>\n`;\n\nexport class UnsavedChangesModalCtrl {\n  clone: any;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private unsavedChangesSrv) {}\n\n  discard() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.discardChanges();\n  }\n\n  save() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.saveChanges();\n  }\n}\n\nexport function unsavedChangesModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: UnsavedChangesModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('unsavedChangesModal', unsavedChangesModalDirective);\n","import moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport function inputDateDirective() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: ($scope, $elem, attrs, ngModel) => {\n      const format = 'YYYY-MM-DD HH:mm:ss';\n\n      const fromUser = text => {\n        if (text.indexOf('now') !== -1) {\n          if (!dateMath.isValid(text)) {\n            ngModel.$setValidity('error', false);\n            return undefined;\n          }\n          ngModel.$setValidity('error', true);\n          return text;\n        }\n\n        let parsed;\n        if ($scope.ctrl.isUtc) {\n          parsed = moment.utc(text, format);\n        } else {\n          parsed = moment(text, format);\n        }\n\n        if (!parsed.isValid()) {\n          ngModel.$setValidity('error', false);\n          return undefined;\n        }\n\n        ngModel.$setValidity('error', true);\n        return parsed;\n      };\n\n      const toUser = currentValue => {\n        if (moment.isMoment(currentValue)) {\n          return currentValue.format(format);\n        } else {\n          return currentValue;\n        }\n      };\n\n      ngModel.$parsers.push(fromUser);\n      ngModel.$formatters.push(toUser);\n    },\n  };\n}\n","import _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\n\nexport class TimePickerCtrl {\n  static tooltipFormat = 'MMM D, YYYY HH:mm:ss';\n  static defaults = {\n    time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\n    refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\n  };\n\n  dashboard: any;\n  panel: any;\n  absolute: any;\n  timeRaw: any;\n  editTimeRaw: any;\n  tooltip: string;\n  rangeString: string;\n  timeOptions: any;\n  refresh: any;\n  isUtc: boolean;\n  firstDayOfWeek: number;\n  isOpen: boolean;\n  isAbsolute: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private timeSrv) {\n    this.$scope.ctrl = this;\n\n    $rootScope.onAppEvent('shift-time-forward', () => this.move(1), $scope);\n    $rootScope.onAppEvent('shift-time-backward', () => this.move(-1), $scope);\n    $rootScope.onAppEvent('refresh', this.onRefresh.bind(this), $scope);\n    $rootScope.onAppEvent('closeTimepicker', this.openDropdown.bind(this), $scope);\n\n    // init options\n    this.panel = this.dashboard.timepicker;\n    _.defaults(this.panel, TimePickerCtrl.defaults);\n    this.firstDayOfWeek = moment.localeData().firstDayOfWeek();\n\n    // init time stuff\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    const time = angular.copy(this.timeSrv.timeRange());\n    const timeRaw = angular.copy(time.raw);\n\n    if (!this.dashboard.isTimezoneUtc()) {\n      time.from.local();\n      time.to.local();\n      if (moment.isMoment(timeRaw.from)) {\n        timeRaw.from.local();\n      }\n      if (moment.isMoment(timeRaw.to)) {\n        timeRaw.to.local();\n      }\n      this.isUtc = false;\n    } else {\n      this.isUtc = true;\n    }\n\n    this.rangeString = rangeUtil.describeTimeRange(timeRaw);\n    this.absolute = { fromJs: time.from.toDate(), toJs: time.to.toDate() };\n    this.tooltip = this.dashboard.formatDate(time.from) + ' <br>to<br>';\n    this.tooltip += this.dashboard.formatDate(time.to);\n    this.timeRaw = timeRaw;\n    this.isAbsolute = moment.isMoment(this.timeRaw.to);\n  }\n\n  zoom(factor) {\n    this.$rootScope.appEvent('zoom-out', 2);\n  }\n\n  move(direction) {\n    const range = this.timeSrv.timeRange();\n\n    const timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\n    let to, from;\n    if (direction === -1) {\n      to = range.to.valueOf() - timespan;\n      from = range.from.valueOf() - timespan;\n    } else if (direction === 1) {\n      to = range.to.valueOf() + timespan;\n      from = range.from.valueOf() + timespan;\n      if (to > Date.now() && range.to < Date.now()) {\n        to = Date.now();\n        from = range.from.valueOf();\n      }\n    } else {\n      to = range.to.valueOf();\n      from = range.from.valueOf();\n    }\n\n    this.timeSrv.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n\n  openDropdown() {\n    if (this.isOpen) {\n      this.closeDropdown();\n      return;\n    }\n\n    this.onRefresh();\n    this.editTimeRaw = this.timeRaw;\n    this.timeOptions = rangeUtil.getRelativeTimesList(this.panel, this.rangeString);\n    this.refresh = {\n      value: this.dashboard.refresh,\n      options: _.map(this.panel.refresh_intervals, (interval: any) => {\n        return { text: interval, value: interval };\n      }),\n    };\n\n    this.refresh.options.unshift({ text: 'off' });\n    this.isOpen = true;\n    this.$rootScope.appEvent('timepickerOpen');\n  }\n\n  closeDropdown() {\n    this.isOpen = false;\n    this.$rootScope.appEvent('timepickerClosed');\n  }\n\n  applyCustom() {\n    if (this.refresh.value !== this.dashboard.refresh) {\n      this.timeSrv.setAutoRefresh(this.refresh.value);\n    }\n\n    this.timeSrv.setTime(this.editTimeRaw);\n    this.closeDropdown();\n  }\n\n  absoluteFromChanged() {\n    this.editTimeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);\n  }\n\n  absoluteToChanged() {\n    this.editTimeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);\n  }\n\n  getAbsoluteMomentForTimezone(jsDate) {\n    return this.dashboard.isTimezoneUtc() ? moment(jsDate).utc() : moment(jsDate);\n  }\n\n  setRelativeFilter(timespan) {\n    const range = { from: timespan.from, to: timespan.to };\n\n    if (this.panel.nowDelay && range.to === 'now') {\n      range.to = 'now-' + this.panel.nowDelay;\n    }\n\n    this.timeSrv.setTime(range);\n    this.closeDropdown();\n  }\n}\n\nexport function settingsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/settings.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nexport function timePickerDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);\nangular.module('grafana.directives').directive('gfTimePicker', timePickerDirective);\n\nimport { inputDateDirective } from './input_date';\nangular.module('grafana.directives').directive('inputDatetime', inputDateDirective);\n","import coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\nimport angular from 'angular';\n\nconst template = `\n<input type=\"file\" id=\"dashupload\" name=\"dashupload\" class=\"hide\" onchange=\"angular.element(this).scope().file_selected\"/>\n<label class=\"btn btn-success\" for=\"dashupload\">\n  <i class=\"fa fa-upload\"></i>\n  {{btnText}}\n</label>\n`;\n\n/** @ngInject */\nfunction uploadDashboardDirective(timer, alertSrv, $location) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      onUpload: '&',\n      btnText: '@?',\n    },\n    link: (scope, elem) => {\n      scope.btnText = angular.isDefined(scope.btnText) ? scope.btnText : 'Upload .json File';\n\n      function file_selected(evt) {\n        const files = evt.target.files; // FileList object\n        const readerOnload = () => {\n          return e => {\n            let dash;\n            try {\n              dash = JSON.parse(e.target.result);\n            } catch (err) {\n              console.log(err);\n              appEvents.emit('alert-error', ['Import failed', 'JSON -> JS Serialization failed: ' + err.message]);\n              return;\n            }\n\n            scope.$apply(() => {\n              scope.onUpload({ dash: dash });\n            });\n          };\n        };\n\n        let i = 0;\n        let file = files[i];\n\n        while (file) {\n          const reader = new FileReader();\n          reader.onload = readerOnload();\n          reader.readAsText(file);\n          i += 1;\n          file = files[i];\n        }\n      }\n\n      const wnd: any = window;\n      // Check for the various File API support.\n      if (wnd.File && wnd.FileReader && wnd.FileList && wnd.Blob) {\n        // Something\n        elem[0].addEventListener('change', file_selected, false);\n      } else {\n        alertSrv.set('Oops', 'Sorry, the HTML5 File APIs are not fully supported in this browser.', 'error');\n      }\n    },\n  };\n}\n\ncoreModule.directive('dashUpload', uploadDashboardDirective);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashboardExporter {\n  constructor(private datasourceSrv) {}\n\n  makeExportable(dashboard: DashboardModel) {\n    // clean up repeated rows and panels,\n    // this is done on the live real dashboard instance, not on a clone\n    // so we need to undo this\n    // this is pretty hacky and needs to be changed\n    dashboard.cleanUpRepeats();\n\n    const saveModel = dashboard.getSaveModelClone();\n    saveModel.id = null;\n\n    // undo repeat cleanup\n    dashboard.processRepeats();\n\n    const inputs = [];\n    const requires = {};\n    const datasources = {};\n    const promises = [];\n    const variableLookup: any = {};\n\n    for (const variable of saveModel.templating.list) {\n      variableLookup[variable.name] = variable;\n    }\n\n    const templateizeDatasourceUsage = obj => {\n      // ignore data source properties that contain a variable\n      if (obj.datasource && obj.datasource.indexOf('$') === 0) {\n        if (variableLookup[obj.datasource.substring(1)]) {\n          return;\n        }\n      }\n\n      promises.push(\n        this.datasourceSrv.get(obj.datasource).then(ds => {\n          if (ds.meta.builtIn) {\n            return;\n          }\n\n          const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\n          datasources[refName] = {\n            name: refName,\n            label: ds.name,\n            description: '',\n            type: 'datasource',\n            pluginId: ds.meta.id,\n            pluginName: ds.meta.name,\n          };\n          obj.datasource = '${' + refName + '}';\n\n          requires['datasource' + ds.meta.id] = {\n            type: 'datasource',\n            id: ds.meta.id,\n            name: ds.meta.name,\n            version: ds.meta.info.version || '1.0.0',\n          };\n        })\n      );\n    };\n\n    const processPanel = panel => {\n      if (panel.datasource !== undefined) {\n        templateizeDatasourceUsage(panel);\n      }\n\n      if (panel.targets) {\n        for (const target of panel.targets) {\n          if (target.datasource !== undefined) {\n            templateizeDatasourceUsage(target);\n          }\n        }\n      }\n\n      const panelDef = config.panels[panel.type];\n      if (panelDef) {\n        requires['panel' + panelDef.id] = {\n          type: 'panel',\n          id: panelDef.id,\n          name: panelDef.name,\n          version: panelDef.info.version,\n        };\n      }\n    };\n\n    // check up panel data sources\n    for (const panel of saveModel.panels) {\n      processPanel(panel);\n\n      // handle collapsed rows\n      if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n        for (const rowPanel of panel.panels) {\n          processPanel(rowPanel);\n        }\n      }\n    }\n\n    // templatize template vars\n    for (const variable of saveModel.templating.list) {\n      if (variable.type === 'query') {\n        templateizeDatasourceUsage(variable);\n        variable.options = [];\n        variable.current = {};\n        variable.refresh = variable.refresh > 0 ? variable.refresh : 1;\n      }\n    }\n\n    // templatize annotations vars\n    for (const annotationDef of saveModel.annotations.list) {\n      templateizeDatasourceUsage(annotationDef);\n    }\n\n    // add grafana version\n    requires['grafana'] = {\n      type: 'grafana',\n      id: 'grafana',\n      name: 'Grafana',\n      version: config.buildInfo.version,\n    };\n\n    return Promise.all(promises)\n      .then(() => {\n        _.each(datasources, (value, key) => {\n          inputs.push(value);\n        });\n\n        // templatize constants\n        for (const variable of saveModel.templating.list) {\n          if (variable.type === 'constant') {\n            const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\n            inputs.push({\n              name: refName,\n              type: 'constant',\n              label: variable.label || variable.name,\n              value: variable.current.value,\n              description: '',\n            });\n            // update current and option\n            variable.query = '${' + refName + '}';\n            variable.options[0] = variable.current = {\n              value: variable.query,\n              text: variable.query,\n            };\n          }\n        }\n\n        // make inputs and requires a top thing\n        const newObj = {};\n        newObj['__inputs'] = inputs;\n        newObj['__requires'] = _.sortBy(requires, ['id']);\n\n        _.defaults(newObj, saveModel);\n        return newObj;\n      })\n      .catch(err => {\n        console.log('Export failed:', err);\n        return {\n          error: err,\n        };\n      });\n  }\n}\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\n\nimport coreModule from 'app/core/core_module';\nimport { DashboardExporter } from './exporter';\n\nexport class DashExportCtrl {\n  dash: any;\n  exporter: DashboardExporter;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private dashboardSrv, datasourceSrv, private $scope, private $rootScope) {\n    this.exporter = new DashboardExporter(datasourceSrv);\n\n    this.exporter.makeExportable(this.dashboardSrv.getCurrent()).then(dash => {\n      this.$scope.$apply(() => {\n        this.dash = dash;\n      });\n    });\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  saveJson() {\n    const clone = this.dash;\n    const editScope = this.$rootScope.$new();\n    editScope.object = clone;\n    editScope.enableCopy = true;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n\n    this.dismiss();\n  }\n}\n\nexport function dashExportDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export/export_modal.html',\n    controller: DashExportCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('dashExportModal', dashExportDirective);\n","import angular from 'angular';\nimport * as fileExport from 'app/core/utils/file_export';\nimport appEvents from 'app/core/app_events';\n\nexport class ExportDataModalCtrl {\n  private data: any[];\n  private panel: string;\n  asRows = true;\n  dateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n  excel = false;\n\n  export() {\n    if (this.panel === 'table') {\n      fileExport.exportTableDataToCsv(this.data, this.excel);\n    } else {\n      if (this.asRows) {\n        fileExport.exportSeriesListToCsv(this.data, this.dateTimeFormat, this.excel);\n      } else {\n        fileExport.exportSeriesListToCsvColumns(this.data, this.dateTimeFormat, this.excel);\n      }\n    }\n\n    this.dismiss();\n  }\n\n  dismiss() {\n    appEvents.emit('hide-modal');\n  }\n}\n\nexport function exportDataModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export_data/export_data_modal.html',\n    controller: ExportDataModalCtrl,\n    controllerAs: 'ctrl',\n    scope: {\n      panel: '<',\n      data: '<', // The difference to '=' is that the bound properties are not watched\n    },\n    bindToController: true,\n  };\n}\n\nangular.module('grafana.directives').directive('exportDataModal', exportDataModal);\n","import _ from 'lodash';\nimport angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport class AdHocFiltersCtrl {\n  segments: any;\n  variable: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor(\n    private uiSegmentSrv,\n    private datasourceSrv,\n    private $q,\n    private variableSrv,\n    $scope,\n    private $rootScope\n  ) {\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove filter --',\n    });\n    this.buildSegmentModel();\n    this.$rootScope.onAppEvent('template-variable-value-updated', this.buildSegmentModel.bind(this), $scope);\n  }\n\n  buildSegmentModel() {\n    this.segments = [];\n\n    if (this.variable.value && !_.isArray(this.variable.value)) {\n    }\n\n    for (const tag of this.variable.filters) {\n      if (this.segments.length > 0) {\n        this.segments.push(this.uiSegmentSrv.newCondition('AND'));\n      }\n\n      if (tag.key !== undefined && tag.value !== undefined) {\n        this.segments.push(this.uiSegmentSrv.newKey(tag.key));\n        this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));\n        this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));\n      }\n    }\n\n    this.segments.push(this.uiSegmentSrv.newPlusButton());\n  }\n\n  getOptions(segment, index) {\n    if (segment.type === 'operator') {\n      return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));\n    }\n\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);\n    }\n\n    return this.datasourceSrv.get(this.variable.datasource).then(ds => {\n      const options: any = {};\n      let promise = null;\n\n      if (segment.type !== 'value') {\n        promise = ds.getTagKeys ? ds.getTagKeys() : Promise.resolve([]);\n      } else {\n        options.key = this.segments[index - 2].value;\n        promise = ds.getTagValues ? ds.getTagValues(options) : Promise.resolve([]);\n      }\n\n      return promise.then(results => {\n        results = _.map(results, segment => {\n          return this.uiSegmentSrv.newSegment({ value: segment.text });\n        });\n\n        // add remove option for keys\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      });\n    });\n  }\n\n  segmentChanged(segment, index) {\n    this.segments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.segments.splice(index, 3);\n      if (this.segments.length === 0) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.segments.length > 2) {\n        this.segments.splice(Math.max(index - 1, 0), 1);\n        if (this.segments[this.segments.length - 1].type !== 'plus-button') {\n          this.segments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.segments.push(this.uiSegmentSrv.newOperator('='));\n        this.segments.push(this.uiSegmentSrv.newFake('select value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.segments.length) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.updateVariableModel();\n  }\n\n  updateVariableModel() {\n    const filters = [];\n    let filterIndex = -1;\n    let hasFakes = false;\n\n    this.segments.forEach(segment => {\n      if (segment.type === 'value' && segment.fake) {\n        hasFakes = true;\n        return;\n      }\n\n      switch (segment.type) {\n        case 'key': {\n          filters.push({ key: segment.value });\n          filterIndex += 1;\n          break;\n        }\n        case 'value': {\n          filters[filterIndex].value = segment.value;\n          break;\n        }\n        case 'operator': {\n          filters[filterIndex].operator = segment.value;\n          break;\n        }\n        case 'condition': {\n          filters[filterIndex].condition = segment.value;\n          break;\n        }\n      }\n    });\n\n    if (hasFakes) {\n      return;\n    }\n\n    this.variable.setFilters(filters);\n    this.variableSrv.variableUpdated(this.variable, true);\n  }\n}\n\nconst template = `\n<div class=\"gf-form-inline\">\n  <div class=\"gf-form\" ng-repeat=\"segment in ctrl.segments\">\n    <metric-segment segment=\"segment\" get-options=\"ctrl.getOptions(segment, $index)\"\n                    on-change=\"ctrl.segmentChanged(segment, $index)\"></metric-segment>\n  </div>\n</div>\n`;\n\nexport function adHocFiltersComponent() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: AdHocFiltersCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      variable: '=',\n    },\n  };\n}\n\ncoreModule.directive('adHocFilters', adHocFiltersComponent);\n","import { coreModule } from 'app/core/core';\n\nconst template = `\n<div class=\"gf-form-select-wrapper max-width-18\">\n  <select class=\"gf-form-input\" ng-model=\"panel.repeat\" ng-options=\"f.value as f.text for f in variables\" ng-change=\"optionChanged()\">\n  <option value=\"\"></option>\n</div>\n`;\n\n/** @ngInject */\nfunction dashRepeatOptionDirective(variableSrv) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      panel: '=',\n    },\n    link: (scope, element) => {\n      element.css({ display: 'block', width: '100%' });\n\n      scope.variables = variableSrv.variables.map(item => {\n        return { text: item.name, value: item.name };\n      });\n\n      if (scope.variables.length === 0) {\n        scope.variables.unshift({\n          text: 'No template variables found',\n          value: null,\n        });\n      }\n\n      scope.variables.unshift({ text: 'Disabled', value: null });\n\n      // if repeat is set and no direction set to horizontal\n      if (scope.panel.repeat && !scope.panel.repeatDirection) {\n        scope.panel.repeatDirection = 'h';\n      }\n\n      scope.optionChanged = () => {\n        if (scope.panel.repeat) {\n          scope.panel.repeatDirection = 'h';\n        }\n      };\n    },\n  };\n}\n\ncoreModule.directive('dashRepeatOption', dashRepeatOptionDirective);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport templateSrv from 'app/features/templating/template_srv';\nimport appEvents from 'app/core/app_events';\n\nexport interface DashboardRowProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\n  dashboard: any;\n  panelContainer: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.panel.collapsed,\n    };\n\n    this.panelContainer = this.props.getPanelContainer();\n    this.dashboard = this.panelContainer.getDashboard();\n\n    this.toggle = this.toggle.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  toggle() {\n    this.dashboard.toggleRow(this.props.panel);\n\n    this.setState(prevState => {\n      return { collapsed: !prevState.collapsed };\n    });\n  }\n\n  update() {\n    this.dashboard.processRepeats();\n    this.forceUpdate();\n  }\n\n  openSettings() {\n    appEvents.emit('show-modal', {\n      templateHtml: `<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>`,\n      modalClass: 'modal--narrow',\n      model: {\n        row: this.props.panel,\n        onUpdated: this.update.bind(this),\n      },\n    });\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete Row',\n      text: 'Are you sure you want to remove this row and all its panels?',\n      altActionText: 'Delete row only',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, true);\n      },\n      onAltAction: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, false);\n      },\n    });\n  }\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed,\n    });\n    const chevronClass = classNames({\n      fa: true,\n      'fa-chevron-down': !this.state.collapsed,\n      'fa-chevron-right': this.state.collapsed,\n    });\n\n    const title = templateSrv.replaceWithText(this.props.panel.title, this.props.panel.scopedVars);\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n\n    return (\n      <div className={classes}>\n        <a className=\"dashboard-row__title pointer\" onClick={this.toggle}>\n          <i className={chevronClass} />\n          {title}\n          <span className=\"dashboard-row__panel_count\">\n            ({count} {panels})\n          </span>\n        </a>\n        {this.dashboard.meta.canEdit === true && (\n          <div className=\"dashboard-row__actions\">\n            <a className=\"pointer\" onClick={this.openSettings}>\n              <i className=\"fa fa-cog\" />\n            </a>\n            <a className=\"pointer\" onClick={this.delete}>\n              <i className=\"fa fa-trash\" />\n            </a>\n          </div>\n        )}\n        {this.state.collapsed === true && (\n          <div className=\"dashboard-row__toggle-target\" onClick={this.toggle}>\n            &nbsp;\n          </div>\n        )}\n        <div className=\"dashboard-row__drag grid-drag-handle\" />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport baron from 'baron';\n\nexport interface Props {\n  children: any;\n  className: string;\n}\n\nexport default class ScrollBar extends React.Component<Props, any> {\n  private container: any;\n  private scrollbar: baron;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.scrollbar = baron({\n      root: this.container.parentElement,\n      scroller: this.container,\n      bar: '.baron__bar',\n      barOnCls: '_scrollbar',\n      scrollingCls: '_scrolling',\n      track: '.baron__track',\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollbar.update();\n  }\n\n  componentWillUnmount() {\n    this.scrollbar.dispose();\n  }\n\n  // methods can be invoked by outside\n  setScrollTop(top) {\n    if (this.container) {\n      this.container.scrollTop = top;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  setScrollLeft(left) {\n    if (this.container) {\n      this.container.scrollLeft = left;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  update() {\n    this.scrollbar.update();\n  }\n\n  handleRef = ref => {\n    this.container = ref;\n  };\n\n  render() {\n    return (\n      <div className=\"baron baron__root baron__clipper\">\n        <div className={this.props.className + ' baron__scroller'} ref={this.handleRef}>\n          {this.props.children}\n        </div>\n\n        <div className=\"baron__track\">\n          <div className=\"baron__bar\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport config from 'app/core/config';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport ScrollBar from 'app/core/components/ScrollBar/ScrollBar';\nimport store from 'app/core/store';\nimport { LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport Highlighter from 'react-highlight-words';\n\nexport interface AddPanelPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport interface AddPanelPanelState {\n  filter: string;\n  panelPlugins: any[];\n  copiedPanelPlugins: any[];\n  tab: string;\n}\n\nexport class AddPanelPanel extends React.Component<AddPanelPanelProps, AddPanelPanelState> {\n  private scrollbar: ScrollBar;\n\n  constructor(props) {\n    super(props);\n    this.handleCloseAddPanel = this.handleCloseAddPanel.bind(this);\n    this.renderPanelItem = this.renderPanelItem.bind(this);\n    this.panelSizeChanged = this.panelSizeChanged.bind(this);\n\n    this.state = {\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n      filter: '',\n      tab: 'Add',\n    };\n  }\n\n  componentDidMount() {\n    this.props.panel.events.on('panel-size-changed', this.panelSizeChanged);\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off('panel-size-changed', this.panelSizeChanged);\n  }\n\n  panelSizeChanged() {\n    setTimeout(() => {\n      this.scrollbar.update();\n    });\n  }\n\n  getPanelPlugins(filter) {\n    let panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n\n    // add special row type\n    panels.push({ id: 'row', name: 'Row', sort: 8, info: { logos: { small: 'public/img/icn-row.svg' } } });\n\n    panels = this.filterPanels(panels, filter);\n\n    // add sort by sort property\n    return _.sortBy(panels, 'sort');\n  }\n\n  getCopiedPanelPlugins(filter) {\n    const panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n    let copiedPanels = [];\n\n    const copiedPanelJson = store.get(LS_PANEL_COPY_KEY);\n    if (copiedPanelJson) {\n      const copiedPanel = JSON.parse(copiedPanelJson);\n      const pluginInfo = _.find(panels, { id: copiedPanel.type });\n      if (pluginInfo) {\n        const pluginCopy = _.cloneDeep(pluginInfo);\n        pluginCopy.name = copiedPanel.title;\n        pluginCopy.sort = -1;\n        pluginCopy.defaults = copiedPanel;\n        copiedPanels.push(pluginCopy);\n      }\n    }\n\n    copiedPanels = this.filterPanels(copiedPanels, filter);\n\n    return _.sortBy(copiedPanels, 'sort');\n  }\n\n  onAddPanel = panelPluginInfo => {\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const { gridPos } = this.props.panel;\n\n    const newPanel: any = {\n      type: panelPluginInfo.id,\n      title: 'Panel Title',\n      gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },\n    };\n\n    if (panelPluginInfo.id === 'row') {\n      newPanel.title = 'Row title';\n      newPanel.gridPos = { x: 0, y: 0 };\n    }\n\n    // apply panel template / defaults\n    if (panelPluginInfo.defaults) {\n      _.defaults(newPanel, panelPluginInfo.defaults);\n      newPanel.gridPos.w = panelPluginInfo.defaults.gridPos.w;\n      newPanel.gridPos.h = panelPluginInfo.defaults.gridPos.h;\n      newPanel.title = panelPluginInfo.defaults.title;\n      store.delete(LS_PANEL_COPY_KEY);\n    }\n\n    dashboard.addPanel(newPanel);\n    dashboard.removePanel(this.props.panel);\n  };\n\n  handleCloseAddPanel(evt) {\n    evt.preventDefault();\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    dashboard.removePanel(dashboard.panels[0]);\n  }\n\n  renderText(text: string) {\n    const searchWords = this.state.filter.split('');\n    return <Highlighter highlightClassName=\"highlight-search-match\" textToHighlight={text} searchWords={searchWords} />;\n  }\n\n  renderPanelItem(panel, index) {\n    return (\n      <div key={index} className=\"add-panel__item\" onClick={() => this.onAddPanel(panel)} title={panel.name}>\n        <img className=\"add-panel__item-img\" src={panel.info.logos.small} />\n        <div className=\"add-panel__item-name\">{this.renderText(panel.name)}</div>\n      </div>\n    );\n  }\n\n  noCopiedPanelPlugins() {\n    return <div className=\"add-panel__no-panels\">No copied panels yet.</div>;\n  }\n\n  filterChange(evt) {\n    this.setState({\n      filter: evt.target.value,\n      panelPlugins: this.getPanelPlugins(evt.target.value),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(evt.target.value),\n    });\n  }\n\n  filterKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      const panel = _.head(this.state.panelPlugins);\n      if (panel) {\n        this.onAddPanel(panel);\n      }\n    }\n  }\n\n  filterPanels(panels, filter) {\n    const regex = new RegExp(filter, 'i');\n    return panels.filter(panel => {\n      return regex.test(panel.name);\n    });\n  }\n\n  openCopy() {\n    this.setState({\n      tab: 'Copy',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  openAdd() {\n    this.setState({\n      tab: 'Add',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  render() {\n    const addClass = classNames({\n      'active active--panel': this.state.tab === 'Add',\n      '': this.state.tab === 'Copy',\n    });\n\n    const copyClass = classNames({\n      '': this.state.tab === 'Add',\n      'active active--panel': this.state.tab === 'Copy',\n    });\n\n    let panelTab;\n\n    if (this.state.tab === 'Add') {\n      panelTab = this.state.panelPlugins.map(this.renderPanelItem);\n    } else if (this.state.tab === 'Copy') {\n      if (this.state.copiedPanelPlugins.length > 0) {\n        panelTab = this.state.copiedPanelPlugins.map(this.renderPanelItem);\n      } else {\n        panelTab = this.noCopiedPanelPlugins();\n      }\n    }\n\n    return (\n      <div className=\"panel-container add-panel-container\">\n        <div className=\"add-panel\">\n          <div className=\"add-panel__header\">\n            <i className=\"gicon gicon-add-panel\" />\n            <span className=\"add-panel__title\">New Panel</span>\n            <ul className=\"gf-tabs\">\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + addClass} onClick={this.openAdd.bind(this)}>\n                  Add\n                </div>\n              </li>\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + copyClass} onClick={this.openCopy.bind(this)}>\n                  Paste\n                </div>\n              </li>\n            </ul>\n            <button className=\"add-panel__close\" onClick={this.handleCloseAddPanel}>\n              <i className=\"fa fa-close\" />\n            </button>\n          </div>\n          <ScrollBar ref={element => (this.scrollbar = element)} className=\"add-panel__items\">\n            <div className=\"add-panel__searchbar\">\n              <label className=\"gf-form gf-form--grow gf-form--has-input-icon\">\n                <input\n                  type=\"text\"\n                  autoFocus\n                  className=\"gf-form-input gf-form--grow\"\n                  placeholder=\"Panel Search Filter\"\n                  value={this.state.filter}\n                  onChange={this.filterChange.bind(this)}\n                  onKeyPress={this.filterKeyPress.bind(this)}\n                />\n                <i className=\"gf-form-input-icon fa fa-search\" />\n              </label>\n            </div>\n            {panelTab}\n          </ScrollBar>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { DashboardPanel } from './DashboardPanel';\nimport { DashboardModel } from '../dashboard_model';\nimport { PanelContainer } from './PanelContainer';\nimport { PanelModel } from '../panel_model';\nimport classNames from 'classnames';\nimport sizeMe from 'react-sizeme';\n\nlet lastGridWidth = 1200;\n\nfunction GridWrapper({\n  size,\n  layout,\n  onLayoutChange,\n  children,\n  onDragStop,\n  onResize,\n  onResizeStop,\n  onWidthChange,\n  className,\n  isResizable,\n  isDraggable,\n}) {\n  if (size.width === 0) {\n    console.log('size is zero!');\n  }\n\n  const width = size.width > 0 ? size.width : lastGridWidth;\n  if (width !== lastGridWidth) {\n    onWidthChange();\n    lastGridWidth = width;\n  }\n\n  return (\n    <ReactGridLayout\n      width={lastGridWidth}\n      className={className}\n      isDraggable={isDraggable}\n      isResizable={isResizable}\n      measureBeforeMount={false}\n      containerPadding={[0, 0]}\n      useCSSTransforms={true}\n      margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n      cols={GRID_COLUMN_COUNT}\n      rowHeight={GRID_CELL_HEIGHT}\n      draggableHandle=\".grid-drag-handle\"\n      layout={layout}\n      onResize={onResize}\n      onResizeStop={onResizeStop}\n      onDragStop={onDragStop}\n      onLayoutChange={onLayoutChange}\n    >\n      {children}\n    </ReactGridLayout>\n  );\n}\n\nconst SizedReactLayoutGrid = sizeMe({ monitorWidth: true })(GridWrapper);\n\nexport interface DashboardGridProps {\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardGrid extends React.Component<DashboardGridProps, any> {\n  gridToPanelMap: any;\n  panelContainer: PanelContainer;\n  dashboard: DashboardModel;\n  panelMap: { [id: string]: PanelModel };\n\n  constructor(props) {\n    super(props);\n    this.panelContainer = this.props.getPanelContainer();\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onResizeStop = this.onResizeStop.bind(this);\n    this.onDragStop = this.onDragStop.bind(this);\n    this.onWidthChange = this.onWidthChange.bind(this);\n\n    this.state = { animated: false };\n\n    // subscribe to dashboard events\n    this.dashboard = this.panelContainer.getDashboard();\n    this.dashboard.on('panel-added', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('panel-removed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('repeats-processed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('view-mode-changed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-collapsed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-expanded', this.triggerForceUpdate.bind(this));\n  }\n\n  buildLayout() {\n    const layout = [];\n    this.panelMap = {};\n\n    for (const panel of this.dashboard.panels) {\n      const stringId = panel.id.toString();\n      this.panelMap[stringId] = panel;\n\n      if (!panel.gridPos) {\n        console.log('panel without gridpos');\n        continue;\n      }\n\n      const panelPos: any = {\n        i: stringId,\n        x: panel.gridPos.x,\n        y: panel.gridPos.y,\n        w: panel.gridPos.w,\n        h: panel.gridPos.h,\n      };\n\n      if (panel.type === 'row') {\n        panelPos.w = GRID_COLUMN_COUNT;\n        panelPos.h = 1;\n        panelPos.isResizable = false;\n        panelPos.isDraggable = panel.collapsed;\n      }\n\n      layout.push(panelPos);\n    }\n\n    return layout;\n  }\n\n  onLayoutChange(newLayout) {\n    for (const newPos of newLayout) {\n      this.panelMap[newPos.i].updateGridPos(newPos);\n    }\n\n    this.dashboard.sortPanelsByGridPos();\n  }\n\n  triggerForceUpdate() {\n    this.forceUpdate();\n  }\n\n  onWidthChange() {\n    for (const panel of this.dashboard.panels) {\n      panel.resizeDone();\n    }\n  }\n\n  updateGridPos(item, layout) {\n    this.panelMap[item.i].updateGridPos(item);\n\n    // react-grid-layout has a bug (#670), and onLayoutChange() is only called when the component is mounted.\n    // So it's required to call it explicitly when panel resized or moved to save layout changes.\n    this.onLayoutChange(layout);\n  }\n\n  onResize(layout, oldItem, newItem) {\n    this.panelMap[newItem.i].updateGridPos(newItem);\n  }\n\n  onResizeStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n    this.panelMap[newItem.i].resizeDone();\n  }\n\n  onDragStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState(() => {\n        return { animated: true };\n      });\n    });\n  }\n\n  renderPanels() {\n    const panelElements = [];\n\n    for (const panel of this.dashboard.panels) {\n      const panelClasses = classNames({ panel: true, 'panel--fullscreen': panel.fullscreen });\n      panelElements.push(\n        /** panel-id is set for html bookmarks */\n        <div key={panel.id.toString()} className={panelClasses} id={`panel-${panel.id.toString()}`}>\n          <DashboardPanel panel={panel} getPanelContainer={this.props.getPanelContainer} />\n        </div>\n      );\n    }\n\n    return panelElements;\n  }\n\n  render() {\n    return (\n      <SizedReactLayoutGrid\n        className={classNames({ layout: true, animated: this.state.animated })}\n        layout={this.buildLayout()}\n        isResizable={this.dashboard.meta.canEdit}\n        isDraggable={this.dashboard.meta.canEdit}\n        onLayoutChange={this.onLayoutChange}\n        onWidthChange={this.onWidthChange}\n        onDragStop={this.onDragStop}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n      >\n        {this.renderPanels()}\n      </SizedReactLayoutGrid>\n    );\n  }\n}\n","import React from 'react';\nimport {PanelModel} from '../panel_model';\nimport {PanelContainer} from './PanelContainer';\nimport {AttachedPanel} from './PanelLoader';\nimport {DashboardRow} from './DashboardRow';\nimport {AddPanelPanel} from './AddPanelPanel';\n\nexport interface DashboardPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardPanel extends React.Component<DashboardPanelProps, any> {\n  element: any;\n  attachedPanel: AttachedPanel;\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const loader = panelContainer.getPanelLoader();\n    this.attachedPanel = loader.load(this.element, this.props.panel, dashboard);\n  }\n\n  componentWillUnmount() {\n    if (this.attachedPanel) {\n      this.attachedPanel.destroy();\n    }\n  }\n\n  render() {\n    // special handling for rows\n    if (this.props.panel.type === 'row') {\n      return <DashboardRow panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    if (this.props.panel.type === 'add-panel') {\n      return <AddPanelPanel panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    return (\n      <div ref={element => this.element = element} className=\"panel-height-helper\" />\n    );\n  }\n}\n\n","import angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport interface AttachedPanel {\n  destroy();\n}\n\nexport class PanelLoader {\n  /** @ngInject */\n  constructor(private $compile, private $rootScope) {}\n\n  load(elem, panel, dashboard): AttachedPanel {\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n    const panelScope = this.$rootScope.$new();\n    panelScope.panel = panel;\n    panelScope.dashboard = dashboard;\n\n    const compiledElem = this.$compile(template)(panelScope);\n    const rootNode = angular.element(elem);\n    rootNode.append(compiledElem);\n\n    return {\n      destroy: () => {\n        panelScope.$destroy();\n        compiledElem.remove();\n      },\n    };\n  }\n}\n\ncoreModule.service('panelLoader', PanelLoader);\n","import { react2AngularDirective } from 'app/core/utils/react2angular';\nimport { DashboardGrid } from './DashboardGrid';\n\nreact2AngularDirective('dashboardGrid', DashboardGrid, [\n  ['getPanelContainer', { watchDepth: 'reference', wrapApply: false }],\n]);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class FolderPickerCtrl {\n  initialTitle: string;\n  initialFolderId?: number;\n  labelClass: string;\n  onChange: any;\n  onLoad: any;\n  onCreateFolder: any;\n  enterFolderCreation: any;\n  exitFolderCreation: any;\n  enableCreateNew: boolean;\n  enableReset: boolean;\n  rootName = 'General';\n  folder: any;\n  createNewFolder: boolean;\n  newFolderName: string;\n  newFolderNameTouched: boolean;\n  hasValidationError: boolean;\n  validationError: any;\n  isEditor: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, private contextSrv) {\n    this.isEditor = this.contextSrv.isEditor;\n\n    if (!this.labelClass) {\n      this.labelClass = 'width-7';\n    }\n\n    this.loadInitialValue();\n  }\n\n  getOptions(query) {\n    const params = {\n      query: query,\n      type: 'dash-folder',\n      permission: 'Edit',\n    };\n\n    return this.backendSrv.get('api/search', params).then(result => {\n      if (\n        this.isEditor &&\n        (query === '' ||\n          query.toLowerCase() === 'g' ||\n          query.toLowerCase() === 'ge' ||\n          query.toLowerCase() === 'gen' ||\n          query.toLowerCase() === 'gene' ||\n          query.toLowerCase() === 'gener' ||\n          query.toLowerCase() === 'genera' ||\n          query.toLowerCase() === 'general')\n      ) {\n        result.unshift({ title: this.rootName, id: 0 });\n      }\n\n      if (this.isEditor && this.enableCreateNew && query === '') {\n        result.unshift({ title: '-- New Folder --', id: -1 });\n      }\n\n      if (this.enableReset && query === '' && this.initialTitle !== '') {\n        result.unshift({ title: this.initialTitle, id: null });\n      }\n\n      return _.map(result, item => {\n        return { text: item.title, value: item.id };\n      });\n    });\n  }\n\n  onFolderChange(option) {\n    if (!option) {\n      option = { value: 0, text: this.rootName };\n    } else if (option.value === -1) {\n      this.createNewFolder = true;\n      this.enterFolderCreation();\n      return;\n    }\n    this.onChange({ $folder: { id: option.value, title: option.text } });\n  }\n\n  newFolderNameChanged() {\n    this.newFolderNameTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.newFolderName)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n\n  createFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    return this.backendSrv.createFolder({ title: this.newFolderName }).then(result => {\n      appEvents.emit('alert-success', ['Folder Created', 'OK']);\n\n      this.closeCreateFolder();\n      this.folder = { text: result.title, value: result.id };\n      this.onFolderChange(this.folder);\n    });\n  }\n\n  cancelCreateFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    this.closeCreateFolder();\n    this.loadInitialValue();\n  }\n\n  private closeCreateFolder() {\n    this.exitFolderCreation();\n    this.createNewFolder = false;\n    this.hasValidationError = false;\n    this.validationError = null;\n    this.newFolderName = '';\n    this.newFolderNameTouched = false;\n  }\n\n  private loadInitialValue() {\n    const resetFolder = { text: this.initialTitle, value: null };\n    const rootFolder = { text: this.rootName, value: 0 };\n\n    this.getOptions('').then(result => {\n      let folder;\n      if (this.initialFolderId) {\n        folder = _.find(result, { value: this.initialFolderId });\n      } else if (this.enableReset && this.initialTitle && this.initialFolderId === null) {\n        folder = resetFolder;\n      }\n\n      if (!folder) {\n        if (this.isEditor) {\n          folder = rootFolder;\n        } else {\n          folder = result.length > 0 ? result[0] : resetFolder;\n        }\n      }\n\n      this.folder = folder;\n\n      // if this is not the same as our initial value notify parent\n      if (this.folder.value !== this.initialFolderId) {\n        this.onChange({ $folder: { id: this.folder.value, title: this.folder.text } });\n      }\n    });\n  }\n}\n\nexport function folderPicker() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/folder_picker/folder_picker.html',\n    controller: FolderPickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      initialTitle: '<',\n      initialFolderId: '<',\n      labelClass: '@',\n      rootName: '@',\n      onChange: '&',\n      onCreateFolder: '&',\n      enterFolderCreation: '&',\n      exitFolderCreation: '&',\n      enableCreateNew: '@',\n      enableReset: '@',\n    },\n  };\n}\n\ncoreModule.directive('folderPicker', folderPicker);\n","import { coreModule } from 'app/core/core';\n\nexport class RowOptionsCtrl {\n  row: any;\n  source: any;\n  dismiss: any;\n  onUpdated: any;\n  showDelete: boolean;\n\n  /** @ngInject */\n  constructor() {\n    this.source = this.row;\n    this.row = this.row.getSaveModel();\n  }\n\n  update() {\n    this.source.title = this.row.title;\n    this.source.repeat = this.row.repeat;\n    this.onUpdated();\n    this.dismiss();\n  }\n}\n\nexport function rowOptionsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/partials/row_options.html',\n    controller: RowOptionsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      row: '=',\n      dismiss: '&',\n      onUpdated: '&',\n    },\n  };\n}\n\ncoreModule.directive('rowOptions', rowOptionsDirective);\n","import coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class MoveToFolderCtrl {\n  dashboards: any;\n  folder: any;\n  dismiss: any;\n  afterSave: any;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  onFolderChange(folder) {\n    this.folder = folder;\n  }\n\n  save() {\n    return this.backendSrv.moveDashboards(this.dashboards, this.folder).then(result => {\n      if (result.successCount > 0) {\n        const header = `Dashboard${result.successCount === 1 ? '' : 's'} Moved`;\n        const msg = `${result.successCount} dashboard${result.successCount === 1 ? '' : 's'} moved to ${\n          this.folder.title\n        }`;\n        appEvents.emit('alert-success', [header, msg]);\n      }\n\n      if (result.totalCount === result.alreadyInFolderCount) {\n        appEvents.emit('alert-error', ['Error', `Dashboards already belongs to folder ${this.folder.title}`]);\n      }\n\n      this.dismiss();\n      return this.afterSave();\n    });\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function moveToFolderModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/move_to_folder_modal/move_to_folder.html',\n    controller: MoveToFolderCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dismiss: '&',\n      dashboards: '=',\n      afterSave: '&',\n    },\n  };\n}\n\ncoreModule.directive('moveToFolderModal', moveToFolderModal);\n","import { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SettingsCtrl {\n  dashboard: DashboardModel;\n  isOpen: boolean;\n  viewId: string;\n  json: string;\n  alertCount: number;\n  canSaveAs: boolean;\n  canSave: boolean;\n  canDelete: boolean;\n  sections: any[];\n  hasUnsavedFolderChange: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $route,\n    private $location,\n    private $rootScope,\n    private backendSrv,\n    private dashboardSrv\n  ) {\n    // temp hack for annotations and variables editors\n    // that rely on inherited scope\n    $scope.dashboard = this.dashboard;\n\n    this.$scope.$on('$destroy', () => {\n      this.dashboard.updateSubmenuVisibility();\n      this.$rootScope.$broadcast('refresh');\n      setTimeout(() => {\n        this.$rootScope.appEvent('dash-scroll', { restore: true });\n      });\n    });\n\n    this.canSaveAs = this.dashboard.meta.canEdit && contextSrv.hasEditPermissionInFolders;\n    this.canSave = this.dashboard.meta.canSave;\n    this.canDelete = this.dashboard.meta.canSave;\n\n    this.buildSectionList();\n    this.onRouteUpdated();\n\n    this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);\n    this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);\n  }\n\n  buildSectionList() {\n    this.sections = [];\n\n    if (this.dashboard.meta.canEdit) {\n      this.sections.push({\n        title: 'General',\n        id: 'settings',\n        icon: 'gicon gicon-preferences',\n      });\n      this.sections.push({\n        title: 'Annotations',\n        id: 'annotations',\n        icon: 'gicon gicon-annotation',\n      });\n      this.sections.push({\n        title: 'Variables',\n        id: 'templating',\n        icon: 'gicon gicon-variable',\n      });\n      this.sections.push({\n        title: 'Links',\n        id: 'links',\n        icon: 'gicon gicon-link',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canSave) {\n      this.sections.push({\n        title: 'Versions',\n        id: 'versions',\n        icon: 'fa fa-fw fa-history',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canAdmin) {\n      this.sections.push({\n        title: 'Permissions',\n        id: 'permissions',\n        icon: 'fa fa-fw fa-lock',\n      });\n    }\n\n    if (this.dashboard.meta.canMakeEditable) {\n      this.sections.push({\n        title: 'General',\n        icon: 'gicon gicon-preferences',\n        id: 'make_editable',\n      });\n    }\n\n    this.sections.push({\n      title: 'JSON Model',\n      id: 'dashboard_json',\n      icon: 'gicon gicon-json',\n    });\n\n    const params = this.$location.search();\n    const url = this.$location.path();\n\n    for (const section of this.sections) {\n      const sectionParams = _.defaults({ editview: section.id }, params);\n      section.url = config.appSubUrl + url + '?' + $.param(sectionParams);\n    }\n  }\n\n  onRouteUpdated() {\n    this.viewId = this.$location.search().editview;\n\n    if (this.viewId) {\n      this.json = angular.toJson(this.dashboard.getSaveModelClone(), true);\n    }\n\n    if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {\n      this.viewId = 'make_editable';\n    }\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    if (!currentSection) {\n      this.sections.unshift({\n        title: 'Not found',\n        id: '404',\n        icon: 'fa fa-fw fa-warning',\n      });\n      this.viewId = '404';\n    }\n  }\n\n  openSaveAsModal() {\n    this.dashboardSrv.showSaveAsModal();\n  }\n\n  saveDashboard() {\n    this.dashboardSrv.saveDashboard();\n  }\n\n  saveDashboardJson() {\n    this.dashboardSrv.saveJSONDashboard(this.json).then(() => {\n      this.$route.reload();\n    });\n  }\n\n  onPostSave() {\n    this.hasUnsavedFolderChange = false;\n  }\n\n  hideSettings() {\n    const urlParams = this.$location.search();\n    delete urlParams.editview;\n    setTimeout(() => {\n      this.$rootScope.$apply(() => {\n        this.$location.search(urlParams);\n      });\n    });\n  }\n\n  makeEditable() {\n    this.dashboard.editable = true;\n    this.dashboard.meta.canMakeEditable = false;\n    this.dashboard.meta.canEdit = true;\n    this.dashboard.meta.canSave = true;\n    this.canDelete = true;\n    this.viewId = 'settings';\n    this.buildSectionList();\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    this.$location.url(currentSection.url);\n  }\n\n  deleteDashboard() {\n    let confirmText = '';\n    let text2 = this.dashboard.title;\n\n    const alerts = _.sumBy(this.dashboard.panels, panel => {\n      return panel.alert ? 1 : 0;\n    });\n\n    if (alerts > 0) {\n      confirmText = 'DELETE';\n      text2 = `This dashboard contains ${alerts} alerts. Deleting this dashboard will also delete those alerts`;\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: 'Delete',\n      text: 'Do you want to delete this dashboard?',\n      text2: text2,\n      icon: 'fa-trash',\n      confirmText: confirmText,\n      yesText: 'Delete',\n      onConfirm: () => {\n        this.dashboard.meta.canSave = false;\n        this.deleteDashboardConfirmed();\n      },\n    });\n  }\n\n  deleteDashboardConfirmed() {\n    this.backendSrv.deleteDashboard(this.dashboard.uid).then(() => {\n      appEvents.emit('alert-success', ['Dashboard Deleted', this.dashboard.title + ' has been deleted']);\n      this.$location.url('/');\n    });\n  }\n\n  onFolderChange(folder) {\n    this.dashboard.meta.folderId = folder.id;\n    this.dashboard.meta.folderTitle = folder.title;\n    this.hasUnsavedFolderChange = true;\n  }\n\n  getFolder() {\n    return {\n      id: this.dashboard.meta.folderId,\n      title: this.dashboard.meta.folderTitle,\n      url: this.dashboard.meta.folderUrl,\n    };\n  }\n}\n\nexport function dashboardSettings() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/settings/settings.html',\n    controller: SettingsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\ncoreModule.directive('dashboardSettings', dashboardSettings);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport let iconMap = {\n  'external link': 'fa-external-link',\n  dashboard: 'fa-th-large',\n  question: 'fa-question',\n  info: 'fa-info',\n  bolt: 'fa-bolt',\n  doc: 'fa-file-text-o',\n  cloud: 'fa-cloud',\n};\n\nexport class DashLinkEditorCtrl {\n  dashboard: any;\n  iconMap: any;\n  mode: any;\n  link: any;\n\n  /** @ngInject */\n  constructor($scope, $rootScope) {\n    this.iconMap = iconMap;\n    this.dashboard.links = this.dashboard.links || [];\n    this.mode = 'list';\n\n    $scope.$on('$destroy', () => {\n      $rootScope.appEvent('dash-links-updated');\n    });\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.link = { type: 'dashboards', icon: 'external link' };\n  }\n\n  addLink() {\n    this.dashboard.links.push(this.link);\n    this.mode = 'list';\n  }\n\n  editLink(link) {\n    this.link = link;\n    this.mode = 'edit';\n    console.log(this.link);\n  }\n\n  saveLink() {\n    this.backToList();\n  }\n\n  moveLink(index, dir) {\n    _.move(this.dashboard.links, index, index + dir);\n  }\n\n  deleteLink(index) {\n    this.dashboard.links.splice(index, 1);\n    this.dashboard.updateSubmenuVisibility();\n  }\n}\n\nfunction dashLinksEditor() {\n  return {\n    restrict: 'E',\n    controller: DashLinkEditorCtrl,\n    templateUrl: 'public/app/features/dashboard/dashlinks/editor.html',\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashLinksEditor', dashLinksEditor);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport './link_srv';\n\nfunction panelLinksEditor() {\n  return {\n    scope: {\n      panel: '=',\n    },\n    restrict: 'E',\n    controller: 'PanelLinksEditorCtrl',\n    templateUrl: 'public/app/features/dashboard/panellinks/module.html',\n    link: () => {},\n  };\n}\n\nexport class PanelLinksEditorCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv) {\n    $scope.panel.links = $scope.panel.links || [];\n\n    $scope.addLink = () => {\n      $scope.panel.links.push({\n        type: 'dashboard',\n      });\n    };\n\n    $scope.searchDashboards = (queryStr, callback) => {\n      backendSrv.search({ query: queryStr }).then(hits => {\n        const dashboards = _.map(hits, dash => {\n          return dash.title;\n        });\n\n        callback(dashboards);\n      });\n    };\n\n    $scope.dashboardChanged = link => {\n      backendSrv.search({ query: link.dashboard }).then(hits => {\n        const dashboard = _.find(hits, { title: link.dashboard });\n        if (dashboard) {\n          if (dashboard.url) {\n            link.url = dashboard.url;\n          } else {\n            // To support legacy url's\n            link.dashUri = dashboard.uri;\n          }\n          link.title = dashboard.title;\n        }\n      });\n    };\n\n    $scope.deleteLink = link => {\n      $scope.panel.links = _.without($scope.panel.links, link);\n    };\n  }\n}\n\nangular\n  .module('grafana.directives')\n  .directive('panelLinksEditor', panelLinksEditor)\n  .controller('PanelLinksEditorCtrl', PanelLinksEditorCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { iconMap } from './editor';\n\nfunction dashLinksContainer() {\n  return {\n    scope: {\n      links: '=',\n    },\n    restrict: 'E',\n    controller: 'DashLinksContainerCtrl',\n    template: '<dash-link ng-repeat=\"link in generatedLinks\" link=\"link\"></dash-link>',\n    link: () => {},\n  };\n}\n\n/** @ngInject */\nfunction dashLink($compile, $sanitize, linkSrv) {\n  return {\n    restrict: 'E',\n    link: (scope, elem) => {\n      const link = scope.link;\n      let template =\n        '<div class=\"gf-form\">' +\n        '<a class=\"pointer gf-form-label\" data-placement=\"bottom\"' +\n        (link.asDropdown ? ' ng-click=\"fillDropdown(link)\" data-toggle=\"dropdown\"' : '') +\n        '>' +\n        '<i></i> <span></span></a>';\n\n      if (link.asDropdown) {\n        template +=\n          '<ul class=\"dropdown-menu\" role=\"menu\">' +\n          '<li ng-repeat=\"dash in link.searchHits\">' +\n          '<a href=\"{{dash.url}}\" target=\"{{dash.target}}\">{{dash.title}}</a>' +\n          '</li>' +\n          '</ul>';\n      }\n\n      template += '</div>';\n\n      elem.html(template);\n      $compile(elem.contents())(scope);\n\n      function update() {\n        const linkInfo = linkSrv.getAnchorInfo(link);\n\n        const anchor = elem.find('a');\n        const span = elem.find('span');\n        span.text(linkInfo.title);\n\n        if (!link.asDropdown) {\n          anchor.attr('href', linkInfo.href);\n          sanitizeAnchor();\n        }\n        anchor.attr('data-placement', 'bottom');\n        // tooltip\n        anchor.tooltip({\n          title: $sanitize(scope.link.tooltip),\n          html: true,\n          container: 'body',\n        });\n      }\n\n      function sanitizeAnchor() {\n        const anchor = elem.find('a');\n        const anchorSanitized = $sanitize(anchor.parent().html());\n        anchor.parent().html(anchorSanitized);\n      }\n\n      elem.find('i').attr('class', 'fa fa-fw ' + scope.link.icon);\n      elem.find('a').attr('target', scope.link.target);\n\n      // fix for menus on the far right\n      if (link.asDropdown && scope.$last) {\n        elem.find('.dropdown-menu').addClass('pull-right');\n      }\n\n      update();\n      scope.$on('refresh', update);\n    },\n  };\n}\n\nexport class DashLinksContainerCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {\n    const currentDashId = dashboardSrv.getCurrent().id;\n\n    function buildLinks(linkDef) {\n      if (linkDef.type === 'dashboards') {\n        if (!linkDef.tags) {\n          console.log('Dashboard link missing tag');\n          return $q.when([]);\n        }\n\n        if (linkDef.asDropdown) {\n          return $q.when([\n            {\n              title: linkDef.title,\n              tags: linkDef.tags,\n              keepTime: linkDef.keepTime,\n              includeVars: linkDef.includeVars,\n              target: linkDef.targetBlank ? '_blank' : '_self',\n              icon: 'fa fa-bars',\n              asDropdown: true,\n            },\n          ]);\n        }\n\n        return $scope.searchDashboards(linkDef, 7);\n      }\n\n      if (linkDef.type === 'link') {\n        return $q.when([\n          {\n            url: linkDef.url,\n            title: linkDef.title,\n            icon: iconMap[linkDef.icon],\n            tooltip: linkDef.tooltip,\n            target: linkDef.targetBlank ? '_blank' : '_self',\n            keepTime: linkDef.keepTime,\n            includeVars: linkDef.includeVars,\n          },\n        ]);\n      }\n\n      return $q.when([]);\n    }\n\n    function updateDashLinks() {\n      const promises = _.map($scope.links, buildLinks);\n\n      $q.all(promises).then(results => {\n        $scope.generatedLinks = _.flatten(results);\n      });\n    }\n\n    $scope.searchDashboards = (link, limit) => {\n      return backendSrv.search({ tag: link.tags, limit: limit }).then(results => {\n        return _.reduce(\n          results,\n          (memo, dash) => {\n            // do not add current dashboard\n            if (dash.id !== currentDashId) {\n              memo.push({\n                title: dash.title,\n                url: dash.url,\n                target: link.target === '_self' ? '' : link.target,\n                icon: 'fa fa-th-large',\n                keepTime: link.keepTime,\n                includeVars: link.includeVars,\n              });\n            }\n            return memo;\n          },\n          []\n        );\n      });\n    };\n\n    $scope.fillDropdown = link => {\n      $scope.searchDashboards(link, 100).then(results => {\n        _.each(results, hit => {\n          hit.url = linkSrv.getLinkUrl(hit);\n        });\n        link.searchHits = results;\n      });\n    };\n\n    updateDashLinks();\n    $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);\n  }\n}\n\nangular.module('grafana.directives').directive('dashLinksContainer', dashLinksContainer);\nangular.module('grafana.directives').directive('dashLink', dashLink);\nangular.module('grafana.directives').controller('DashLinksContainerCtrl', DashLinksContainerCtrl);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Tooltip from 'app/core/components/Tooltip/Tooltip';\nimport SlideDown from 'app/core/components/Animations/SlideDown';\nimport { StoreState, FolderInfo } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getDashboardPermissions,\n  addDashboardPermission,\n  removeDashboardPermission,\n  updateDashboardPermission,\n} from '../state/actions';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { store } from 'app/store/configureStore';\n\nexport interface Props {\n  dashboardId: number;\n  folder?: FolderInfo;\n  permissions: DashboardAcl[];\n  getDashboardPermissions: typeof getDashboardPermissions;\n  updateDashboardPermission: typeof updateDashboardPermission;\n  removeDashboardPermission: typeof removeDashboardPermission;\n  addDashboardPermission: typeof addDashboardPermission;\n}\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class DashboardPermissions extends PureComponent<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getDashboardPermissions(this.props.dashboardId);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeDashboardPermission(this.props.dashboardId, item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateDashboardPermission(this.props.dashboardId, item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addDashboardPermission(this.props.dashboardId, newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { permissions, folder } = this.props;\n    const { isAdding } = this.state;\n\n    return (\n      <div>\n        <div className=\"dashboard-settings__header\">\n          <div className=\"page-action-bar\">\n            <h3 className=\"d-inline-block\">Permissions</h3>\n            <Tooltip className=\"page-sub-heading-icon\" placement=\"auto\" content={PermissionsInfo}>\n              <i className=\"gicon gicon-question gicon--has-hover\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <button className=\"btn btn-success pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              <i className=\"fa fa-plus\" /> Add Permission\n            </button>\n          </div>\n        </div>\n        <SlideDown in={isAdding}>\n          <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n        </SlideDown>\n        <PermissionList\n          items={permissions}\n          onRemoveItem={this.onRemoveItem}\n          onPermissionChanged={this.onPermissionChanged}\n          isFetching={false}\n          folderInfo={folder}\n        />\n      </div>\n    );\n  }\n}\n\nfunction connectWithStore(WrappedComponent, ...args) {\n  const ConnectedWrappedComponent = connect(...args)(WrappedComponent);\n  return props => {\n    return <ConnectedWrappedComponent {...props} store={store} />;\n  };\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  permissions: state.dashboard.permissions,\n});\n\nconst mapDispatchToProps = {\n  getDashboardPermissions,\n  addDashboardPermission,\n  removeDashboardPermission,\n  updateDashboardPermission,\n};\n\nexport default connectWithStore(DashboardPermissions, mapStateToProps, mapDispatchToProps);\n","export class FolderPageLoader {\n  constructor(private backendSrv) {}\n\n  load(ctrl, uid, activeChildId) {\n    ctrl.navModel = {\n      main: {\n        icon: 'fa fa-folder-open',\n        id: 'manage-folder',\n        subTitle: 'Manage folder dashboards & permissions',\n        url: '',\n        text: '',\n        breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n        children: [\n          {\n            active: activeChildId === 'manage-folder-dashboards',\n            icon: 'fa fa-fw fa-th-large',\n            id: 'manage-folder-dashboards',\n            text: 'Dashboards',\n            url: 'dashboards',\n          },\n          {\n            active: activeChildId === 'manage-folder-permissions',\n            icon: 'fa fa-fw fa-lock',\n            id: 'manage-folder-permissions',\n            text: 'Permissions',\n            url: 'dashboards/permissions',\n          },\n          {\n            active: activeChildId === 'manage-folder-settings',\n            icon: 'fa fa-fw fa-cog',\n            id: 'manage-folder-settings',\n            text: 'Settings',\n            url: 'dashboards/settings',\n          },\n        ],\n      },\n    };\n\n    return this.backendSrv.getFolderByUid(uid).then(folder => {\n      ctrl.folderId = folder.id;\n      const folderTitle = folder.title;\n      const folderUrl = folder.url;\n      ctrl.navModel.main.text = folderTitle;\n\n      const dashTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-dashboards');\n      dashTab.url = folderUrl;\n\n      if (folder.canAdmin) {\n        const permTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-permissions');\n        permTab.url = folderUrl + '/permissions';\n\n        const settingsTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-settings');\n        settingsTab.url = folderUrl + '/settings';\n      } else {\n        ctrl.navModel.main.children = [dashTab];\n      }\n\n      return folder;\n    });\n  }\n}\n","import _ from 'lodash';\nimport config from 'app/core/config';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class DashboardImportCtrl {\n  navModel: any;\n  step: number;\n  jsonText: string;\n  parseError: string;\n  nameExists: boolean;\n  uidExists: boolean;\n  dash: any;\n  inputs: any[];\n  inputsValid: boolean;\n  gnetUrl: string;\n  gnetError: string;\n  gnetInfo: any;\n  titleTouched: boolean;\n  hasNameValidationError: boolean;\n  nameValidationError: any;\n  hasUidValidationError: boolean;\n  uidValidationError: any;\n  autoGenerateUid: boolean;\n  autoGenerateUidValue: string;\n  folderId: number;\n  initialFolderTitle: string;\n  isValidFolderSelection: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, navModelSrv, private $location, $routeParams) {\n    this.navModel = navModelSrv.getNav('create', 'import');\n\n    this.step = 1;\n    this.nameExists = false;\n    this.uidExists = false;\n    this.autoGenerateUid = true;\n    this.autoGenerateUidValue = 'auto-generated';\n    this.folderId = $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;\n    this.initialFolderTitle = 'Select a folder';\n\n    // check gnetId in url\n    if ($routeParams.gnetId) {\n      this.gnetUrl = $routeParams.gnetId;\n      this.checkGnetDashboard();\n    }\n  }\n\n  onUpload(dash) {\n    this.dash = dash;\n    this.dash.id = null;\n    this.step = 2;\n    this.inputs = [];\n\n    if (this.dash.__inputs) {\n      for (const input of this.dash.__inputs) {\n        const inputModel = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === 'datasource') {\n          this.setDatasourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = 'Specify a string constant';\n        }\n\n        this.inputs.push(inputModel);\n      }\n    }\n\n    this.inputsValid = this.inputs.length === 0;\n    this.titleChanged();\n    this.uidChanged(true);\n  }\n\n  setDatasourceOptions(input, inputModel) {\n    const sources = _.filter(config.datasources, val => {\n      return val.type === input.pluginId;\n    });\n\n    if (sources.length === 0) {\n      inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\n    } else if (!inputModel.info) {\n      inputModel.info = 'Select a ' + input.pluginName + ' data source';\n    }\n\n    inputModel.options = sources.map(val => {\n      return { text: val.name, value: val.name };\n    });\n  }\n\n  inputValueChanged() {\n    this.inputsValid = true;\n    for (const input of this.inputs) {\n      if (!input.value) {\n        this.inputsValid = false;\n      }\n    }\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n    this.nameExists = false;\n\n    this.validationSrv\n      .validateNewDashboardName(this.folderId, this.dash.title)\n      .then(() => {\n        this.nameExists = false;\n        this.hasNameValidationError = false;\n      })\n      .catch(err => {\n        if (err.type === 'EXISTING') {\n          this.nameExists = true;\n        }\n\n        this.hasNameValidationError = true;\n        this.nameValidationError = err.message;\n      });\n  }\n\n  uidChanged(initial) {\n    this.uidExists = false;\n    this.hasUidValidationError = false;\n\n    if (initial === true && this.dash.uid) {\n      this.autoGenerateUidValue = 'value set';\n    }\n\n    this.backendSrv\n      .getDashboardByUid(this.dash.uid)\n      .then(res => {\n        this.uidExists = true;\n        this.hasUidValidationError = true;\n        this.uidValidationError = `Dashboard named '${res.dashboard.title}' in folder '${\n          res.meta.folderTitle\n        }' has the same uid`;\n      })\n      .catch(err => {\n        err.isHandled = true;\n      });\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n    this.titleChanged();\n  }\n\n  onEnterFolderCreation() {\n    this.inputsValid = false;\n  }\n\n  onExitFolderCreation() {\n    this.inputValueChanged();\n  }\n\n  isValid() {\n    return this.inputsValid && this.folderId !== null;\n  }\n\n  saveDashboard() {\n    const inputs = this.inputs.map(input => {\n      return {\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: input.value,\n      };\n    });\n\n    return this.backendSrv\n      .post('api/dashboards/import', {\n        dashboard: this.dash,\n        overwrite: true,\n        inputs: inputs,\n        folderId: this.folderId,\n      })\n      .then(res => {\n        const dashUrl = locationUtil.stripBaseFromUrl(res.importedUrl);\n        this.$location.url(dashUrl);\n      });\n  }\n\n  loadJsonText() {\n    try {\n      this.parseError = '';\n      const dash = JSON.parse(this.jsonText);\n      this.onUpload(dash);\n    } catch (err) {\n      console.log(err);\n      this.parseError = err.message;\n      return;\n    }\n  }\n\n  checkGnetDashboard() {\n    this.gnetError = '';\n\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(this.gnetUrl);\n    let dashboardId;\n\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    } else {\n      this.gnetError = 'Could not find dashboard';\n    }\n\n    return this.backendSrv\n      .get('api/gnet/dashboards/' + dashboardId)\n      .then(res => {\n        this.gnetInfo = res;\n        // store reference to grafana.com\n        res.json.gnetId = res.id;\n        this.onUpload(res.json);\n      })\n      .catch(err => {\n        err.isHandled = true;\n        this.gnetError = err.data.message || err;\n      });\n  }\n\n  back() {\n    this.gnetUrl = '';\n    this.step = 1;\n    this.gnetError = '';\n    this.gnetInfo = '';\n  }\n}\n","import { FolderPageLoader } from './folder_page_loader';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class FolderDashboardsCtrl {\n  navModel: any;\n  folderId: number;\n  uid: string;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $routeParams, $location) {\n    if (this.$routeParams.uid) {\n      this.uid = $routeParams.uid;\n\n      const loader = new FolderPageLoader(this.backendSrv);\n\n      loader.load(this, this.uid, 'manage-folder-dashboards').then(folder => {\n        const url = locationUtil.stripBaseFromUrl(folder.url);\n\n        if (url !== $location.path()) {\n          $location.path(url).replace();\n        }\n      });\n    }\n  }\n}\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistsCtrl {\n  playlists: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n\n    backendSrv.get('/api/playlists').then(result => {\n      this.playlists = result.map(item => {\n        item.startUrl = `playlists/play/${item.id}`;\n        return item;\n      });\n    });\n  }\n\n  removePlaylistConfirmed(playlist) {\n    _.remove(this.playlists, { id: playlist.id });\n\n    this.backendSrv.delete('/api/playlists/' + playlist.id).then(\n      () => {\n        this.$scope.appEvent('alert-success', ['Playlist deleted', '']);\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['Unable to delete playlist', '']);\n        this.playlists.push(playlist);\n      }\n    );\n  }\n\n  removePlaylist(playlist) {\n    this.$scope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete playlist ' + playlist.name + '?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removePlaylistConfirmed(playlist);\n      },\n    });\n  }\n}\n\ncoreModule.controller('PlaylistsCtrl', PlaylistsCtrl);\n","import appEvents from 'app/core/app_events';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class CreateFolderCtrl {\n  title = '';\n  navModel: any;\n  titleTouched = false;\n  hasValidationError: boolean;\n  validationError: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, private validationSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n\n  create() {\n    if (this.hasValidationError) {\n      return;\n    }\n\n    return this.backendSrv.createFolder({ title: this.title }).then(result => {\n      appEvents.emit('alert-success', ['Folder Created', 'OK']);\n      this.$location.url(locationUtil.stripBaseFromUrl(result.url));\n    });\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.title)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n}\n","import './dashboard_ctrl';\nimport './alerting_srv';\nimport './history/history';\nimport './dashboard_loader_srv';\nimport './dashnav/dashnav';\nimport './submenu/submenu';\nimport './save_as_modal';\nimport './save_modal';\nimport './save_provisioned_modal';\nimport './shareModalCtrl';\nimport './share_snapshot_ctrl';\nimport './dashboard_srv';\nimport './view_state_srv';\nimport './validation_srv';\nimport './time_srv';\nimport './unsaved_changes_srv';\nimport './unsaved_changes_modal';\nimport './timepicker/timepicker';\nimport './upload';\nimport './export/export_modal';\nimport './export_data/export_data_modal';\nimport './ad_hoc_filters';\nimport './repeat_option/repeat_option';\nimport './dashgrid/DashboardGridDirective';\nimport './dashgrid/PanelLoader';\nimport './dashgrid/RowOptions';\nimport './folder_picker/folder_picker';\nimport './move_to_folder_modal/move_to_folder';\nimport './settings/settings';\nimport './panellinks/module';\nimport './dashlinks/module';\n\n// angular wrappers\nimport { react2AngularDirective } from 'app/core/utils/react2angular';\nimport DashboardPermissions from './permissions/DashboardPermissions';\n\nreact2AngularDirective('dashboardPermissions', DashboardPermissions, ['dashboardId', 'folder']);\n\nimport coreModule from 'app/core/core_module';\nimport { FolderDashboardsCtrl } from './folder_dashboards_ctrl';\nimport { DashboardImportCtrl } from './dashboard_import_ctrl';\nimport { CreateFolderCtrl } from './create_folder_ctrl';\n\ncoreModule.controller('FolderDashboardsCtrl', FolderDashboardsCtrl);\ncoreModule.controller('DashboardImportCtrl', DashboardImportCtrl);\ncoreModule.controller('CreateFolderCtrl', CreateFolderCtrl);\n","import coreModule from '../../core/core_module';\n\nexport class PlaylistSearchCtrl {\n  query: any;\n  tagsMode: boolean;\n\n  searchStarted: any;\n\n  /** @ngInject */\n  constructor($timeout, private backendSrv) {\n    this.query = { query: '', tag: [], starred: false, limit: 20 };\n\n    $timeout(() => {\n      this.query.query = '';\n      this.query.type = 'dash-db';\n      this.searchDashboards();\n    }, 100);\n  }\n\n  searchDashboards() {\n    this.tagsMode = false;\n    const prom: any = {};\n\n    prom.promise = this.backendSrv.search(this.query).then(result => {\n      return {\n        dashboardResult: result,\n        tagResult: [],\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n\n  showStarred() {\n    this.query.starred = !this.query.starred;\n    this.searchDashboards();\n  }\n\n  queryHasNoFilters() {\n    return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;\n  }\n\n  filterByTag(tag, evt) {\n    this.query.tag.push(tag);\n    this.searchDashboards();\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getTags() {\n    const prom: any = {};\n    prom.promise = this.backendSrv.get('/api/dashboards/tags').then(result => {\n      return {\n        dashboardResult: [],\n        tagResult: result,\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n}\n\nexport function playlistSearchDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/playlist/partials/playlist_search.html',\n    controller: PlaylistSearchCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      searchStarted: '&',\n    },\n  };\n}\n\ncoreModule.directive('playlistSearch', playlistSearchDirective);\n","import coreModule from '../../core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport { toUrlParams } from 'app/core/utils/url';\n\nclass PlaylistSrv {\n  private cancelPromise: any;\n  private dashboards: any;\n  private index: number;\n  private interval: any;\n  private startUrl: string;\n  isPlaying: boolean;\n\n  /** @ngInject */\n  constructor(private $location: any, private $timeout: any, private backendSrv: any) {}\n\n  next() {\n    this.$timeout.cancel(this.cancelPromise);\n\n    const playedAllDashboards = this.index > this.dashboards.length - 1;\n    if (playedAllDashboards) {\n      window.location.href = this.startUrl;\n      return;\n    }\n\n    const dash = this.dashboards[this.index];\n    const queryParams = this.$location.search();\n    const filteredParams = _.pickBy(queryParams, value => value !== null);\n\n    this.$location.url('dashboard/' + dash.uri + '?' + toUrlParams(filteredParams));\n\n    this.index++;\n    this.cancelPromise = this.$timeout(() => this.next(), this.interval);\n  }\n\n  prev() {\n    this.index = Math.max(this.index - 2, 0);\n    this.next();\n  }\n\n  start(playlistId) {\n    this.stop();\n\n    this.startUrl = window.location.href;\n    this.index = 0;\n    this.isPlaying = true;\n\n    this.backendSrv.get(`/api/playlists/${playlistId}`).then(playlist => {\n      this.backendSrv.get(`/api/playlists/${playlistId}/dashboards`).then(dashboards => {\n        this.dashboards = dashboards;\n        this.interval = kbn.interval_to_ms(playlist.interval);\n        this.next();\n      });\n    });\n  }\n\n  stop() {\n    if (this.isPlaying) {\n      const queryParams = this.$location.search();\n      if (queryParams.kiosk) {\n        appEvents.emit('toggle-kiosk-mode', { exit: true });\n      }\n    }\n\n    this.index = 0;\n    this.isPlaying = false;\n\n    if (this.cancelPromise) {\n      this.$timeout.cancel(this.cancelPromise);\n    }\n  }\n}\n\ncoreModule.service('playlistSrv', PlaylistSrv);\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistEditCtrl {\n  filteredDashboards: any = [];\n  filteredTags: any = [];\n  searchQuery = '';\n  loading = false;\n  playlist: any = {\n    interval: '5m',\n  };\n\n  playlistItems: any = [];\n  dashboardresult: any = [];\n  tagresult: any = [];\n  navModel: any;\n  isNew: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, private $location, $route, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n    this.isNew = !$route.current.params.id;\n\n    if ($route.current.params.id) {\n      const playlistId = $route.current.params.id;\n\n      backendSrv.get('/api/playlists/' + playlistId).then(result => {\n        this.playlist = result;\n      });\n\n      backendSrv.get('/api/playlists/' + playlistId + '/items').then(result => {\n        this.playlistItems = result;\n      });\n    }\n  }\n\n  filterFoundPlaylistItems() {\n    this.filteredDashboards = _.reject(this.dashboardresult, playlistItem => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return parseInt(listPlaylistItem.value, 10) === playlistItem.id;\n      });\n    });\n\n    this.filteredTags = _.reject(this.tagresult, tag => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return listPlaylistItem.value === tag.term;\n      });\n    });\n  }\n\n  addPlaylistItem(playlistItem) {\n    playlistItem.value = playlistItem.id.toString();\n    playlistItem.type = 'dashboard_by_id';\n    playlistItem.order = this.playlistItems.length + 1;\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  addTagPlaylistItem(tag) {\n    const playlistItem: any = {\n      value: tag.term,\n      type: 'dashboard_by_tag',\n      order: this.playlistItems.length + 1,\n      title: tag.term,\n    };\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  removePlaylistItem(playlistItem) {\n    _.remove(this.playlistItems, listedPlaylistItem => {\n      return playlistItem === listedPlaylistItem;\n    });\n    this.filterFoundPlaylistItems();\n  }\n\n  savePlaylist(playlist, playlistItems) {\n    let savePromise;\n\n    playlist.items = playlistItems;\n\n    savePromise = playlist.id\n      ? this.backendSrv.put('/api/playlists/' + playlist.id, playlist)\n      : this.backendSrv.post('/api/playlists', playlist);\n\n    savePromise.then(\n      () => {\n        this.$scope.appEvent('alert-success', ['Playlist saved', '']);\n        this.$location.path('/playlists');\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['Unable to save playlist', '']);\n      }\n    );\n  }\n\n  isPlaylistEmpty() {\n    return !this.playlistItems.length;\n  }\n\n  backToList() {\n    this.$location.path('/playlists');\n  }\n\n  searchStarted(promise) {\n    promise.then(data => {\n      this.dashboardresult = data.dashboardResult;\n      this.tagresult = data.tagResult;\n      this.filterFoundPlaylistItems();\n    });\n  }\n\n  movePlaylistItem(playlistItem, offset) {\n    const currentPosition = this.playlistItems.indexOf(playlistItem);\n    const newPosition = currentPosition + offset;\n\n    if (newPosition >= 0 && newPosition < this.playlistItems.length) {\n      this.playlistItems.splice(currentPosition, 1);\n      this.playlistItems.splice(newPosition, 0, playlistItem);\n    }\n  }\n\n  movePlaylistItemUp(playlistItem) {\n    this.movePlaylistItem(playlistItem, -1);\n  }\n\n  movePlaylistItemDown(playlistItem) {\n    this.movePlaylistItem(playlistItem, 1);\n  }\n}\n\ncoreModule.controller('PlaylistEditCtrl', PlaylistEditCtrl);\n","import angular from 'angular';\n\n/** @ngInject */\nfunction grafanaRoutes($routeProvider) {\n  $routeProvider\n    .when('/playlists', {\n      templateUrl: 'public/app/features/playlist/partials/playlists.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistsCtrl',\n    })\n    .when('/playlists/create', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/edit/:id', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/play/:id', {\n      template: '',\n      resolve: {\n        init: (playlistSrv, $route) => {\n          const playlistId = $route.current.params.id;\n          playlistSrv.start(playlistId);\n        },\n      },\n    });\n}\n\nangular.module('grafana.routes').config(grafanaRoutes);\n","import $ from 'jquery';\nimport { coreModule } from 'app/core/core';\n\nconst template = `\n<span class=\"panel-title\">\n  <span class=\"icon-gf panel-alert-icon\"></span>\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\n  <span class=\"panel-menu-container dropdown\">\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\n      <li>\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\n          <i class=\"fa fa-cog\"></i> Edit <span class=\"dropdown-menu-item-shortcut\">e</span>\n        </a>\n      </li>\n      <li class=\"dropdown-submenu\">\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\n        <ul class=\"dropdown-menu panel-menu\">\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> Add Annotation</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> Toggle Legend</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> Export to CSV</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> View JSON</a></li>\n        </ul>\n      </li>\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> Remove</a></li>\n    </ul>\n  </span>\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\n</span>`;\n\nfunction renderMenuItem(item, ctrl) {\n  let html = '';\n  let listItemClass = '';\n\n  if (item.divider) {\n    return '<li class=\"divider\"></li>';\n  }\n\n  if (item.submenu) {\n    listItemClass = 'dropdown-submenu';\n  }\n\n  html += `<li class=\"${listItemClass}\"><a `;\n\n  if (item.click) {\n    html += ` ng-click=\"${item.click}\"`;\n  }\n  if (item.href) {\n    html += ` href=\"${item.href}\"`;\n  }\n\n  html += `><i class=\"${item.icon}\"></i>`;\n  html += `<span class=\"dropdown-item-text\">${item.text}</span>`;\n\n  if (item.shortcut) {\n    html += `<span class=\"dropdown-menu-item-shortcut\">${item.shortcut}</span>`;\n  }\n\n  html += `</a>`;\n\n  if (item.submenu) {\n    html += '<ul class=\"dropdown-menu dropdown-menu--menu panel-menu\">';\n    for (const subitem of item.submenu) {\n      html += renderMenuItem(subitem, ctrl);\n    }\n    html += '</ul>';\n  }\n\n  html += `</li>`;\n  return html;\n}\n\nfunction createMenuTemplate(ctrl) {\n  let html = '';\n\n  for (const item of ctrl.getMenu()) {\n    html += renderMenuItem(item, ctrl);\n  }\n\n  return html;\n}\n\n/** @ngInject */\nfunction panelHeader($compile) {\n  return {\n    restrict: 'E',\n    template: template,\n    link: (scope, elem, attrs) => {\n      const menuElem = elem.find('.panel-menu');\n      let menuScope;\n      let isDragged;\n\n      elem.click(evt => {\n        const targetClass = evt.target.className;\n\n        // remove existing scope\n        if (menuScope) {\n          menuScope.$destroy();\n        }\n\n        menuScope = scope.$new();\n        const menuHtml = createMenuTemplate(scope.ctrl);\n        menuElem.html(menuHtml);\n        $compile(menuElem)(menuScope);\n\n        if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {\n          togglePanelMenu(evt);\n        }\n      });\n\n      elem.find('.panel-menu-toggle').click(() => {\n        togglePanelStackPosition();\n      });\n\n      function togglePanelMenu(e) {\n        if (!isDragged) {\n          e.stopPropagation();\n          togglePanelStackPosition();\n          elem.find('[data-toggle=dropdown]').dropdown('toggle');\n        }\n      }\n\n      /**\n       * Hack for adding special class 'dropdown-menu-open' to the panel.\n       * This class sets z-index for panel and prevents menu overlapping.\n       */\n      function togglePanelStackPosition() {\n        const menuOpenClass = 'dropdown-menu-open';\n        const panelGridClass = '.react-grid-item.panel';\n\n        let panelElem = elem\n          .find('[data-toggle=dropdown]')\n          .parentsUntil('.panel')\n          .parent();\n        const menuElem = elem.find('[data-toggle=dropdown]').parent();\n        panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;\n        if (panelElem) {\n          panelElem = $(panelElem);\n          $(panelGridClass).removeClass(menuOpenClass);\n          const state = !menuElem.hasClass('open');\n          panelElem.toggleClass(menuOpenClass, state);\n        }\n      }\n\n      let mouseX, mouseY;\n      elem.mousedown(e => {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n      });\n\n      elem.mouseup(e => {\n        if (mouseX === e.pageX && mouseY === e.pageY) {\n          isDragged = false;\n        } else {\n          isDragged = true;\n        }\n      });\n    },\n  };\n}\n\ncoreModule.directive('panelHeader', panelHeader);\n","import './playlists_ctrl';\nimport './playlist_search';\nimport './playlist_srv';\nimport './playlist_edit_ctrl';\nimport './playlist_routes';\n","import angular from 'angular';\nimport $ from 'jquery';\nimport Drop from 'tether-drop';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nconst panelTemplate = `\n  <div class=\"panel-container\">\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\n      <span class=\"panel-info-corner\">\n        <i class=\"fa\"></i>\n        <span class=\"panel-info-corner-inner\"></span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h3 class=\"tabbed-view-panel-title\">\n          {{ctrl.pluginName}}\n        </h3>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nmodule.directive('grafanaPanel', ($rootScope, $document, $timeout) => {\n  return {\n    restrict: 'E',\n    template: panelTemplate,\n    transclude: true,\n    scope: { ctrl: '=' },\n    link: (scope, elem) => {\n      const panelContainer = elem.find('.panel-container');\n      const panelContent = elem.find('.panel-content');\n      const cornerInfoElem = elem.find('.panel-info-corner');\n      const ctrl = scope.ctrl;\n      let infoDrop;\n      let panelScrollbar;\n\n      // the reason for handling these classes this way is for performance\n      // limit the watchers on panels etc\n      let transparentLastState = false;\n      let lastHasAlertRule = false;\n      let lastAlertState;\n      let hasAlertRule;\n\n      function mouseEnter() {\n        panelContainer.toggleClass('panel-hover-highlight', true);\n        ctrl.dashboard.setPanelFocus(ctrl.panel.id);\n      }\n\n      function mouseLeave() {\n        panelContainer.toggleClass('panel-hover-highlight', false);\n        ctrl.dashboard.setPanelFocus(0);\n      }\n\n      function panelHeightUpdated() {\n        panelContent.css({ height: ctrl.height + 'px' });\n      }\n\n      function resizeScrollableContent() {\n        if (panelScrollbar) {\n          panelScrollbar.update();\n        }\n      }\n\n      // set initial transparency\n      if (ctrl.panel.transparent) {\n        transparentLastState = true;\n        panelContainer.addClass('panel-transparent', true);\n      }\n\n      // update scrollbar after mounting\n      ctrl.events.on('component-did-mount', () => {\n        if (ctrl.__proto__.constructor.scrollable) {\n          const scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';\n          const scrollerClass = 'baron__scroller';\n          const scrollBarHTML = `\n            <div class=\"baron__track\">\n              <div class=\"baron__bar\"></div>\n            </div>\n          `;\n\n          const scrollRoot = panelContent;\n          const scroller = panelContent.find(':first').find(':first');\n\n          scrollRoot.addClass(scrollRootClass);\n          $(scrollBarHTML).appendTo(scrollRoot);\n          scroller.addClass(scrollerClass);\n\n          panelScrollbar = baron({\n            root: scrollRoot[0],\n            scroller: scroller[0],\n            bar: '.baron__bar',\n            barOnCls: '_scrollbar',\n            scrollingCls: '_scrolling',\n          });\n\n          panelScrollbar.scroll();\n        }\n      });\n\n      ctrl.events.on('panel-size-changed', () => {\n        ctrl.calculatePanelHeight();\n        panelHeightUpdated();\n        $timeout(() => {\n          resizeScrollableContent();\n          ctrl.render();\n        });\n      });\n\n      // set initial height\n      ctrl.calculatePanelHeight();\n      panelHeightUpdated();\n\n      ctrl.events.on('render', () => {\n        if (transparentLastState !== ctrl.panel.transparent) {\n          panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);\n          transparentLastState = ctrl.panel.transparent;\n        }\n\n        hasAlertRule = ctrl.panel.alert !== undefined;\n        if (lastHasAlertRule !== hasAlertRule) {\n          panelContainer.toggleClass('panel-has-alert', hasAlertRule);\n\n          lastHasAlertRule = hasAlertRule;\n        }\n\n        if (ctrl.alertState) {\n          if (lastAlertState) {\n            panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          }\n\n          if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {\n            panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);\n          }\n\n          lastAlertState = ctrl.alertState.state;\n        } else if (lastAlertState) {\n          panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          lastAlertState = null;\n        }\n      });\n\n      function updatePanelCornerInfo() {\n        const cornerMode = ctrl.getInfoMode();\n        cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;\n\n        if (cornerMode) {\n          if (infoDrop) {\n            infoDrop.destroy();\n          }\n\n          infoDrop = new Drop({\n            target: cornerInfoElem[0],\n            content: () => {\n              return ctrl.getInfoContent({ mode: 'tooltip' });\n            },\n            classes: ctrl.error ? 'drop-error' : 'drop-help',\n            openOn: 'hover',\n            hoverOpenDelay: 100,\n            tetherOptions: {\n              attachment: 'bottom left',\n              targetAttachment: 'top left',\n              constraints: [\n                {\n                  to: 'window',\n                  attachment: 'together',\n                  pin: true,\n                },\n              ],\n            },\n          });\n        }\n      }\n\n      scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);\n      scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);\n\n      cornerInfoElem.on('click', () => {\n        infoDrop.close();\n        scope.$apply(ctrl.openInspector.bind(ctrl));\n      });\n\n      elem.on('mouseenter', mouseEnter);\n      elem.on('mouseleave', mouseLeave);\n\n      scope.$on('$destroy', () => {\n        elem.off();\n        cornerInfoElem.off();\n\n        if (infoDrop) {\n          infoDrop.destroy();\n        }\n\n        if (panelScrollbar) {\n          panelScrollbar.dispose();\n        }\n      });\n    },\n  };\n});\n\nmodule.directive('panelHelpCorner', $rootScope => {\n  return {\n    restrict: 'E',\n    template: `\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\n    </span>\n    </span>\n    `,\n    link: (scope, elem) => {},\n  };\n});\n","import angular from 'angular';\nimport locationUtil from 'app/core/utils/location_util';\nimport appEvents from 'app/core/app_events';\n\nexport class SoloPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv, backendSrv) {\n    let panelId;\n\n    $scope.init = () => {\n      contextSrv.sidemenu = false;\n      appEvents.emit('toggle-sidemenu-hidden');\n\n      const params = $location.search();\n      panelId = parseInt(params.panelId, 10);\n\n      $scope.onAppEvent('dashboard-initialized', $scope.initPanelScope);\n\n      // if no uid, redirect to new route based on slug\n      if (!($routeParams.type === 'script' || $routeParams.type === 'snapshot') && !$routeParams.uid) {\n        backendSrv.getDashboardBySlug($routeParams.slug).then(res => {\n          if (res) {\n            const url = locationUtil.stripBaseFromUrl(res.meta.url.replace('/d/', '/d-solo/'));\n            $location.path(url).replace();\n          }\n        });\n        return;\n      }\n\n      dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug, $routeParams.uid).then(result => {\n        result.meta.soloMode = true;\n        $scope.initDashboard(result, $scope);\n      });\n    };\n\n    $scope.initPanelScope = () => {\n      const panelInfo = $scope.dashboard.getPanelInfoById(panelId);\n\n      // fake row ctrl scope\n      $scope.ctrl = {\n        dashboard: $scope.dashboard,\n      };\n\n      $scope.panel = panelInfo.panel;\n      $scope.panel.soloMode = true;\n      $scope.$index = 0;\n\n      if (!$scope.panel) {\n        $scope.appEvent('alert-error', ['Panel not found', '']);\n        return;\n      }\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.routes').controller('SoloPanelCtrl', SoloPanelCtrl);\n","import angular from 'angular';\n\nconst directiveModule = angular.module('grafana.directives');\n\n/** @ngInject */\nfunction panelEditorTab(dynamicDirectiveSrv) {\n  return dynamicDirectiveSrv.create({\n    scope: {\n      ctrl: '=',\n      editorTab: '=',\n      index: '=',\n    },\n    directive: scope => {\n      const pluginId = scope.ctrl.pluginId;\n      const tabIndex = scope.index;\n      // create a wrapper for directiveFn\n      // required for metrics tab directive\n      // that is the same for many panels but\n      // given different names in this function\n      const fn = () => scope.editorTab.directiveFn();\n\n      return Promise.resolve({\n        name: `panel-editor-tab-${pluginId}${tabIndex}`,\n        fn: fn,\n      });\n    },\n  });\n}\n\ndirectiveModule.directive('panelEditorTab', panelEditorTab);\n","import angular from 'angular';\n\nconst module = angular.module('grafana.directives');\n\nexport class QueryRowCtrl {\n  collapsedText: string;\n  canCollapse: boolean;\n  getCollapsedText: any;\n  target: any;\n  queryCtrl: any;\n  panelCtrl: any;\n  panel: any;\n  collapsed: any;\n\n  constructor() {\n    this.panelCtrl = this.queryCtrl.panelCtrl;\n    this.target = this.queryCtrl.target;\n    this.panel = this.panelCtrl.panel;\n\n    if (!this.target.refId) {\n      this.target.refId = this.panelCtrl.dashboard.getNextQueryLetter(this.panel);\n    }\n\n    this.toggleCollapse(true);\n    if (this.target.isNew) {\n      delete this.target.isNew;\n      this.toggleCollapse(false);\n    }\n\n    if (this.panel.targets.length < 4) {\n      this.collapsed = false;\n    }\n  }\n\n  toggleHideQuery() {\n    this.target.hide = !this.target.hide;\n    this.panelCtrl.refresh();\n  }\n\n  toggleCollapse(init) {\n    if (!this.canCollapse) {\n      return;\n    }\n\n    if (!this.panelCtrl.__collapsedQueryCache) {\n      this.panelCtrl.__collapsedQueryCache = {};\n    }\n\n    if (init) {\n      this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;\n    } else {\n      this.collapsed = !this.collapsed;\n      this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;\n    }\n\n    try {\n      this.collapsedText = this.queryCtrl.getCollapsedText();\n    } catch (e) {\n      const err = e.message || e.toString();\n      this.collapsedText = 'Error: ' + err;\n    }\n  }\n\n  toggleEditorMode() {\n    if (this.canCollapse && this.collapsed) {\n      this.collapsed = false;\n    }\n\n    this.queryCtrl.toggleEditorMode();\n  }\n\n  removeQuery() {\n    if (this.panelCtrl.__collapsedQueryCache) {\n      delete this.panelCtrl.__collapsedQueryCache[this.target.refId];\n    }\n\n    this.panelCtrl.removeQuery(this.target);\n  }\n\n  duplicateQuery() {\n    const clone = angular.copy(this.target);\n    this.panelCtrl.addQuery(clone);\n  }\n\n  moveQuery(direction) {\n    this.panelCtrl.moveQuery(this.target, direction);\n  }\n}\n\n/** @ngInject */\nfunction queryEditorRowDirective() {\n  return {\n    restrict: 'E',\n    controller: QueryRowCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/panel/partials/query_editor_row.html',\n    transclude: true,\n    scope: {\n      queryCtrl: '=',\n      canCollapse: '=',\n      hasTextEditMode: '=',\n    },\n  };\n}\n\nmodule.directive('queryEditorRow', queryEditorRowDirective);\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { coreModule, JsonExplorer } from 'app/core/core';\n\nconst template = `\n<div class=\"query-troubleshooter\" ng-if=\"ctrl.isOpen\">\n  <div class=\"query-troubleshooter__header\">\n    <a class=\"pointer\" ng-click=\"ctrl.toggleMocking()\">Mock Response</a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-hide=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-plus-square-o\"></i> Expand All\n    </a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-show=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-minus-square-o\"></i> Collapse All\n    </a>\n    <a class=\"pointer\" clipboard-button=\"ctrl.getClipboardText()\"><i class=\"fa fa-clipboard\"></i> Copy to Clipboard</a>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-hide=\"ctrl.isMocking\">\n    <i class=\"fa fa-spinner fa-spin\" ng-show=\"ctrl.isLoading\"></i>\n    <div class=\"query-troubleshooter-json\"></div>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-show=\"ctrl.isMocking\">\n    <div class=\"gf-form p-l-1 gf-form--v-stretch\">\n\t\t\t<textarea class=\"gf-form-input\" style=\"width: 95%\" rows=\"10\" ng-model=\"ctrl.mockedResponse\"  placeholder=\"JSON\"></textarea>\n    </div>\n  </div>\n</div>\n`;\n\nexport class QueryTroubleshooterCtrl {\n  isOpen: any;\n  isLoading: boolean;\n  showResponse: boolean;\n  panelCtrl: any;\n  renderJsonExplorer: (data) => void;\n  onRequestErrorEventListener: any;\n  onRequestResponseEventListener: any;\n  hasError: boolean;\n  allNodesExpanded: boolean;\n  isMocking: boolean;\n  mockedResponse: string;\n  jsonExplorer: JsonExplorer;\n\n  /** @ngInject */\n  constructor($scope, private $timeout) {\n    this.onRequestErrorEventListener = this.onRequestError.bind(this);\n    this.onRequestResponseEventListener = this.onRequestResponse.bind(this);\n\n    appEvents.on('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.on('ds-request-error', this.onRequestErrorEventListener);\n\n    $scope.$on('$destroy', this.removeEventsListeners.bind(this));\n    $scope.$watch('ctrl.isOpen', this.stateChanged.bind(this));\n  }\n\n  removeEventsListeners() {\n    appEvents.off('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.off('ds-request-error', this.onRequestErrorEventListener);\n  }\n\n  toggleMocking() {\n    this.isMocking = !this.isMocking;\n  }\n\n  onRequestError(err) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    this.isOpen = true;\n    this.hasError = true;\n    this.onRequestResponse(err);\n  }\n\n  stateChanged() {\n    if (this.isOpen) {\n      this.panelCtrl.refresh();\n      this.isLoading = true;\n    }\n  }\n\n  getClipboardText(): string {\n    if (this.jsonExplorer) {\n      return JSON.stringify(this.jsonExplorer.json, null, 2);\n    }\n    return '';\n  }\n\n  handleMocking(data) {\n    let mockedData;\n    try {\n      mockedData = JSON.parse(this.mockedResponse);\n    } catch (err) {\n      appEvents.emit('alert-error', ['Failed to parse mocked response']);\n      return;\n    }\n\n    data.data = mockedData;\n  }\n\n  onRequestResponse(data) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    if (this.isMocking) {\n      this.handleMocking(data);\n      return;\n    }\n\n    this.isLoading = false;\n    data = _.cloneDeep(data);\n\n    if (data.headers) {\n      delete data.headers;\n    }\n\n    if (data.config) {\n      data.request = data.config;\n      delete data.config;\n      delete data.request.transformRequest;\n      delete data.request.transformResponse;\n      delete data.request.paramSerializer;\n      delete data.request.jsonpCallbackParam;\n      delete data.request.headers;\n      delete data.request.requestId;\n      delete data.request.inspect;\n      delete data.request.retry;\n      delete data.request.timeout;\n    }\n\n    if (data.data) {\n      data.response = data.data;\n\n      if (data.status === 200) {\n        // if we are in error state, assume we automatically opened\n        // and auto close it again\n        if (this.hasError) {\n          this.hasError = false;\n          this.isOpen = false;\n        }\n      }\n\n      delete data.data;\n      delete data.status;\n      delete data.statusText;\n      delete data.$$config;\n    }\n\n    this.$timeout(_.partial(this.renderJsonExplorer, data));\n  }\n\n  toggleExpand(depth) {\n    if (this.jsonExplorer) {\n      this.allNodesExpanded = !this.allNodesExpanded;\n      this.jsonExplorer.openAtDepth(this.allNodesExpanded ? 20 : 1);\n    }\n  }\n}\n\nexport function queryTroubleshooter() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: QueryTroubleshooterCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n      isOpen: '=',\n    },\n    link: (scope, elem, attrs, ctrl) => {\n      ctrl.renderJsonExplorer = data => {\n        const jsonElem = elem.find('.query-troubleshooter-json');\n\n        ctrl.jsonExplorer = new JsonExplorer(data, 3, {\n          animateOpen: true,\n        });\n\n        const html = ctrl.jsonExplorer.render(true);\n        jsonElem.html(html);\n      };\n    },\n  };\n}\n\ncoreModule.directive('queryTroubleshooter', queryTroubleshooter);\n","import './panel_header';\nimport './panel_directive';\nimport './solo_panel_ctrl';\nimport './query_ctrl';\nimport './panel_editor_tab';\nimport './query_editor_row';\nimport './query_troubleshooter';\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport Remarkable from 'remarkable';\nimport _ from 'lodash';\n\nexport class OrgUsersCtrl {\n  unfiltered: any;\n  users: any;\n  pendingInvites: any;\n  editor: any;\n  navModel: any;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n  externalUserMngInfo: string;\n  canInvite: boolean;\n  searchQuery: string;\n  showInvites: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv, $sce) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.get();\n    this.externalUserMngLinkUrl = config.externalUserMngLinkUrl;\n    this.externalUserMngLinkName = config.externalUserMngLinkName;\n    this.canInvite = !config.disableLoginForm && !config.externalUserMngLinkName;\n\n    // render external user management info markdown\n    if (config.externalUserMngInfo) {\n      this.externalUserMngInfo = new Remarkable({\n        linkTarget: '__blank',\n      }).render(config.externalUserMngInfo);\n    }\n  }\n\n  get() {\n    this.backendSrv.get('/api/org/users').then(users => {\n      this.users = users;\n      this.unfiltered = users;\n    });\n    this.backendSrv.get('/api/org/invites').then(pendingInvites => {\n      this.pendingInvites = pendingInvites;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.users = _.filter(this.unfiltered, item => {\n      return regex.test(item.email) || regex.test(item.login);\n    });\n  }\n\n  updateOrgUser(user) {\n    this.backendSrv.patch('/api/org/users/' + user.userId, user);\n  }\n\n  removeUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete user ' + user.login + '?',\n      yesText: 'Delete',\n      icon: 'fa-warning',\n      onConfirm: () => {\n        this.removeUserConfirmed(user);\n      },\n    });\n  }\n\n  removeUserConfirmed(user) {\n    this.backendSrv.delete('/api/org/users/' + user.userId).then(this.get.bind(this));\n  }\n\n  revokeInvite(invite, evt) {\n    evt.stopPropagation();\n    this.backendSrv.patch('/api/org/invites/' + invite.code + '/revoke').then(this.get.bind(this));\n  }\n\n  copyInviteToClipboard(evt) {\n    evt.stopPropagation();\n  }\n\n  getInviteUrl(invite) {\n    return invite.url;\n  }\n}\n\ncoreModule.controller('OrgUsersCtrl', OrgUsersCtrl);\n","import config from 'app/core/config';\nimport { coreModule } from 'app/core/core';\n\nexport class ProfileCtrl {\n  user: any;\n  oldTheme: any;\n  teams: any = [];\n  orgs: any = [];\n  userForm: any;\n  showTeamsList = false;\n  showOrgsList = false;\n  readonlyLoginFields = config.disableLoginForm;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private contextSrv, private $location, navModelSrv) {\n    this.getUser();\n    this.getUserTeams();\n    this.getUserOrgs();\n    this.navModel = navModelSrv.getNav('profile', 'profile-settings', 0);\n  }\n\n  getUser() {\n    this.backendSrv.get('/api/user').then(user => {\n      this.user = user;\n      this.user.theme = user.theme || 'dark';\n    });\n  }\n\n  getUserTeams() {\n    this.backendSrv.get('/api/user/teams').then(teams => {\n      this.teams = teams;\n      this.showTeamsList = this.teams.length > 0;\n    });\n  }\n\n  getUserOrgs() {\n    this.backendSrv.get('/api/user/orgs').then(orgs => {\n      this.orgs = orgs;\n      this.showOrgsList = orgs.length > 1;\n    });\n  }\n\n  setUsingOrg(org) {\n    this.backendSrv.post('/api/user/using/' + org.orgId).then(() => {\n      window.location.href = config.appSubUrl + '/profile';\n    });\n  }\n\n  update() {\n    if (!this.userForm.$valid) {\n      return;\n    }\n\n    this.backendSrv.put('/api/user/', this.user).then(() => {\n      this.contextSrv.user.name = this.user.name || this.user.login;\n      if (this.oldTheme !== this.user.theme) {\n        window.location.href = config.appSubUrl + this.$location.path();\n      }\n    });\n  }\n}\n\ncoreModule.controller('ProfileCtrl', ProfileCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SelectOrgCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, contextSrv) {\n    contextSrv.sidemenu = false;\n\n    $scope.navModel = {\n      main: {\n        icon: 'gicon gicon-branding',\n        subTitle: 'Preferences',\n        text: 'Select active organization',\n      },\n    };\n\n    $scope.init = () => {\n      $scope.getUserOrgs();\n    };\n\n    $scope.getUserOrgs = () => {\n      backendSrv.get('/api/user/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.setUsingOrg = org => {\n      backendSrv.post('/api/user/using/' + org.orgId).then(() => {\n        window.location.href = config.appSubUrl + '/';\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('SelectOrgCtrl', SelectOrgCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class ChangePasswordCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, $location, navModelSrv) {\n    $scope.command = {};\n    $scope.authProxyEnabled = config.authProxyEnabled;\n    $scope.ldapEnabled = config.ldapEnabled;\n    $scope.navModel = navModelSrv.getNav('profile', 'change-password', 0);\n\n    $scope.changePassword = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      if ($scope.command.newPassword !== $scope.command.confirmNew) {\n        $scope.appEvent('alert-warning', ['New passwords do not match', '']);\n        return;\n      }\n\n      backendSrv.put('/api/user/password', $scope.command).then(() => {\n        $location.path('profile');\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ChangePasswordCtrl', ChangePasswordCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class NewOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, navModelSrv) {\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n    $scope.newOrg = { name: '' };\n\n    $scope.createOrg = () => {\n      backendSrv.post('/api/orgs/', $scope.newOrg).then(result => {\n        backendSrv.post('/api/user/using/' + result.orgId).then(() => {\n          window.location.href = config.appSubUrl + '/org';\n        });\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('NewOrgCtrl', NewOrgCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class UserInviteCtrl {\n  navModel: any;\n  invite: any;\n  inviteForm: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $location) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.invite = {\n      name: '',\n      email: '',\n      role: 'Editor',\n      sendEmail: true,\n    };\n  }\n\n  sendInvite() {\n    if (!this.inviteForm.$valid) {\n      return;\n    }\n\n    return this.backendSrv.post('/api/org/invites', this.invite).then(() => {\n      this.$location.path('org/users/');\n    });\n  }\n}\n\ncoreModule.controller('UserInviteCtrl', UserInviteCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport default class CreateTeamCtrl {\n  name: string;\n  email: string;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'teams', 0);\n  }\n\n  create() {\n    const payload = {\n      name: this.name,\n      email: this.email,\n    };\n    this.backendSrv.post('/api/teams', payload).then(result => {\n      if (result.teamId) {\n        this.$location.path('/org/teams/edit/' + result.teamId);\n      }\n    });\n  }\n}\n\ncoreModule.controller('CreateTeamCtrl', CreateTeamCtrl);\n","import angular from 'angular';\n\nexport class OrgDetailsCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, contextSrv, navModelSrv) {\n    $scope.init = () => {\n      $scope.getOrgInfo();\n      $scope.navModel = navModelSrv.getNav('cfg', 'org-settings', 0);\n    };\n\n    $scope.getOrgInfo = () => {\n      backendSrv.get('/api/org').then(org => {\n        $scope.org = org;\n        $scope.address = org.address;\n        contextSrv.user.orgName = org.name;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.orgForm.$valid) {\n        return;\n      }\n      const data = { name: $scope.org.name };\n      backendSrv.put('/api/org', data).then($scope.getOrgInfo);\n    };\n\n    $scope.updateAddress = () => {\n      if (!$scope.addressForm.$valid) {\n        return;\n      }\n      backendSrv.put('/api/org/address', $scope.address).then($scope.getOrgInfo);\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('OrgDetailsCtrl', OrgDetailsCtrl);\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\n\nexport class PrefsControlCtrl {\n  prefs: any;\n  oldTheme: any;\n  prefsForm: any;\n  mode: string;\n\n  timezones: any = [\n    { value: '', text: 'Default' },\n    { value: 'browser', text: 'Local browser time' },\n    { value: 'utc', text: 'UTC' },\n  ];\n  themes: any = [{ value: '', text: 'Default' }, { value: 'dark', text: 'Dark' }, { value: 'light', text: 'Light' }];\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location) {}\n\n  $onInit() {\n    return this.backendSrv.get(`/api/${this.mode}/preferences`).then(prefs => {\n      this.prefs = prefs;\n      this.oldTheme = prefs.theme;\n    });\n  }\n\n  updatePrefs() {\n    if (!this.prefsForm.$valid) {\n      return;\n    }\n\n    const cmd = {\n      theme: this.prefs.theme,\n      timezone: this.prefs.timezone,\n      homeDashboardId: this.prefs.homeDashboardId,\n    };\n\n    this.backendSrv.put(`/api/${this.mode}/preferences`, cmd).then(() => {\n      window.location.href = config.appSubUrl + this.$location.path();\n    });\n  }\n}\n\nconst template = `\n<form name=\"ctrl.prefsForm\" class=\"section gf-form-group\">\n  <h3 class=\"page-heading\">Preferences</h3>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">UI Theme</span>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.theme\" ng-options=\"f.value as f.text for f in ctrl.themes\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">\n      Home Dashboard\n      <info-popover mode=\"right-normal\">\n        Not finding dashboard you want? Star it first, then it should appear in this select box.\n      </info-popover>\n    </span>\n    <dashboard-selector class=\"gf-form-select-wrapper max-width-20\" model=\"ctrl.prefs.homeDashboardId\">\n    </dashboard-selector>\n  </div>\n\n  <div class=\"gf-form\">\n    <label class=\"gf-form-label width-11\">Timezone</label>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.timezone\" ng-options=\"f.value as f.text for f in ctrl.timezones\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form-button-row\">\n    <button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.updatePrefs()\">Save</button>\n  </div>\n</form>\n`;\n\nexport function prefsControlDirective() {\n  return {\n    restrict: 'E',\n    controller: PrefsControlCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    template: template,\n    scope: {\n      mode: '@',\n    },\n  };\n}\n\ncoreModule.directive('prefsControl', prefsControlDirective);\n","import './org_users_ctrl';\nimport './profile_ctrl';\nimport './org_users_ctrl';\nimport './select_org_ctrl';\nimport './change_password_ctrl';\nimport './new_org_ctrl';\nimport './user_invite_ctrl';\nimport './create_team_ctrl';\nimport './org_details_ctrl';\nimport './prefs_control';\n","export default class AdminListUsersCtrl {\n  users: any;\n  pages = [];\n  perPage = 50;\n  page = 1;\n  totalPages: number;\n  showPaging = false;\n  query: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n    this.query = '';\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.backendSrv\n      .get(`/api/users/search?perpage=${this.perPage}&page=${this.page}&query=${this.query}`)\n      .then(result => {\n        this.users = result.users;\n        this.page = result.page;\n        this.perPage = result.perPage;\n        this.totalPages = Math.ceil(result.totalCount / result.perPage);\n        this.showPaging = this.totalPages > 1;\n        this.pages = [];\n\n        for (let i = 1; i < this.totalPages + 1; i++) {\n          this.pages.push({ page: i, current: i === this.page });\n        }\n      });\n  }\n\n  navigateToPage(page) {\n    this.page = page.page;\n    this.getUsers();\n  }\n\n  deleteUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Do you want to delete ' + user.login + '?',\n      icon: 'fa-trash',\n      yesText: 'Delete',\n      onConfirm: () => {\n        this.backendSrv.delete('/api/admin/users/' + user.id).then(() => {\n          this.getUsers();\n        });\n      },\n    });\n  }\n}\n","import _ from 'lodash';\n\nexport default class AdminEditUserCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.user = {};\n    $scope.newOrg = { name: '', role: 'Editor' };\n    $scope.permissions = {};\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n\n    $scope.init = () => {\n      if ($routeParams.id) {\n        $scope.getUser($routeParams.id);\n        $scope.getUserOrgs($routeParams.id);\n      }\n    };\n\n    $scope.getUser = id => {\n      backendSrv.get('/api/users/' + id).then(user => {\n        $scope.user = user;\n        $scope.user_id = id;\n        $scope.permissions.isGrafanaAdmin = user.isGrafanaAdmin;\n      });\n    };\n\n    $scope.setPassword = () => {\n      if (!$scope.passwordForm.$valid) {\n        return;\n      }\n\n      const payload = { password: $scope.password };\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/password', payload).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updatePermissions = () => {\n      const payload = $scope.permissions;\n\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/permissions', payload).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.create = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.post('/api/admin/users', $scope.user).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.getUserOrgs = id => {\n      backendSrv.get('/api/users/' + id + '/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/users/' + $scope.user_id, $scope.user).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updateOrgUser = orgUser => {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id, orgUser).then(() => {});\n    };\n\n    $scope.removeOrgUser = orgUser => {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id).then(() => {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.orgsSearchCache = [];\n\n    $scope.searchOrgs = (queryStr, callback) => {\n      if ($scope.orgsSearchCache.length > 0) {\n        callback(_.map($scope.orgsSearchCache, 'name'));\n        return;\n      }\n\n      backendSrv.get('/api/orgs', { query: '' }).then(result => {\n        $scope.orgsSearchCache = result;\n        callback(_.map(result, 'name'));\n      });\n    };\n\n    $scope.addOrgUser = () => {\n      if (!$scope.addOrgForm.$valid) {\n        return;\n      }\n\n      const orgInfo = _.find($scope.orgsSearchCache, {\n        name: $scope.newOrg.name,\n      });\n      if (!orgInfo) {\n        return;\n      }\n\n      $scope.newOrg.loginOrEmail = $scope.user.login;\n\n      backendSrv.post('/api/orgs/' + orgInfo.id + '/users/', $scope.newOrg).then(() => {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n","\nexport default class AdminEditOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.init = () => {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n\n      if ($routeParams.id) {\n        $scope.getOrg($routeParams.id);\n        $scope.getOrgUsers($routeParams.id);\n      }\n    };\n\n    $scope.getOrg = id => {\n      backendSrv.get('/api/orgs/' + id).then(org => {\n        $scope.org = org;\n      });\n    };\n\n    $scope.getOrgUsers = id => {\n      backendSrv.get('/api/orgs/' + id + '/users').then(orgUsers => {\n        $scope.orgUsers = orgUsers;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.orgDetailsForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/orgs/' + $scope.org.id, $scope.org).then(() => {\n        $location.path('/admin/orgs');\n      });\n    };\n\n    $scope.updateOrgUser = orgUser => {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId, orgUser);\n    };\n\n    $scope.removeOrgUser = orgUser => {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId).then(() => {\n        $scope.getOrgUsers($scope.org.id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n\n","\nexport default class AdminListOrgsCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    $scope.init = () => {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n      $scope.getOrgs();\n    };\n\n    $scope.getOrgs = () => {\n      backendSrv.get('/api/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.deleteOrg = org => {\n      $scope.appEvent('confirm-modal', {\n        title: 'Delete',\n        text: 'Do you want to delete organization ' + org.name + '?',\n        text2: 'All dashboards for this organization will be removed!',\n        icon: 'fa-trash',\n        yesText: 'Delete',\n        onConfirm: () => {\n          backendSrv.delete('/api/orgs/' + org.id).then(() => {\n            $scope.getOrgs();\n          });\n        },\n      });\n    };\n\n    $scope.init();\n  }\n}\n\n","import _ from 'lodash';\nimport { appEvents, coreModule } from 'app/core/core';\n\nexport class AlertNotificationEditCtrl {\n  theForm: any;\n  navModel: any;\n  testSeverity = 'critical';\n  notifiers: any;\n  notifierTemplateId: string;\n  isNew: boolean;\n  model: any;\n  defaults: any = {\n    type: 'email',\n    sendReminder: false,\n    frequency: '15m',\n    settings: {\n      httpMethod: 'POST',\n      autoResolve: true,\n      uploadImage: true,\n    },\n    isDefault: false,\n  };\n  getFrequencySuggestion: any;\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, private $location, private $templateCache, navModelSrv) {\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n    this.isNew = !this.$routeParams.id;\n\n    this.getFrequencySuggestion = () => {\n      return ['1m', '5m', '10m', '15m', '30m', '1h'];\n    };\n\n    this.backendSrv\n      .get(`/api/alert-notifiers`)\n      .then(notifiers => {\n        this.notifiers = notifiers;\n\n        // add option templates\n        for (const notifier of this.notifiers) {\n          this.$templateCache.put(this.getNotifierTemplateId(notifier.type), notifier.optionsTemplate);\n        }\n\n        if (!this.$routeParams.id) {\n          this.navModel.breadcrumbs.push({ text: 'New channel' });\n          this.navModel.node = { text: 'New channel' };\n          return _.defaults(this.model, this.defaults);\n        }\n\n        return this.backendSrv.get(`/api/alert-notifications/${this.$routeParams.id}`).then(result => {\n          this.navModel.breadcrumbs.push({ text: result.name });\n          this.navModel.node = { text: result.name };\n          result.settings = _.defaults(result.settings, this.defaults.settings);\n          return result;\n        });\n      })\n      .then(model => {\n        this.model = model;\n        this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n      });\n  }\n\n  save() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    if (this.model.id) {\n      this.backendSrv\n        .put(`/api/alert-notifications/${this.model.id}`, this.model)\n        .then(res => {\n          this.model = res;\n          appEvents.emit('alert-success', ['Notification updated', '']);\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    } else {\n      this.backendSrv\n        .post(`/api/alert-notifications`, this.model)\n        .then(res => {\n          appEvents.emit('alert-success', ['Notification created', '']);\n          this.$location.path('alerting/notifications');\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    }\n  }\n\n  getNotifierTemplateId(type) {\n    return `notifier-options-${type}`;\n  }\n\n  typeChanged() {\n    this.model.settings = _.defaults({}, this.defaults.settings);\n    this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n  }\n\n  testNotification() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    const payload = {\n      name: this.model.name,\n      type: this.model.type,\n      frequency: this.model.frequency,\n      settings: this.model.settings,\n    };\n\n    this.backendSrv.post(`/api/alert-notifications/test`, payload).then(res => {\n      appEvents.emit('alert-success', ['Test notification sent', '']);\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationEditCtrl', AlertNotificationEditCtrl);\n","import config from 'app/core/config';\n\nexport default class StyleGuideCtrl {\n  theme: string;\n  buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];\n  buttonSizes = ['btn-small', '', 'btn-large'];\n  buttonVariants = ['-'];\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'styleguide', 1);\n    this.theme = config.bootData.user.lightTheme ? 'light' : 'dark';\n  }\n\n  switchTheme() {\n    this.$routeParams.theme = this.theme === 'dark' ? 'light' : 'dark';\n\n    const cmd = {\n      theme: this.$routeParams.theme,\n    };\n\n    this.backendSrv.put('/api/user/preferences', cmd).then(() => {\n      window.location.href = window.location.href;\n    });\n  }\n}\n\n","import AdminListUsersCtrl from './AdminListUsersCtrl';\nimport AdminEditUserCtrl from './AdminEditUserCtrl';\nimport AdminListOrgsCtrl from './AdminListOrgsCtrl';\nimport AdminEditOrgCtrl from './AdminEditOrgCtrl';\nimport StyleGuideCtrl from './StyleGuideCtrl';\n\nimport coreModule from 'app/core/core_module';\n\nclass AdminSettingsCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-settings', 1);\n\n    backendSrv.get('/api/admin/settings').then(settings => {\n      $scope.settings = settings;\n    });\n  }\n}\n\nclass AdminHomeCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 1);\n  }\n}\n\ncoreModule.controller('AdminListUsersCtrl', AdminListUsersCtrl);\ncoreModule.controller('AdminEditUserCtrl', AdminEditUserCtrl);\ncoreModule.controller('AdminListOrgsCtrl', AdminListOrgsCtrl);\ncoreModule.controller('AdminEditOrgCtrl', AdminEditOrgCtrl);\ncoreModule.controller('AdminSettingsCtrl', AdminSettingsCtrl);\ncoreModule.controller('AdminHomeCtrl', AdminHomeCtrl);\ncoreModule.controller('StyleGuideCtrl', StyleGuideCtrl);\n","import { coreModule } from 'app/core/core';\n\nexport class AlertNotificationsListCtrl {\n  notifications: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv) {\n    this.loadNotifications();\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n  }\n\n  loadNotifications() {\n    this.backendSrv.get(`/api/alert-notifications`).then(result => {\n      this.notifications = result;\n    });\n  }\n\n  deleteNotification(id) {\n    this.backendSrv.delete(`/api/alert-notifications/${id}`).then(() => {\n      this.notifications = this.notifications.filter(notification => {\n        return notification.id !== id;\n      });\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationsListCtrl', AlertNotificationsListCtrl);\n","export class DashboardListCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n}\n","import _ from 'lodash';\n\nexport class SnapshotListCtrl {\n  navModel: any;\n  snapshots: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'snapshots', 0);\n    this.backendSrv.get('/api/dashboard/snapshots').then(result => {\n      this.snapshots = result;\n    });\n  }\n\n  removeSnapshotConfirmed(snapshot) {\n    _.remove(this.snapshots, { key: snapshot.key });\n    this.backendSrv.delete('/api/snapshots/' + snapshot.key).then(\n      () => {},\n      () => {\n        this.snapshots.push(snapshot);\n      }\n    );\n  }\n\n  removeSnapshot(snapshot) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete snapshot ' + snapshot.name + '?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removeSnapshotConfirmed(snapshot);\n      },\n    });\n  }\n}\n","import coreModule from 'app/core/core_module';\n\nimport { DashboardListCtrl } from './DashboardListCtrl';\nimport { SnapshotListCtrl } from './SnapshotListCtrl';\n\ncoreModule.controller('DashboardListCtrl', DashboardListCtrl);\ncoreModule.controller('SnapshotListCtrl', SnapshotListCtrl);\n","import './annotations/all';\nimport './templating/all';\nimport './plugins/all';\nimport './dashboard/all';\nimport './playlist/all';\nimport './panel/all';\nimport './org/all';\nimport './admin';\nimport './alerting/NotificationsEditCtrl';\nimport './alerting/NotificationsListCtrl';\nimport './manage-dashboards';\n"],"sourceRoot":""}